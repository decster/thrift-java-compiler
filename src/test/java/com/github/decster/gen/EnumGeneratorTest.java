package com.github.decster.gen;

import com.github.decster.ast.EnumNode; // Assuming these interfaces/classes exist
import com.github.decster.ast.EnumValueNode;
import org.junit.jupiter.api.Test;
// Import common stubs


import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

// Local stubs removed, using AstTestStubs

public class EnumGeneratorTest {

    private EnumGenerator generator;
    private StubEnumNode enumNode; // Use common stub
    private static final String TEST_PACKAGE = "com.test.enums";
    private static final String TEST_DATE = "2023-10-26";

    private void assertContains(String generatedCode, String expectedSnippet) {
        assertTrue(generatedCode.contains(expectedSnippet),
                "Generated code missing: '" + expectedSnippet + "'.\nCode:\n" + generatedCode);
    }

    private void assertNotContains(String generatedCode, String unexpectedSnippet) {
        assertFalse(generatedCode.contains(unexpectedSnippet),
                "Generated code should not contain: '" + unexpectedSnippet + "'.\nCode:\n" + generatedCode);
    }

    @Test
    void testSimpleEnum() {
        enumNode = new StubEnumNode("SimpleEnum");
        enumNode.addValue(new StubEnumValueNode("RED"));
        enumNode.addValue(new StubEnumValueNode("GREEN"));
        enumNode.addValue(new StubEnumValueNode("BLUE"));

        generator = new EnumGenerator(enumNode, TEST_PACKAGE, TEST_DATE); // EnumGenerator takes ast.EnumNode
        String code = generator.generate();

        assertContains(code, "package " + TEST_PACKAGE + ";");
        assertContains(code, "import org.apache.thrift.TEnum;");
        assertContains(code, "@javax.annotation.Generated(value = \"Autogenerated by Thrift Compiler (0.20.0)\", date = \"" + TEST_DATE + "\")");
        assertContains(code, "public enum SimpleEnum implements TEnum {");
        assertContains(code, "  RED(0),");
        assertContains(code, "  GREEN(1),");
        assertContains(code, "  BLUE(2);");
        assertContains(code, "private final int value;");
        assertContains(code, "private SimpleEnum(int value) {");
        assertContains(code, "public int getValue() {");
        assertContains(code, "public static SimpleEnum findByValue(int value) {");
        assertContains(code, "switch (value) {");
        assertContains(code, "case 0:\n        return RED;");
        assertContains(code, "case 1:\n        return GREEN;");
        assertContains(code, "case 2:\n        return BLUE;");
        assertContains(code, "default:\n        return null;");
        assertNotContains(code, "/**"); // No Javadoc
    }

    @Test
    void testEnumWithExplicitValues() {
        enumNode = new StubEnumNode("ExplicitEnum");
        enumNode.addValue(new StubEnumValueNode("PENDING", 1));
        enumNode.addValue(new StubEnumValueNode("ACTIVE", 5));
        enumNode.addValue(new StubEnumValueNode("INACTIVE", 10));

        generator = new EnumGenerator(enumNode, TEST_PACKAGE, TEST_DATE);
        String code = generator.generate();

        assertContains(code, "public enum ExplicitEnum implements TEnum {");
        assertContains(code, "  PENDING(1),");
        assertContains(code, "  ACTIVE(5),");
        assertContains(code, "  INACTIVE(10);");
        assertContains(code, "case 1:\n        return PENDING;");
        assertContains(code, "case 5:\n        return ACTIVE;");
        assertContains(code, "case 10:\n        return INACTIVE;");
    }

    @Test
    void testEnumWithMixedValues() {
        enumNode = new StubEnumNode("MixedEnum");
        enumNode.addValue(new StubEnumValueNode("FIRST", 1));
        enumNode.addValue(new StubEnumValueNode("SECOND"));
        enumNode.addValue(new StubEnumValueNode("THIRD", 5));
        enumNode.addValue(new StubEnumValueNode("FOURTH"));

        generator = new EnumGenerator(enumNode, TEST_PACKAGE, TEST_DATE);
        String code = generator.generate();

        assertContains(code, "public enum MixedEnum implements TEnum {");
        assertContains(code, "  FIRST(1),");
        assertContains(code, "  SECOND(2),");
        assertContains(code, "  THIRD(5),");
        assertContains(code, "  FOURTH(6);");
        assertContains(code, "case 1:\n        return FIRST;");
        assertContains(code, "case 2:\n        return SECOND;");
        assertContains(code, "case 5:\n        return THIRD;");
        assertContains(code, "case 6:\n        return FOURTH;");
    }

    @Test
    void testEnumWithJavadoc() {
        // EnumNode in AST does not have getDocString(), so EnumGenerator was changed to not produce it.
        // This test now verifies that no Javadoc is generated, even if stub had it.
        enumNode = new StubEnumNode("JavadocEnum");
        // ((StubEnumNode)enumNode).setDocString("This is a test enum.\nIt has multiple lines."); // This method does not exist on common stub by design
        enumNode.addValue(new StubEnumValueNode("VALUE1"));

        generator = new EnumGenerator(enumNode, TEST_PACKAGE, TEST_DATE);
        String code = generator.generate();

        assertNotContains(code, "/**"); // Expect no Javadoc
        assertContains(code, "public enum JavadocEnum implements TEnum {");
    }

    @Test
    void testEnumWithJavadocContainingAsteriskSlash() {
        // Similar to above, Javadoc features were removed from EnumGenerator
        enumNode = new StubEnumNode("JavadocEdgeCaseEnum");
        // ((StubEnumNode)enumNode).setDocString("This is a test enum with an asterisk/slash: */ inside.");
        enumNode.addValue(new StubEnumValueNode("VALUE1"));

        generator = new EnumGenerator(enumNode, TEST_PACKAGE, TEST_DATE);
        String code = generator.generate();

        assertNotContains(code, "/**"); // Expect no Javadoc
        assertContains(code, "public enum JavadocEdgeCaseEnum implements TEnum {");
    }


    @Test
    void testEnumWithoutJavadoc() {
        enumNode = new StubEnumNode("NoJavadocEnum");
        enumNode.addValue(new StubEnumValueNode("TEST"));

        generator = new EnumGenerator(enumNode, TEST_PACKAGE, TEST_DATE);
        String code = generator.generate();

        assertNotContains(code, "/**");
        assertContains(code, "public enum NoJavadocEnum implements TEnum {");
    }

    @Test
    void testEnumWithEmptyJavadoc() {
        enumNode = new StubEnumNode("EmptyJavadocEnum");
        // ((StubEnumNode)enumNode).setDocString("");
        enumNode.addValue(new StubEnumValueNode("TEST_VAL"));

        generator = new EnumGenerator(enumNode, TEST_PACKAGE, TEST_DATE);
        String code = generator.generate();

        assertNotContains(code, "/**"); // No Javadoc block should be generated for empty string
        assertContains(code, "public enum EmptyJavadocEnum implements TEnum {");
    }
}
