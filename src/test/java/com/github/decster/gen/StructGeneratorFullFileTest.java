package com.github.decster.gen;

import com.github.decster.ThriftAstBuilder;
import com.github.decster.ast.DocumentNode;
import com.github.decster.ast.StructNode;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static com.github.decster.gen.GeneratorTestUtil.assertEqualsLineByLine;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class StructGeneratorFullFileTest {

    private static final String idl = """
            namespace java com.example.thrift
            
            struct Point {
              1: required double xx,
              2: optional map<string, i32> yy
            }
            """;

    private static final String expectedOutput = """
            /**
             * Autogenerated by Thrift Compiler (0.20.0)
             *
             * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
             *  @generated
             */
            package com.example.thrift;

            @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
            @javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-05")
            public class Point implements org.apache.thrift.TBase<Point, Point._Fields>, java.io.Serializable, Cloneable, Comparable<Point> {
              private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Point");

              private static final org.apache.thrift.protocol.TField XX_FIELD_DESC = new org.apache.thrift.protocol.TField("xx", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
              private static final org.apache.thrift.protocol.TField YY_FIELD_DESC = new org.apache.thrift.protocol.TField("yy", org.apache.thrift.protocol.TType.MAP, (short)2);

              private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PointStandardSchemeFactory();
              private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PointTupleSchemeFactory();

              public double xx; // required
              public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> yy; // optional

              /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
              public enum _Fields implements org.apache.thrift.TFieldIdEnum {
                XX((short)1, "xx"),
                YY((short)2, "yy");

                private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

                static {
                  for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                  }
                }

                /**
                 * Find the _Fields constant that matches fieldId, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByThriftId(int fieldId) {
                  switch(fieldId) {
                    case 1: // XX
                      return XX;
                    case 2: // YY
                      return YY;
                    default:
                      return null;
                  }
                }

                /**
                 * Find the _Fields constant that matches fieldId, throwing an exception
                 * if it is not found.
                 */
                public static _Fields findByThriftIdOrThrow(int fieldId) {
                  _Fields fields = findByThriftId(fieldId);
                  if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                  return fields;
                }

                /**
                 * Find the _Fields constant that matches name, or null if its not found.
                 */
                @org.apache.thrift.annotation.Nullable
                public static _Fields findByName(java.lang.String name) {
                  return byName.get(name);
                }

                private final short _thriftId;
                private final java.lang.String _fieldName;

                _Fields(short thriftId, java.lang.String fieldName) {
                  _thriftId = thriftId;
                  _fieldName = fieldName;
                }

                @Override
                public short getThriftFieldId() {
                  return _thriftId;
                }

                @Override
                public java.lang.String getFieldName() {
                  return _fieldName;
                }
              }

              // isset id assignments
              private static final int __XX_ISSET_ID = 0;
              private byte __isset_bitfield = 0;
              private static final _Fields optionals[] = {_Fields.YY};
              public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
              static {
                java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
                tmpMap.put(_Fields.XX, new org.apache.thrift.meta_data.FieldMetaData("xx", org.apache.thrift.TFieldRequirementType.REQUIRED,\s
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
                tmpMap.put(_Fields.YY, new org.apache.thrift.meta_data.FieldMetaData("yy", org.apache.thrift.TFieldRequirementType.OPTIONAL,\s
                    new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP,\s
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING),\s
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
                metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
                org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Point.class, metaDataMap);
              }

              public Point() {
              }

              public Point(
                double xx)
              {
                this();
                this.xx = xx;
                setXxIsSet(true);
              }

              /**
               * Performs a deep copy on <i>other</i>.
               */
              public Point(Point other) {
                __isset_bitfield = other.__isset_bitfield;
                this.xx = other.xx;
                if (other.isSetYy()) {
                  java.util.Map<java.lang.String,java.lang.Integer> __this__yy = new java.util.HashMap<java.lang.String,java.lang.Integer>(other.yy);
                  this.yy = __this__yy;
                }
              }

              @Override
              public Point deepCopy() {
                return new Point(this);
              }

              @Override
              public void clear() {
                setXxIsSet(false);
                this.xx = 0.0;
                this.yy = null;
              }

              public double getXx() {
                return this.xx;
              }

              public Point setXx(double xx) {
                this.xx = xx;
                setXxIsSet(true);
                return this;
              }

              public void unsetXx() {
                __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __XX_ISSET_ID);
              }

              /** Returns true if field xx is set (has been assigned a value) and false otherwise */
              public boolean isSetXx() {
                return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __XX_ISSET_ID);
              }

              public void setXxIsSet(boolean value) {
                __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __XX_ISSET_ID, value);
              }

              public int getYySize() {
                return (this.yy == null) ? 0 : this.yy.size();
              }

              public void putToYy(java.lang.String key, int val) {
                if (this.yy == null) {
                  this.yy = new java.util.HashMap<java.lang.String,java.lang.Integer>();
                }
                this.yy.put(key, val);
              }

              @org.apache.thrift.annotation.Nullable
              public java.util.Map<java.lang.String,java.lang.Integer> getYy() {
                return this.yy;
              }

              public Point setYy(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> yy) {
                this.yy = yy;
                return this;
              }

              public void unsetYy() {
                this.yy = null;
              }

              /** Returns true if field yy is set (has been assigned a value) and false otherwise */
              public boolean isSetYy() {
                return this.yy != null;
              }

              public void setYyIsSet(boolean value) {
                if (!value) {
                  this.yy = null;
                }
              }

              @Override
              public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
                switch (field) {
                case XX:
                  if (value == null) {
                    unsetXx();
                  } else {
                    setXx((java.lang.Double)value);
                  }
                  break;

                case YY:
                  if (value == null) {
                    unsetYy();
                  } else {
                    setYy((java.util.Map<java.lang.String,java.lang.Integer>)value);
                  }
                  break;

                }
              }

              @org.apache.thrift.annotation.Nullable
              @Override
              public java.lang.Object getFieldValue(_Fields field) {
                switch (field) {
                case XX:
                  return getXx();

                case YY:
                  return getYy();

                }
                throw new java.lang.IllegalStateException();
              }

              /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
              @Override
              public boolean isSet(_Fields field) {
                if (field == null) {
                  throw new java.lang.IllegalArgumentException();
                }

                switch (field) {
                case XX:
                  return isSetXx();
                case YY:
                  return isSetYy();
                }
                throw new java.lang.IllegalStateException();
              }

              @Override
              public boolean equals(java.lang.Object that) {
                if (that instanceof Point)
                  return this.equals((Point)that);
                return false;
              }

              public boolean equals(Point that) {
                if (that == null)
                  return false;
                if (this == that)
                  return true;

                boolean this_present_xx = true;
                boolean that_present_xx = true;
                if (this_present_xx || that_present_xx) {
                  if (!(this_present_xx && that_present_xx))
                    return false;
                  if (this.xx != that.xx)
                    return false;
                }

                boolean this_present_yy = true && this.isSetYy();
                boolean that_present_yy = true && that.isSetYy();
                if (this_present_yy || that_present_yy) {
                  if (!(this_present_yy && that_present_yy))
                    return false;
                  if (!this.yy.equals(that.yy))
                    return false;
                }

                return true;
              }

              @Override
              public int hashCode() {
                int hashCode = 1;

                hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(xx);

                hashCode = hashCode * 8191 + ((isSetYy()) ? 131071 : 524287);
                if (isSetYy())
                  hashCode = hashCode * 8191 + yy.hashCode();

                return hashCode;
              }

              @Override
              public int compareTo(Point other) {
                if (!getClass().equals(other.getClass())) {
                  return getClass().getName().compareTo(other.getClass().getName());
                }

                int lastComparison = 0;

                lastComparison = java.lang.Boolean.compare(isSetXx(), other.isSetXx());
                if (lastComparison != 0) {
                  return lastComparison;
                }
                if (isSetXx()) {
                  lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xx, other.xx);
                  if (lastComparison != 0) {
                    return lastComparison;
                  }
                }
                lastComparison = java.lang.Boolean.compare(isSetYy(), other.isSetYy());
                if (lastComparison != 0) {
                  return lastComparison;
                }
                if (isSetYy()) {
                  lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yy, other.yy);
                  if (lastComparison != 0) {
                    return lastComparison;
                  }
                }
                return 0;
              }

              @org.apache.thrift.annotation.Nullable
              @Override
              public _Fields fieldForId(int fieldId) {
                return _Fields.findByThriftId(fieldId);
              }

              @Override
              public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
                scheme(iprot).read(iprot, this);
              }

              @Override
              public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
                scheme(oprot).write(oprot, this);
              }

              @Override
              public java.lang.String toString() {
                java.lang.StringBuilder sb = new java.lang.StringBuilder("Point(");
                boolean first = true;

                sb.append("xx:");
                sb.append(this.xx);
                first = false;
                if (isSetYy()) {
                  if (!first) sb.append(", ");
                  sb.append("yy:");
                  if (this.yy == null) {
                    sb.append("null");
                  } else {
                    sb.append(this.yy);
                  }
                  first = false;
                }
                sb.append(")");
                return sb.toString();
              }

              public void validate() throws org.apache.thrift.TException {
                // check for required fields
                // alas, we cannot check 'xx' because it's a primitive and you chose the non-beans generator.
                // check for sub-struct validity
              }

              private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
                try {
                  write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
                } catch (org.apache.thrift.TException te) {
                  throw new java.io.IOException(te);
                }
              }

              private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
                try {
                  // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                  __isset_bitfield = 0;
                  read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
                } catch (org.apache.thrift.TException te) {
                  throw new java.io.IOException(te);
                }
              }

              private static class PointStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                @Override
                public PointStandardScheme getScheme() {
                  return new PointStandardScheme();
                }
              }

              private static class PointStandardScheme extends org.apache.thrift.scheme.StandardScheme<Point> {

                @Override
                public void read(org.apache.thrift.protocol.TProtocol iprot, Point struct) throws org.apache.thrift.TException {
                  org.apache.thrift.protocol.TField schemeField;
                  iprot.readStructBegin();
                  while (true)
                  {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {\s
                      break;
                    }
                    switch (schemeField.id) {
                      case 1: // XX
                        if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                          struct.xx = iprot.readDouble();
                          struct.setXxIsSet(true);
                        } else {\s
                          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                      case 2: // YY
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                          {
                            org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                            struct.yy = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map0.size);
                            @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                            int _val2;
                            for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                            {
                              _key1 = iprot.readString();
                              _val2 = iprot.readI32();
                              struct.yy.put(_key1, _val2);
                            }
                            iprot.readMapEnd();
                          }
                          struct.setYyIsSet(true);
                        } else {\s
                          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                      default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                  }
                  iprot.readStructEnd();

                  // check for required fields of primitive type, which can't be checked in the validate method
                  if (!struct.isSetXx()) {
                    throw new org.apache.thrift.protocol.TProtocolException("Required field 'xx' was not found in serialized data! Struct: " + toString());
                  }
                  struct.validate();
                }

                @Override
                public void write(org.apache.thrift.protocol.TProtocol oprot, Point struct) throws org.apache.thrift.TException {
                  struct.validate();

                  oprot.writeStructBegin(STRUCT_DESC);
                  oprot.writeFieldBegin(XX_FIELD_DESC);
                  oprot.writeDouble(struct.xx);
                  oprot.writeFieldEnd();
                  if (struct.yy != null) {
                    if (struct.isSetYy()) {
                      oprot.writeFieldBegin(YY_FIELD_DESC);
                      {
                        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.yy.size()));
                        for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter4 : struct.yy.entrySet())
                        {
                          oprot.writeString(_iter4.getKey());
                          oprot.writeI32(_iter4.getValue());
                        }
                        oprot.writeMapEnd();
                      }
                      oprot.writeFieldEnd();
                    }
                  }
                  oprot.writeFieldStop();
                  oprot.writeStructEnd();
                }

              }

              private static class PointTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
                @Override
                public PointTupleScheme getScheme() {
                  return new PointTupleScheme();
                }
              }

              private static class PointTupleScheme extends org.apache.thrift.scheme.TupleScheme<Point> {

                @Override
                public void write(org.apache.thrift.protocol.TProtocol prot, Point struct) throws org.apache.thrift.TException {
                  org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                  oprot.writeDouble(struct.xx);
                  java.util.BitSet optionals = new java.util.BitSet();
                  if (struct.isSetYy()) {
                    optionals.set(0);
                  }
                  oprot.writeBitSet(optionals, 1);
                  if (struct.isSetYy()) {
                    {
                      oprot.writeI32(struct.yy.size());
                      for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter5 : struct.yy.entrySet())
                      {
                        oprot.writeString(_iter5.getKey());
                        oprot.writeI32(_iter5.getValue());
                      }
                    }
                  }
                }

                @Override
                public void read(org.apache.thrift.protocol.TProtocol prot, Point struct) throws org.apache.thrift.TException {
                  org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
                  struct.xx = iprot.readDouble();
                  struct.setXxIsSet(true);
                  java.util.BitSet incoming = iprot.readBitSet(1);
                  if (incoming.get(0)) {
                    {
                      org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32);\s
                      struct.yy = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map6.size);
                      @org.apache.thrift.annotation.Nullable java.lang.String _key7;
                      int _val8;
                      for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                      {
                        _key7 = iprot.readString();
                        _val8 = iprot.readI32();
                        struct.yy.put(_key7, _val8);
                      }
                    }
                    struct.setYyIsSet(true);
                  }
                }
              }

              private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
                return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
              }
            }
            """;

    @Test
    void testFullFileMath() throws IOException {
        DocumentNode documentNode = ThriftAstBuilder.buildFromString(idl);
        Map<String, Boolean> options = new HashMap<>();
        StructLikeGenerator generator = new StructLikeGenerator((StructNode) documentNode.getDefinitions().get(0), documentNode, "com.example.thrift", "2025-06-04", options);
        String generatedCode = generator.generate();
        assertEqualsLineByLine(generatedCode, expectedOutput);
    }
}
