/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-06")
public class ManyFields implements org.apache.thrift.TBase<ManyFields, ManyFields._Fields>, java.io.Serializable, Cloneable, Comparable<ManyFields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ManyFields");

  private static final org.apache.thrift.protocol.TField A1_FIELD_DESC = new org.apache.thrift.protocol.TField("a1", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField A2_FIELD_DESC = new org.apache.thrift.protocol.TField("a2", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField A3_FIELD_DESC = new org.apache.thrift.protocol.TField("a3", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField A4_FIELD_DESC = new org.apache.thrift.protocol.TField("a4", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField A5_FIELD_DESC = new org.apache.thrift.protocol.TField("a5", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField A6_FIELD_DESC = new org.apache.thrift.protocol.TField("a6", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField A7_FIELD_DESC = new org.apache.thrift.protocol.TField("a7", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField A8_FIELD_DESC = new org.apache.thrift.protocol.TField("a8", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField A9_FIELD_DESC = new org.apache.thrift.protocol.TField("a9", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField A10_FIELD_DESC = new org.apache.thrift.protocol.TField("a10", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField A11_FIELD_DESC = new org.apache.thrift.protocol.TField("a11", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField A12_FIELD_DESC = new org.apache.thrift.protocol.TField("a12", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField A13_FIELD_DESC = new org.apache.thrift.protocol.TField("a13", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField A14_FIELD_DESC = new org.apache.thrift.protocol.TField("a14", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField A15_FIELD_DESC = new org.apache.thrift.protocol.TField("a15", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField A16_FIELD_DESC = new org.apache.thrift.protocol.TField("a16", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField A17_FIELD_DESC = new org.apache.thrift.protocol.TField("a17", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField A18_FIELD_DESC = new org.apache.thrift.protocol.TField("a18", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField A19_FIELD_DESC = new org.apache.thrift.protocol.TField("a19", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField A20_FIELD_DESC = new org.apache.thrift.protocol.TField("a20", org.apache.thrift.protocol.TType.DOUBLE, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ManyFieldsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ManyFieldsTupleSchemeFactory();

  public double a1; // optional
  public double a2; // required
  public double a3; // optional
  public double a4; // required
  public double a5; // optional
  public double a6; // required
  public double a7; // optional
  public double a8; // required
  public double a9; // optional
  public double a10; // required
  public double a11; // optional
  public double a12; // required
  public double a13; // optional
  public double a14; // required
  public double a15; // optional
  public double a16; // required
  public double a17; // optional
  public double a18; // required
  public double a19; // optional
  public double a20; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    A1((short)1, "a1"),
    A2((short)2, "a2"),
    A3((short)3, "a3"),
    A4((short)4, "a4"),
    A5((short)5, "a5"),
    A6((short)6, "a6"),
    A7((short)7, "a7"),
    A8((short)8, "a8"),
    A9((short)9, "a9"),
    A10((short)10, "a10"),
    A11((short)11, "a11"),
    A12((short)12, "a12"),
    A13((short)13, "a13"),
    A14((short)14, "a14"),
    A15((short)15, "a15"),
    A16((short)16, "a16"),
    A17((short)17, "a17"),
    A18((short)18, "a18"),
    A19((short)19, "a19"),
    A20((short)20, "a20");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // A1
          return A1;
        case 2: // A2
          return A2;
        case 3: // A3
          return A3;
        case 4: // A4
          return A4;
        case 5: // A5
          return A5;
        case 6: // A6
          return A6;
        case 7: // A7
          return A7;
        case 8: // A8
          return A8;
        case 9: // A9
          return A9;
        case 10: // A10
          return A10;
        case 11: // A11
          return A11;
        case 12: // A12
          return A12;
        case 13: // A13
          return A13;
        case 14: // A14
          return A14;
        case 15: // A15
          return A15;
        case 16: // A16
          return A16;
        case 17: // A17
          return A17;
        case 18: // A18
          return A18;
        case 19: // A19
          return A19;
        case 20: // A20
          return A20;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __A1_ISSET_ID = 0;
  private static final int __A2_ISSET_ID = 1;
  private static final int __A3_ISSET_ID = 2;
  private static final int __A4_ISSET_ID = 3;
  private static final int __A5_ISSET_ID = 4;
  private static final int __A6_ISSET_ID = 5;
  private static final int __A7_ISSET_ID = 6;
  private static final int __A8_ISSET_ID = 7;
  private static final int __A9_ISSET_ID = 8;
  private static final int __A10_ISSET_ID = 9;
  private static final int __A11_ISSET_ID = 10;
  private static final int __A12_ISSET_ID = 11;
  private static final int __A13_ISSET_ID = 12;
  private static final int __A14_ISSET_ID = 13;
  private static final int __A15_ISSET_ID = 14;
  private static final int __A16_ISSET_ID = 15;
  private static final int __A17_ISSET_ID = 16;
  private static final int __A18_ISSET_ID = 17;
  private static final int __A19_ISSET_ID = 18;
  private static final int __A20_ISSET_ID = 19;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.A1,_Fields.A3,_Fields.A5,_Fields.A7,_Fields.A9,_Fields.A11,_Fields.A13,_Fields.A15,_Fields.A17,_Fields.A19};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.A1, new org.apache.thrift.meta_data.FieldMetaData("a1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A2, new org.apache.thrift.meta_data.FieldMetaData("a2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A3, new org.apache.thrift.meta_data.FieldMetaData("a3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A4, new org.apache.thrift.meta_data.FieldMetaData("a4", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A5, new org.apache.thrift.meta_data.FieldMetaData("a5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A6, new org.apache.thrift.meta_data.FieldMetaData("a6", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A7, new org.apache.thrift.meta_data.FieldMetaData("a7", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A8, new org.apache.thrift.meta_data.FieldMetaData("a8", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A9, new org.apache.thrift.meta_data.FieldMetaData("a9", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A10, new org.apache.thrift.meta_data.FieldMetaData("a10", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A11, new org.apache.thrift.meta_data.FieldMetaData("a11", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A12, new org.apache.thrift.meta_data.FieldMetaData("a12", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A13, new org.apache.thrift.meta_data.FieldMetaData("a13", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A14, new org.apache.thrift.meta_data.FieldMetaData("a14", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A15, new org.apache.thrift.meta_data.FieldMetaData("a15", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A16, new org.apache.thrift.meta_data.FieldMetaData("a16", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A17, new org.apache.thrift.meta_data.FieldMetaData("a17", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A18, new org.apache.thrift.meta_data.FieldMetaData("a18", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A19, new org.apache.thrift.meta_data.FieldMetaData("a19", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A20, new org.apache.thrift.meta_data.FieldMetaData("a20", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ManyFields.class, metaDataMap);
  }

  public ManyFields() {
  }

  public ManyFields(
    double a2,
    double a4,
    double a6,
    double a8,
    double a10,
    double a12,
    double a14,
    double a16,
    double a18,
    double a20)
  {
    this();
    this.a2 = a2;
    setA2IsSet(true);
    this.a4 = a4;
    setA4IsSet(true);
    this.a6 = a6;
    setA6IsSet(true);
    this.a8 = a8;
    setA8IsSet(true);
    this.a10 = a10;
    setA10IsSet(true);
    this.a12 = a12;
    setA12IsSet(true);
    this.a14 = a14;
    setA14IsSet(true);
    this.a16 = a16;
    setA16IsSet(true);
    this.a18 = a18;
    setA18IsSet(true);
    this.a20 = a20;
    setA20IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ManyFields(ManyFields other) {
    __isset_bitfield = other.__isset_bitfield;
    this.a1 = other.a1;
    this.a2 = other.a2;
    this.a3 = other.a3;
    this.a4 = other.a4;
    this.a5 = other.a5;
    this.a6 = other.a6;
    this.a7 = other.a7;
    this.a8 = other.a8;
    this.a9 = other.a9;
    this.a10 = other.a10;
    this.a11 = other.a11;
    this.a12 = other.a12;
    this.a13 = other.a13;
    this.a14 = other.a14;
    this.a15 = other.a15;
    this.a16 = other.a16;
    this.a17 = other.a17;
    this.a18 = other.a18;
    this.a19 = other.a19;
    this.a20 = other.a20;
  }

  @Override
  public ManyFields deepCopy() {
    return new ManyFields(this);
  }

  @Override
  public void clear() {
    setA1IsSet(false);
    this.a1 = 0.0;
    setA2IsSet(false);
    this.a2 = 0.0;
    setA3IsSet(false);
    this.a3 = 0.0;
    setA4IsSet(false);
    this.a4 = 0.0;
    setA5IsSet(false);
    this.a5 = 0.0;
    setA6IsSet(false);
    this.a6 = 0.0;
    setA7IsSet(false);
    this.a7 = 0.0;
    setA8IsSet(false);
    this.a8 = 0.0;
    setA9IsSet(false);
    this.a9 = 0.0;
    setA10IsSet(false);
    this.a10 = 0.0;
    setA11IsSet(false);
    this.a11 = 0.0;
    setA12IsSet(false);
    this.a12 = 0.0;
    setA13IsSet(false);
    this.a13 = 0.0;
    setA14IsSet(false);
    this.a14 = 0.0;
    setA15IsSet(false);
    this.a15 = 0.0;
    setA16IsSet(false);
    this.a16 = 0.0;
    setA17IsSet(false);
    this.a17 = 0.0;
    setA18IsSet(false);
    this.a18 = 0.0;
    setA19IsSet(false);
    this.a19 = 0.0;
    setA20IsSet(false);
    this.a20 = 0.0;
  }

  public double getA1() {
    return this.a1;
  }

  public ManyFields setA1(double a1) {
    this.a1 = a1;
    setA1IsSet(true);
    return this;
  }

  public void unsetA1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A1_ISSET_ID);
  }

  /** Returns true if field a1 is set (has been assigned a value) and false otherwise */
  public boolean isSetA1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A1_ISSET_ID);
  }

  public void setA1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A1_ISSET_ID, value);
  }

  public double getA2() {
    return this.a2;
  }

  public ManyFields setA2(double a2) {
    this.a2 = a2;
    setA2IsSet(true);
    return this;
  }

  public void unsetA2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A2_ISSET_ID);
  }

  /** Returns true if field a2 is set (has been assigned a value) and false otherwise */
  public boolean isSetA2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A2_ISSET_ID);
  }

  public void setA2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A2_ISSET_ID, value);
  }

  public double getA3() {
    return this.a3;
  }

  public ManyFields setA3(double a3) {
    this.a3 = a3;
    setA3IsSet(true);
    return this;
  }

  public void unsetA3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A3_ISSET_ID);
  }

  /** Returns true if field a3 is set (has been assigned a value) and false otherwise */
  public boolean isSetA3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A3_ISSET_ID);
  }

  public void setA3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A3_ISSET_ID, value);
  }

  public double getA4() {
    return this.a4;
  }

  public ManyFields setA4(double a4) {
    this.a4 = a4;
    setA4IsSet(true);
    return this;
  }

  public void unsetA4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A4_ISSET_ID);
  }

  /** Returns true if field a4 is set (has been assigned a value) and false otherwise */
  public boolean isSetA4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A4_ISSET_ID);
  }

  public void setA4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A4_ISSET_ID, value);
  }

  public double getA5() {
    return this.a5;
  }

  public ManyFields setA5(double a5) {
    this.a5 = a5;
    setA5IsSet(true);
    return this;
  }

  public void unsetA5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A5_ISSET_ID);
  }

  /** Returns true if field a5 is set (has been assigned a value) and false otherwise */
  public boolean isSetA5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A5_ISSET_ID);
  }

  public void setA5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A5_ISSET_ID, value);
  }

  public double getA6() {
    return this.a6;
  }

  public ManyFields setA6(double a6) {
    this.a6 = a6;
    setA6IsSet(true);
    return this;
  }

  public void unsetA6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A6_ISSET_ID);
  }

  /** Returns true if field a6 is set (has been assigned a value) and false otherwise */
  public boolean isSetA6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A6_ISSET_ID);
  }

  public void setA6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A6_ISSET_ID, value);
  }

  public double getA7() {
    return this.a7;
  }

  public ManyFields setA7(double a7) {
    this.a7 = a7;
    setA7IsSet(true);
    return this;
  }

  public void unsetA7() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A7_ISSET_ID);
  }

  /** Returns true if field a7 is set (has been assigned a value) and false otherwise */
  public boolean isSetA7() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A7_ISSET_ID);
  }

  public void setA7IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A7_ISSET_ID, value);
  }

  public double getA8() {
    return this.a8;
  }

  public ManyFields setA8(double a8) {
    this.a8 = a8;
    setA8IsSet(true);
    return this;
  }

  public void unsetA8() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A8_ISSET_ID);
  }

  /** Returns true if field a8 is set (has been assigned a value) and false otherwise */
  public boolean isSetA8() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A8_ISSET_ID);
  }

  public void setA8IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A8_ISSET_ID, value);
  }

  public double getA9() {
    return this.a9;
  }

  public ManyFields setA9(double a9) {
    this.a9 = a9;
    setA9IsSet(true);
    return this;
  }

  public void unsetA9() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A9_ISSET_ID);
  }

  /** Returns true if field a9 is set (has been assigned a value) and false otherwise */
  public boolean isSetA9() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A9_ISSET_ID);
  }

  public void setA9IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A9_ISSET_ID, value);
  }

  public double getA10() {
    return this.a10;
  }

  public ManyFields setA10(double a10) {
    this.a10 = a10;
    setA10IsSet(true);
    return this;
  }

  public void unsetA10() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A10_ISSET_ID);
  }

  /** Returns true if field a10 is set (has been assigned a value) and false otherwise */
  public boolean isSetA10() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A10_ISSET_ID);
  }

  public void setA10IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A10_ISSET_ID, value);
  }

  public double getA11() {
    return this.a11;
  }

  public ManyFields setA11(double a11) {
    this.a11 = a11;
    setA11IsSet(true);
    return this;
  }

  public void unsetA11() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A11_ISSET_ID);
  }

  /** Returns true if field a11 is set (has been assigned a value) and false otherwise */
  public boolean isSetA11() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A11_ISSET_ID);
  }

  public void setA11IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A11_ISSET_ID, value);
  }

  public double getA12() {
    return this.a12;
  }

  public ManyFields setA12(double a12) {
    this.a12 = a12;
    setA12IsSet(true);
    return this;
  }

  public void unsetA12() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A12_ISSET_ID);
  }

  /** Returns true if field a12 is set (has been assigned a value) and false otherwise */
  public boolean isSetA12() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A12_ISSET_ID);
  }

  public void setA12IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A12_ISSET_ID, value);
  }

  public double getA13() {
    return this.a13;
  }

  public ManyFields setA13(double a13) {
    this.a13 = a13;
    setA13IsSet(true);
    return this;
  }

  public void unsetA13() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A13_ISSET_ID);
  }

  /** Returns true if field a13 is set (has been assigned a value) and false otherwise */
  public boolean isSetA13() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A13_ISSET_ID);
  }

  public void setA13IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A13_ISSET_ID, value);
  }

  public double getA14() {
    return this.a14;
  }

  public ManyFields setA14(double a14) {
    this.a14 = a14;
    setA14IsSet(true);
    return this;
  }

  public void unsetA14() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A14_ISSET_ID);
  }

  /** Returns true if field a14 is set (has been assigned a value) and false otherwise */
  public boolean isSetA14() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A14_ISSET_ID);
  }

  public void setA14IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A14_ISSET_ID, value);
  }

  public double getA15() {
    return this.a15;
  }

  public ManyFields setA15(double a15) {
    this.a15 = a15;
    setA15IsSet(true);
    return this;
  }

  public void unsetA15() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A15_ISSET_ID);
  }

  /** Returns true if field a15 is set (has been assigned a value) and false otherwise */
  public boolean isSetA15() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A15_ISSET_ID);
  }

  public void setA15IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A15_ISSET_ID, value);
  }

  public double getA16() {
    return this.a16;
  }

  public ManyFields setA16(double a16) {
    this.a16 = a16;
    setA16IsSet(true);
    return this;
  }

  public void unsetA16() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A16_ISSET_ID);
  }

  /** Returns true if field a16 is set (has been assigned a value) and false otherwise */
  public boolean isSetA16() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A16_ISSET_ID);
  }

  public void setA16IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A16_ISSET_ID, value);
  }

  public double getA17() {
    return this.a17;
  }

  public ManyFields setA17(double a17) {
    this.a17 = a17;
    setA17IsSet(true);
    return this;
  }

  public void unsetA17() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A17_ISSET_ID);
  }

  /** Returns true if field a17 is set (has been assigned a value) and false otherwise */
  public boolean isSetA17() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A17_ISSET_ID);
  }

  public void setA17IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A17_ISSET_ID, value);
  }

  public double getA18() {
    return this.a18;
  }

  public ManyFields setA18(double a18) {
    this.a18 = a18;
    setA18IsSet(true);
    return this;
  }

  public void unsetA18() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A18_ISSET_ID);
  }

  /** Returns true if field a18 is set (has been assigned a value) and false otherwise */
  public boolean isSetA18() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A18_ISSET_ID);
  }

  public void setA18IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A18_ISSET_ID, value);
  }

  public double getA19() {
    return this.a19;
  }

  public ManyFields setA19(double a19) {
    this.a19 = a19;
    setA19IsSet(true);
    return this;
  }

  public void unsetA19() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A19_ISSET_ID);
  }

  /** Returns true if field a19 is set (has been assigned a value) and false otherwise */
  public boolean isSetA19() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A19_ISSET_ID);
  }

  public void setA19IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A19_ISSET_ID, value);
  }

  public double getA20() {
    return this.a20;
  }

  public ManyFields setA20(double a20) {
    this.a20 = a20;
    setA20IsSet(true);
    return this;
  }

  public void unsetA20() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A20_ISSET_ID);
  }

  /** Returns true if field a20 is set (has been assigned a value) and false otherwise */
  public boolean isSetA20() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A20_ISSET_ID);
  }

  public void setA20IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A20_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case A1:
      if (value == null) {
        unsetA1();
      } else {
        setA1((java.lang.Double)value);
      }
      break;

    case A2:
      if (value == null) {
        unsetA2();
      } else {
        setA2((java.lang.Double)value);
      }
      break;

    case A3:
      if (value == null) {
        unsetA3();
      } else {
        setA3((java.lang.Double)value);
      }
      break;

    case A4:
      if (value == null) {
        unsetA4();
      } else {
        setA4((java.lang.Double)value);
      }
      break;

    case A5:
      if (value == null) {
        unsetA5();
      } else {
        setA5((java.lang.Double)value);
      }
      break;

    case A6:
      if (value == null) {
        unsetA6();
      } else {
        setA6((java.lang.Double)value);
      }
      break;

    case A7:
      if (value == null) {
        unsetA7();
      } else {
        setA7((java.lang.Double)value);
      }
      break;

    case A8:
      if (value == null) {
        unsetA8();
      } else {
        setA8((java.lang.Double)value);
      }
      break;

    case A9:
      if (value == null) {
        unsetA9();
      } else {
        setA9((java.lang.Double)value);
      }
      break;

    case A10:
      if (value == null) {
        unsetA10();
      } else {
        setA10((java.lang.Double)value);
      }
      break;

    case A11:
      if (value == null) {
        unsetA11();
      } else {
        setA11((java.lang.Double)value);
      }
      break;

    case A12:
      if (value == null) {
        unsetA12();
      } else {
        setA12((java.lang.Double)value);
      }
      break;

    case A13:
      if (value == null) {
        unsetA13();
      } else {
        setA13((java.lang.Double)value);
      }
      break;

    case A14:
      if (value == null) {
        unsetA14();
      } else {
        setA14((java.lang.Double)value);
      }
      break;

    case A15:
      if (value == null) {
        unsetA15();
      } else {
        setA15((java.lang.Double)value);
      }
      break;

    case A16:
      if (value == null) {
        unsetA16();
      } else {
        setA16((java.lang.Double)value);
      }
      break;

    case A17:
      if (value == null) {
        unsetA17();
      } else {
        setA17((java.lang.Double)value);
      }
      break;

    case A18:
      if (value == null) {
        unsetA18();
      } else {
        setA18((java.lang.Double)value);
      }
      break;

    case A19:
      if (value == null) {
        unsetA19();
      } else {
        setA19((java.lang.Double)value);
      }
      break;

    case A20:
      if (value == null) {
        unsetA20();
      } else {
        setA20((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case A1:
      return getA1();

    case A2:
      return getA2();

    case A3:
      return getA3();

    case A4:
      return getA4();

    case A5:
      return getA5();

    case A6:
      return getA6();

    case A7:
      return getA7();

    case A8:
      return getA8();

    case A9:
      return getA9();

    case A10:
      return getA10();

    case A11:
      return getA11();

    case A12:
      return getA12();

    case A13:
      return getA13();

    case A14:
      return getA14();

    case A15:
      return getA15();

    case A16:
      return getA16();

    case A17:
      return getA17();

    case A18:
      return getA18();

    case A19:
      return getA19();

    case A20:
      return getA20();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case A1:
      return isSetA1();
    case A2:
      return isSetA2();
    case A3:
      return isSetA3();
    case A4:
      return isSetA4();
    case A5:
      return isSetA5();
    case A6:
      return isSetA6();
    case A7:
      return isSetA7();
    case A8:
      return isSetA8();
    case A9:
      return isSetA9();
    case A10:
      return isSetA10();
    case A11:
      return isSetA11();
    case A12:
      return isSetA12();
    case A13:
      return isSetA13();
    case A14:
      return isSetA14();
    case A15:
      return isSetA15();
    case A16:
      return isSetA16();
    case A17:
      return isSetA17();
    case A18:
      return isSetA18();
    case A19:
      return isSetA19();
    case A20:
      return isSetA20();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ManyFields)
      return this.equals((ManyFields)that);
    return false;
  }

  public boolean equals(ManyFields that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_a1 = true && this.isSetA1();
    boolean that_present_a1 = true && that.isSetA1();
    if (this_present_a1 || that_present_a1) {
      if (!(this_present_a1 && that_present_a1))
        return false;
      if (this.a1 != that.a1)
        return false;
    }

    boolean this_present_a2 = true;
    boolean that_present_a2 = true;
    if (this_present_a2 || that_present_a2) {
      if (!(this_present_a2 && that_present_a2))
        return false;
      if (this.a2 != that.a2)
        return false;
    }

    boolean this_present_a3 = true && this.isSetA3();
    boolean that_present_a3 = true && that.isSetA3();
    if (this_present_a3 || that_present_a3) {
      if (!(this_present_a3 && that_present_a3))
        return false;
      if (this.a3 != that.a3)
        return false;
    }

    boolean this_present_a4 = true;
    boolean that_present_a4 = true;
    if (this_present_a4 || that_present_a4) {
      if (!(this_present_a4 && that_present_a4))
        return false;
      if (this.a4 != that.a4)
        return false;
    }

    boolean this_present_a5 = true && this.isSetA5();
    boolean that_present_a5 = true && that.isSetA5();
    if (this_present_a5 || that_present_a5) {
      if (!(this_present_a5 && that_present_a5))
        return false;
      if (this.a5 != that.a5)
        return false;
    }

    boolean this_present_a6 = true;
    boolean that_present_a6 = true;
    if (this_present_a6 || that_present_a6) {
      if (!(this_present_a6 && that_present_a6))
        return false;
      if (this.a6 != that.a6)
        return false;
    }

    boolean this_present_a7 = true && this.isSetA7();
    boolean that_present_a7 = true && that.isSetA7();
    if (this_present_a7 || that_present_a7) {
      if (!(this_present_a7 && that_present_a7))
        return false;
      if (this.a7 != that.a7)
        return false;
    }

    boolean this_present_a8 = true;
    boolean that_present_a8 = true;
    if (this_present_a8 || that_present_a8) {
      if (!(this_present_a8 && that_present_a8))
        return false;
      if (this.a8 != that.a8)
        return false;
    }

    boolean this_present_a9 = true && this.isSetA9();
    boolean that_present_a9 = true && that.isSetA9();
    if (this_present_a9 || that_present_a9) {
      if (!(this_present_a9 && that_present_a9))
        return false;
      if (this.a9 != that.a9)
        return false;
    }

    boolean this_present_a10 = true;
    boolean that_present_a10 = true;
    if (this_present_a10 || that_present_a10) {
      if (!(this_present_a10 && that_present_a10))
        return false;
      if (this.a10 != that.a10)
        return false;
    }

    boolean this_present_a11 = true && this.isSetA11();
    boolean that_present_a11 = true && that.isSetA11();
    if (this_present_a11 || that_present_a11) {
      if (!(this_present_a11 && that_present_a11))
        return false;
      if (this.a11 != that.a11)
        return false;
    }

    boolean this_present_a12 = true;
    boolean that_present_a12 = true;
    if (this_present_a12 || that_present_a12) {
      if (!(this_present_a12 && that_present_a12))
        return false;
      if (this.a12 != that.a12)
        return false;
    }

    boolean this_present_a13 = true && this.isSetA13();
    boolean that_present_a13 = true && that.isSetA13();
    if (this_present_a13 || that_present_a13) {
      if (!(this_present_a13 && that_present_a13))
        return false;
      if (this.a13 != that.a13)
        return false;
    }

    boolean this_present_a14 = true;
    boolean that_present_a14 = true;
    if (this_present_a14 || that_present_a14) {
      if (!(this_present_a14 && that_present_a14))
        return false;
      if (this.a14 != that.a14)
        return false;
    }

    boolean this_present_a15 = true && this.isSetA15();
    boolean that_present_a15 = true && that.isSetA15();
    if (this_present_a15 || that_present_a15) {
      if (!(this_present_a15 && that_present_a15))
        return false;
      if (this.a15 != that.a15)
        return false;
    }

    boolean this_present_a16 = true;
    boolean that_present_a16 = true;
    if (this_present_a16 || that_present_a16) {
      if (!(this_present_a16 && that_present_a16))
        return false;
      if (this.a16 != that.a16)
        return false;
    }

    boolean this_present_a17 = true && this.isSetA17();
    boolean that_present_a17 = true && that.isSetA17();
    if (this_present_a17 || that_present_a17) {
      if (!(this_present_a17 && that_present_a17))
        return false;
      if (this.a17 != that.a17)
        return false;
    }

    boolean this_present_a18 = true;
    boolean that_present_a18 = true;
    if (this_present_a18 || that_present_a18) {
      if (!(this_present_a18 && that_present_a18))
        return false;
      if (this.a18 != that.a18)
        return false;
    }

    boolean this_present_a19 = true && this.isSetA19();
    boolean that_present_a19 = true && that.isSetA19();
    if (this_present_a19 || that_present_a19) {
      if (!(this_present_a19 && that_present_a19))
        return false;
      if (this.a19 != that.a19)
        return false;
    }

    boolean this_present_a20 = true;
    boolean that_present_a20 = true;
    if (this_present_a20 || that_present_a20) {
      if (!(this_present_a20 && that_present_a20))
        return false;
      if (this.a20 != that.a20)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetA1()) ? 131071 : 524287);
    if (isSetA1())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a1);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a2);

    hashCode = hashCode * 8191 + ((isSetA3()) ? 131071 : 524287);
    if (isSetA3())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a3);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a4);

    hashCode = hashCode * 8191 + ((isSetA5()) ? 131071 : 524287);
    if (isSetA5())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a5);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a6);

    hashCode = hashCode * 8191 + ((isSetA7()) ? 131071 : 524287);
    if (isSetA7())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a7);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a8);

    hashCode = hashCode * 8191 + ((isSetA9()) ? 131071 : 524287);
    if (isSetA9())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a9);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a10);

    hashCode = hashCode * 8191 + ((isSetA11()) ? 131071 : 524287);
    if (isSetA11())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a11);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a12);

    hashCode = hashCode * 8191 + ((isSetA13()) ? 131071 : 524287);
    if (isSetA13())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a13);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a14);

    hashCode = hashCode * 8191 + ((isSetA15()) ? 131071 : 524287);
    if (isSetA15())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a15);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a16);

    hashCode = hashCode * 8191 + ((isSetA17()) ? 131071 : 524287);
    if (isSetA17())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a17);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a18);

    hashCode = hashCode * 8191 + ((isSetA19()) ? 131071 : 524287);
    if (isSetA19())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a19);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a20);

    return hashCode;
  }

  @Override
  public int compareTo(ManyFields other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetA1(), other.isSetA1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a1, other.a1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA2(), other.isSetA2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a2, other.a2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA3(), other.isSetA3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a3, other.a3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA4(), other.isSetA4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a4, other.a4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA5(), other.isSetA5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a5, other.a5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA6(), other.isSetA6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a6, other.a6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA7(), other.isSetA7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a7, other.a7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA8(), other.isSetA8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a8, other.a8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA9(), other.isSetA9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a9, other.a9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA10(), other.isSetA10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a10, other.a10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA11(), other.isSetA11());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA11()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a11, other.a11);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA12(), other.isSetA12());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA12()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a12, other.a12);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA13(), other.isSetA13());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA13()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a13, other.a13);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA14(), other.isSetA14());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA14()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a14, other.a14);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA15(), other.isSetA15());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA15()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a15, other.a15);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA16(), other.isSetA16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a16, other.a16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA17(), other.isSetA17());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA17()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a17, other.a17);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA18(), other.isSetA18());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA18()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a18, other.a18);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA19(), other.isSetA19());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA19()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a19, other.a19);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA20(), other.isSetA20());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA20()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a20, other.a20);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ManyFields(");
    boolean first = true;

    if (isSetA1()) {
      sb.append("a1:");
      sb.append(this.a1);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a2:");
    sb.append(this.a2);
    first = false;
    if (isSetA3()) {
      if (!first) sb.append(", ");
      sb.append("a3:");
      sb.append(this.a3);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a4:");
    sb.append(this.a4);
    first = false;
    if (isSetA5()) {
      if (!first) sb.append(", ");
      sb.append("a5:");
      sb.append(this.a5);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a6:");
    sb.append(this.a6);
    first = false;
    if (isSetA7()) {
      if (!first) sb.append(", ");
      sb.append("a7:");
      sb.append(this.a7);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a8:");
    sb.append(this.a8);
    first = false;
    if (isSetA9()) {
      if (!first) sb.append(", ");
      sb.append("a9:");
      sb.append(this.a9);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a10:");
    sb.append(this.a10);
    first = false;
    if (isSetA11()) {
      if (!first) sb.append(", ");
      sb.append("a11:");
      sb.append(this.a11);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a12:");
    sb.append(this.a12);
    first = false;
    if (isSetA13()) {
      if (!first) sb.append(", ");
      sb.append("a13:");
      sb.append(this.a13);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a14:");
    sb.append(this.a14);
    first = false;
    if (isSetA15()) {
      if (!first) sb.append(", ");
      sb.append("a15:");
      sb.append(this.a15);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a16:");
    sb.append(this.a16);
    first = false;
    if (isSetA17()) {
      if (!first) sb.append(", ");
      sb.append("a17:");
      sb.append(this.a17);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a18:");
    sb.append(this.a18);
    first = false;
    if (isSetA19()) {
      if (!first) sb.append(", ");
      sb.append("a19:");
      sb.append(this.a19);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a20:");
    sb.append(this.a20);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'a2' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a4' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a6' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a8' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a10' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a12' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a14' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a16' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a18' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a20' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ManyFieldsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ManyFieldsStandardScheme getScheme() {
      return new ManyFieldsStandardScheme();
    }
  }

  private static class ManyFieldsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ManyFields> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, ManyFields struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // A1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a1 = iprot.readDouble();
              struct.setA1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // A2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a2 = iprot.readDouble();
              struct.setA2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // A3
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a3 = iprot.readDouble();
              struct.setA3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // A4
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a4 = iprot.readDouble();
              struct.setA4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // A5
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a5 = iprot.readDouble();
              struct.setA5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // A6
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a6 = iprot.readDouble();
              struct.setA6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // A7
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a7 = iprot.readDouble();
              struct.setA7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // A8
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a8 = iprot.readDouble();
              struct.setA8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // A9
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a9 = iprot.readDouble();
              struct.setA9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // A10
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a10 = iprot.readDouble();
              struct.setA10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // A11
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a11 = iprot.readDouble();
              struct.setA11IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // A12
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a12 = iprot.readDouble();
              struct.setA12IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // A13
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a13 = iprot.readDouble();
              struct.setA13IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // A14
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a14 = iprot.readDouble();
              struct.setA14IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // A15
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a15 = iprot.readDouble();
              struct.setA15IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // A16
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a16 = iprot.readDouble();
              struct.setA16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // A17
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a17 = iprot.readDouble();
              struct.setA17IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // A18
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a18 = iprot.readDouble();
              struct.setA18IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // A19
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a19 = iprot.readDouble();
              struct.setA19IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // A20
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a20 = iprot.readDouble();
              struct.setA20IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetA2()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a2' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA4()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a4' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA6()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a6' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA8()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a8' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA10()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a10' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA12()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a12' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA14()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a14' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA16()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a16' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA18()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a18' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA20()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a20' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, ManyFields struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetA1()) {
        oprot.writeFieldBegin(A1_FIELD_DESC);
        oprot.writeDouble(struct.a1);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A2_FIELD_DESC);
      oprot.writeDouble(struct.a2);
      oprot.writeFieldEnd();
      if (struct.isSetA3()) {
        oprot.writeFieldBegin(A3_FIELD_DESC);
        oprot.writeDouble(struct.a3);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A4_FIELD_DESC);
      oprot.writeDouble(struct.a4);
      oprot.writeFieldEnd();
      if (struct.isSetA5()) {
        oprot.writeFieldBegin(A5_FIELD_DESC);
        oprot.writeDouble(struct.a5);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A6_FIELD_DESC);
      oprot.writeDouble(struct.a6);
      oprot.writeFieldEnd();
      if (struct.isSetA7()) {
        oprot.writeFieldBegin(A7_FIELD_DESC);
        oprot.writeDouble(struct.a7);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A8_FIELD_DESC);
      oprot.writeDouble(struct.a8);
      oprot.writeFieldEnd();
      if (struct.isSetA9()) {
        oprot.writeFieldBegin(A9_FIELD_DESC);
        oprot.writeDouble(struct.a9);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A10_FIELD_DESC);
      oprot.writeDouble(struct.a10);
      oprot.writeFieldEnd();
      if (struct.isSetA11()) {
        oprot.writeFieldBegin(A11_FIELD_DESC);
        oprot.writeDouble(struct.a11);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A12_FIELD_DESC);
      oprot.writeDouble(struct.a12);
      oprot.writeFieldEnd();
      if (struct.isSetA13()) {
        oprot.writeFieldBegin(A13_FIELD_DESC);
        oprot.writeDouble(struct.a13);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A14_FIELD_DESC);
      oprot.writeDouble(struct.a14);
      oprot.writeFieldEnd();
      if (struct.isSetA15()) {
        oprot.writeFieldBegin(A15_FIELD_DESC);
        oprot.writeDouble(struct.a15);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A16_FIELD_DESC);
      oprot.writeDouble(struct.a16);
      oprot.writeFieldEnd();
      if (struct.isSetA17()) {
        oprot.writeFieldBegin(A17_FIELD_DESC);
        oprot.writeDouble(struct.a17);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A18_FIELD_DESC);
      oprot.writeDouble(struct.a18);
      oprot.writeFieldEnd();
      if (struct.isSetA19()) {
        oprot.writeFieldBegin(A19_FIELD_DESC);
        oprot.writeDouble(struct.a19);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A20_FIELD_DESC);
      oprot.writeDouble(struct.a20);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ManyFieldsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ManyFieldsTupleScheme getScheme() {
      return new ManyFieldsTupleScheme();
    }
  }

  private static class ManyFieldsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ManyFields> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ManyFields struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeDouble(struct.a2);
      oprot.writeDouble(struct.a4);
      oprot.writeDouble(struct.a6);
      oprot.writeDouble(struct.a8);
      oprot.writeDouble(struct.a10);
      oprot.writeDouble(struct.a12);
      oprot.writeDouble(struct.a14);
      oprot.writeDouble(struct.a16);
      oprot.writeDouble(struct.a18);
      oprot.writeDouble(struct.a20);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetA1()) {
        optionals.set(0);
      }
      if (struct.isSetA3()) {
        optionals.set(1);
      }
      if (struct.isSetA5()) {
        optionals.set(2);
      }
      if (struct.isSetA7()) {
        optionals.set(3);
      }
      if (struct.isSetA9()) {
        optionals.set(4);
      }
      if (struct.isSetA11()) {
        optionals.set(5);
      }
      if (struct.isSetA13()) {
        optionals.set(6);
      }
      if (struct.isSetA15()) {
        optionals.set(7);
      }
      if (struct.isSetA17()) {
        optionals.set(8);
      }
      if (struct.isSetA19()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetA1()) {
        oprot.writeDouble(struct.a1);
      }
      if (struct.isSetA3()) {
        oprot.writeDouble(struct.a3);
      }
      if (struct.isSetA5()) {
        oprot.writeDouble(struct.a5);
      }
      if (struct.isSetA7()) {
        oprot.writeDouble(struct.a7);
      }
      if (struct.isSetA9()) {
        oprot.writeDouble(struct.a9);
      }
      if (struct.isSetA11()) {
        oprot.writeDouble(struct.a11);
      }
      if (struct.isSetA13()) {
        oprot.writeDouble(struct.a13);
      }
      if (struct.isSetA15()) {
        oprot.writeDouble(struct.a15);
      }
      if (struct.isSetA17()) {
        oprot.writeDouble(struct.a17);
      }
      if (struct.isSetA19()) {
        oprot.writeDouble(struct.a19);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ManyFields struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.a2 = iprot.readDouble();
      struct.setA2IsSet(true);
      struct.a4 = iprot.readDouble();
      struct.setA4IsSet(true);
      struct.a6 = iprot.readDouble();
      struct.setA6IsSet(true);
      struct.a8 = iprot.readDouble();
      struct.setA8IsSet(true);
      struct.a10 = iprot.readDouble();
      struct.setA10IsSet(true);
      struct.a12 = iprot.readDouble();
      struct.setA12IsSet(true);
      struct.a14 = iprot.readDouble();
      struct.setA14IsSet(true);
      struct.a16 = iprot.readDouble();
      struct.setA16IsSet(true);
      struct.a18 = iprot.readDouble();
      struct.setA18IsSet(true);
      struct.a20 = iprot.readDouble();
      struct.setA20IsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.a1 = iprot.readDouble();
        struct.setA1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.a3 = iprot.readDouble();
        struct.setA3IsSet(true);
      }
      if (incoming.get(2)) {
        struct.a5 = iprot.readDouble();
        struct.setA5IsSet(true);
      }
      if (incoming.get(3)) {
        struct.a7 = iprot.readDouble();
        struct.setA7IsSet(true);
      }
      if (incoming.get(4)) {
        struct.a9 = iprot.readDouble();
        struct.setA9IsSet(true);
      }
      if (incoming.get(5)) {
        struct.a11 = iprot.readDouble();
        struct.setA11IsSet(true);
      }
      if (incoming.get(6)) {
        struct.a13 = iprot.readDouble();
        struct.setA13IsSet(true);
      }
      if (incoming.get(7)) {
        struct.a15 = iprot.readDouble();
        struct.setA15IsSet(true);
      }
      if (incoming.get(8)) {
        struct.a17 = iprot.readDouble();
        struct.setA17IsSet(true);
      }
      if (incoming.get(9)) {
        struct.a19 = iprot.readDouble();
        struct.setA19IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

