/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-06")
public class Point implements org.apache.thrift.TBase<Point, Point._Fields>, java.io.Serializable, Cloneable, Comparable<Point> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Point");

  private static final org.apache.thrift.protocol.TField XX_FIELD_DESC = new org.apache.thrift.protocol.TField("xx", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField YY_FIELD_DESC = new org.apache.thrift.protocol.TField("yy", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField ZZ_FIELD_DESC = new org.apache.thrift.protocol.TField("zz", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField AA_FIELD_DESC = new org.apache.thrift.protocol.TField("aa", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField BB_FIELD_DESC = new org.apache.thrift.protocol.TField("bb", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField CC_FIELD_DESC = new org.apache.thrift.protocol.TField("cc", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PointStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PointTupleSchemeFactory();

  public double xx; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> yy; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> zz; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.nio.ByteBuffer> aa; // required
  public boolean bb; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String cc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    XX((short)1, "xx"),
    YY((short)2, "yy"),
    ZZ((short)3, "zz"),
    AA((short)4, "aa"),
    BB((short)5, "bb"),
    CC((short)6, "cc");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // XX
          return XX;
        case 2: // YY
          return YY;
        case 3: // ZZ
          return ZZ;
        case 4: // AA
          return AA;
        case 5: // BB
          return BB;
        case 6: // CC
          return CC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __XX_ISSET_ID = 0;
  private static final int __BB_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.YY,_Fields.ZZ,_Fields.BB,_Fields.CC};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.XX, new org.apache.thrift.meta_data.FieldMetaData("xx", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YY, new org.apache.thrift.meta_data.FieldMetaData("yy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ZZ, new org.apache.thrift.meta_data.FieldMetaData("zz", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.AA, new org.apache.thrift.meta_data.FieldMetaData("aa", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.BB, new org.apache.thrift.meta_data.FieldMetaData("bb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CC, new org.apache.thrift.meta_data.FieldMetaData("cc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Point.class, metaDataMap);
  }

  public Point() {
  }

  public Point(
    double xx,
    java.util.Set<java.nio.ByteBuffer> aa)
  {
    this();
    this.xx = xx;
    setXxIsSet(true);
    this.aa = aa;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Point(Point other) {
    __isset_bitfield = other.__isset_bitfield;
    this.xx = other.xx;
    if (other.isSetYy()) {
      java.util.Map<java.lang.String,java.lang.Integer> __this__yy = new java.util.HashMap<java.lang.String,java.lang.Integer>(other.yy);
      this.yy = __this__yy;
    }
    if (other.isSetZz()) {
      java.util.List<java.lang.Long> __this__zz = new java.util.ArrayList<java.lang.Long>(other.zz);
      this.zz = __this__zz;
    }
    if (other.isSetAa()) {
      java.util.Set<java.nio.ByteBuffer> __this__aa = new java.util.HashSet<java.nio.ByteBuffer>(other.aa);
      this.aa = __this__aa;
    }
    this.bb = other.bb;
    if (other.isSetCc()) {
      this.cc = other.cc;
    }
  }

  @Override
  public Point deepCopy() {
    return new Point(this);
  }

  @Override
  public void clear() {
    setXxIsSet(false);
    this.xx = 0.0;
    this.yy = null;
    this.zz = null;
    this.aa = null;
    setBbIsSet(false);
    this.bb = false;
    this.cc = null;
  }

  public double getXx() {
    return this.xx;
  }

  public Point setXx(double xx) {
    this.xx = xx;
    setXxIsSet(true);
    return this;
  }

  public void unsetXx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __XX_ISSET_ID);
  }

  /** Returns true if field xx is set (has been assigned a value) and false otherwise */
  public boolean isSetXx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __XX_ISSET_ID);
  }

  public void setXxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __XX_ISSET_ID, value);
  }

  public int getYySize() {
    return (this.yy == null) ? 0 : this.yy.size();
  }

  public void putToYy(java.lang.String key, int val) {
    if (this.yy == null) {
      this.yy = new java.util.HashMap<java.lang.String,java.lang.Integer>();
    }
    this.yy.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.Integer> getYy() {
    return this.yy;
  }

  public Point setYy(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> yy) {
    this.yy = yy;
    return this;
  }

  public void unsetYy() {
    this.yy = null;
  }

  /** Returns true if field yy is set (has been assigned a value) and false otherwise */
  public boolean isSetYy() {
    return this.yy != null;
  }

  public void setYyIsSet(boolean value) {
    if (!value) {
      this.yy = null;
    }
  }

  public int getZzSize() {
    return (this.zz == null) ? 0 : this.zz.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getZzIterator() {
    return (this.zz == null) ? null : this.zz.iterator();
  }

  public void addToZz(long elem) {
    if (this.zz == null) {
      this.zz = new java.util.ArrayList<java.lang.Long>();
    }
    this.zz.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getZz() {
    return this.zz;
  }

  public Point setZz(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> zz) {
    this.zz = zz;
    return this;
  }

  public void unsetZz() {
    this.zz = null;
  }

  /** Returns true if field zz is set (has been assigned a value) and false otherwise */
  public boolean isSetZz() {
    return this.zz != null;
  }

  public void setZzIsSet(boolean value) {
    if (!value) {
      this.zz = null;
    }
  }

  public int getAaSize() {
    return (this.aa == null) ? 0 : this.aa.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getAaIterator() {
    return (this.aa == null) ? null : this.aa.iterator();
  }

  public void addToAa(java.nio.ByteBuffer elem) {
    if (this.aa == null) {
      this.aa = new java.util.HashSet<java.nio.ByteBuffer>();
    }
    this.aa.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.nio.ByteBuffer> getAa() {
    return this.aa;
  }

  public Point setAa(@org.apache.thrift.annotation.Nullable java.util.Set<java.nio.ByteBuffer> aa) {
    this.aa = aa;
    return this;
  }

  public void unsetAa() {
    this.aa = null;
  }

  /** Returns true if field aa is set (has been assigned a value) and false otherwise */
  public boolean isSetAa() {
    return this.aa != null;
  }

  public void setAaIsSet(boolean value) {
    if (!value) {
      this.aa = null;
    }
  }

  public boolean isBb() {
    return this.bb;
  }

  public Point setBb(boolean bb) {
    this.bb = bb;
    setBbIsSet(true);
    return this;
  }

  public void unsetBb() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BB_ISSET_ID);
  }

  /** Returns true if field bb is set (has been assigned a value) and false otherwise */
  public boolean isSetBb() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BB_ISSET_ID);
  }

  public void setBbIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BB_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCc() {
    return this.cc;
  }

  public Point setCc(@org.apache.thrift.annotation.Nullable java.lang.String cc) {
    this.cc = cc;
    return this;
  }

  public void unsetCc() {
    this.cc = null;
  }

  /** Returns true if field cc is set (has been assigned a value) and false otherwise */
  public boolean isSetCc() {
    return this.cc != null;
  }

  public void setCcIsSet(boolean value) {
    if (!value) {
      this.cc = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case XX:
      if (value == null) {
        unsetXx();
      } else {
        setXx((java.lang.Double)value);
      }
      break;

    case YY:
      if (value == null) {
        unsetYy();
      } else {
        setYy((java.util.Map<java.lang.String,java.lang.Integer>)value);
      }
      break;

    case ZZ:
      if (value == null) {
        unsetZz();
      } else {
        setZz((java.util.List<java.lang.Long>)value);
      }
      break;

    case AA:
      if (value == null) {
        unsetAa();
      } else {
        setAa((java.util.Set<java.nio.ByteBuffer>)value);
      }
      break;

    case BB:
      if (value == null) {
        unsetBb();
      } else {
        setBb((java.lang.Boolean)value);
      }
      break;

    case CC:
      if (value == null) {
        unsetCc();
      } else {
        setCc((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case XX:
      return getXx();

    case YY:
      return getYy();

    case ZZ:
      return getZz();

    case AA:
      return getAa();

    case BB:
      return isBb();

    case CC:
      return getCc();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case XX:
      return isSetXx();
    case YY:
      return isSetYy();
    case ZZ:
      return isSetZz();
    case AA:
      return isSetAa();
    case BB:
      return isSetBb();
    case CC:
      return isSetCc();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Point)
      return this.equals((Point)that);
    return false;
  }

  public boolean equals(Point that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_xx = true;
    boolean that_present_xx = true;
    if (this_present_xx || that_present_xx) {
      if (!(this_present_xx && that_present_xx))
        return false;
      if (this.xx != that.xx)
        return false;
    }

    boolean this_present_yy = true && this.isSetYy();
    boolean that_present_yy = true && that.isSetYy();
    if (this_present_yy || that_present_yy) {
      if (!(this_present_yy && that_present_yy))
        return false;
      if (!this.yy.equals(that.yy))
        return false;
    }

    boolean this_present_zz = true && this.isSetZz();
    boolean that_present_zz = true && that.isSetZz();
    if (this_present_zz || that_present_zz) {
      if (!(this_present_zz && that_present_zz))
        return false;
      if (!this.zz.equals(that.zz))
        return false;
    }

    boolean this_present_aa = true && this.isSetAa();
    boolean that_present_aa = true && that.isSetAa();
    if (this_present_aa || that_present_aa) {
      if (!(this_present_aa && that_present_aa))
        return false;
      if (!this.aa.equals(that.aa))
        return false;
    }

    boolean this_present_bb = true && this.isSetBb();
    boolean that_present_bb = true && that.isSetBb();
    if (this_present_bb || that_present_bb) {
      if (!(this_present_bb && that_present_bb))
        return false;
      if (this.bb != that.bb)
        return false;
    }

    boolean this_present_cc = true && this.isSetCc();
    boolean that_present_cc = true && that.isSetCc();
    if (this_present_cc || that_present_cc) {
      if (!(this_present_cc && that_present_cc))
        return false;
      if (!this.cc.equals(that.cc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(xx);

    hashCode = hashCode * 8191 + ((isSetYy()) ? 131071 : 524287);
    if (isSetYy())
      hashCode = hashCode * 8191 + yy.hashCode();

    hashCode = hashCode * 8191 + ((isSetZz()) ? 131071 : 524287);
    if (isSetZz())
      hashCode = hashCode * 8191 + zz.hashCode();

    hashCode = hashCode * 8191 + ((isSetAa()) ? 131071 : 524287);
    if (isSetAa())
      hashCode = hashCode * 8191 + aa.hashCode();

    hashCode = hashCode * 8191 + ((isSetBb()) ? 131071 : 524287);
    if (isSetBb())
      hashCode = hashCode * 8191 + ((bb) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCc()) ? 131071 : 524287);
    if (isSetCc())
      hashCode = hashCode * 8191 + cc.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Point other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetXx(), other.isSetXx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xx, other.xx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetYy(), other.isSetYy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yy, other.yy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetZz(), other.isSetZz());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZz()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zz, other.zz);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAa(), other.isSetAa());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAa()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aa, other.aa);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBb(), other.isSetBb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bb, other.bb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCc(), other.isSetCc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cc, other.cc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Point(");
    boolean first = true;

    sb.append("xx:");
    sb.append(this.xx);
    first = false;
    if (isSetYy()) {
      if (!first) sb.append(", ");
      sb.append("yy:");
      if (this.yy == null) {
        sb.append("null");
      } else {
        sb.append(this.yy);
      }
      first = false;
    }
    if (isSetZz()) {
      if (!first) sb.append(", ");
      sb.append("zz:");
      if (this.zz == null) {
        sb.append("null");
      } else {
        sb.append(this.zz);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("aa:");
    if (this.aa == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.aa, sb);
    }
    first = false;
    if (isSetBb()) {
      if (!first) sb.append(", ");
      sb.append("bb:");
      sb.append(this.bb);
      first = false;
    }
    if (isSetCc()) {
      if (!first) sb.append(", ");
      sb.append("cc:");
      if (this.cc == null) {
        sb.append("null");
      } else {
        sb.append(this.cc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'xx' because it's a primitive and you chose the non-beans generator.
    if (aa == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'aa' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PointStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PointStandardScheme getScheme() {
      return new PointStandardScheme();
    }
  }

  private static class PointStandardScheme extends org.apache.thrift.scheme.StandardScheme<Point> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Point struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // XX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.xx = iprot.readDouble();
              struct.setXxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // YY
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.yy = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                int _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readI32();
                  struct.yy.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setYyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ZZ
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
                struct.zz = new java.util.ArrayList<java.lang.Long>(_list4.size);
                long _elem5;
                for (int _i6 = 0; _i6 < _list4.size; ++_i6)
                {
                  _elem5 = iprot.readI64();
                  struct.zz.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setZzIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AA
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set7 = iprot.readSetBegin();
                struct.aa = new java.util.HashSet<java.nio.ByteBuffer>(2*_set7.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem8;
                for (int _i9 = 0; _i9 < _set7.size; ++_i9)
                {
                  _elem8 = iprot.readBinary();
                  struct.aa.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setAaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BB
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bb = iprot.readBool();
              struct.setBbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cc = iprot.readString();
              struct.setCcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetXx()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'xx' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Point struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(XX_FIELD_DESC);
      oprot.writeDouble(struct.xx);
      oprot.writeFieldEnd();
      if (struct.yy != null) {
        if (struct.isSetYy()) {
          oprot.writeFieldBegin(YY_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.yy.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter10 : struct.yy.entrySet())
            {
              oprot.writeString(_iter10.getKey());
              oprot.writeI32(_iter10.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.zz != null) {
        if (struct.isSetZz()) {
          oprot.writeFieldBegin(ZZ_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.zz.size()));
            for (long _iter11 : struct.zz)
            {
              oprot.writeI64(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.aa != null) {
        oprot.writeFieldBegin(AA_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.aa.size()));
          for (java.nio.ByteBuffer _iter12 : struct.aa)
          {
            oprot.writeBinary(_iter12);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetBb()) {
        oprot.writeFieldBegin(BB_FIELD_DESC);
        oprot.writeBool(struct.bb);
        oprot.writeFieldEnd();
      }
      if (struct.cc != null) {
        if (struct.isSetCc()) {
          oprot.writeFieldBegin(CC_FIELD_DESC);
          oprot.writeString(struct.cc);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PointTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public PointTupleScheme getScheme() {
      return new PointTupleScheme();
    }
  }

  private static class PointTupleScheme extends org.apache.thrift.scheme.TupleScheme<Point> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Point struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeDouble(struct.xx);
      {
        oprot.writeI32(struct.aa.size());
        for (java.nio.ByteBuffer _iter13 : struct.aa)
        {
          oprot.writeBinary(_iter13);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetYy()) {
        optionals.set(0);
      }
      if (struct.isSetZz()) {
        optionals.set(1);
      }
      if (struct.isSetBb()) {
        optionals.set(2);
      }
      if (struct.isSetCc()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetYy()) {
        {
          oprot.writeI32(struct.yy.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter14 : struct.yy.entrySet())
          {
            oprot.writeString(_iter14.getKey());
            oprot.writeI32(_iter14.getValue());
          }
        }
      }
      if (struct.isSetZz()) {
        {
          oprot.writeI32(struct.zz.size());
          for (long _iter15 : struct.zz)
          {
            oprot.writeI64(_iter15);
          }
        }
      }
      if (struct.isSetBb()) {
        oprot.writeBool(struct.bb);
      }
      if (struct.isSetCc()) {
        oprot.writeString(struct.cc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Point struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.xx = iprot.readDouble();
      struct.setXxIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set16 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRING);
        struct.aa = new java.util.HashSet<java.nio.ByteBuffer>(2*_set16.size);
        @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem17;
        for (int _i18 = 0; _i18 < _set16.size; ++_i18)
        {
          _elem17 = iprot.readBinary();
          struct.aa.add(_elem17);
        }
      }
      struct.setAaIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32); 
          struct.yy = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map19.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key20;
          int _val21;
          for (int _i22 = 0; _i22 < _map19.size; ++_i22)
          {
            _key20 = iprot.readString();
            _val21 = iprot.readI32();
            struct.yy.put(_key20, _val21);
          }
        }
        struct.setYyIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list23 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.zz = new java.util.ArrayList<java.lang.Long>(_list23.size);
          long _elem24;
          for (int _i25 = 0; _i25 < _list23.size; ++_i25)
          {
            _elem24 = iprot.readI64();
            struct.zz.add(_elem24);
          }
        }
        struct.setZzIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bb = iprot.readBool();
        struct.setBbIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cc = iprot.readString();
        struct.setCcIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

