/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-06")
public class ManyFields2 implements org.apache.thrift.TBase<ManyFields2, ManyFields2._Fields>, java.io.Serializable, Cloneable, Comparable<ManyFields2> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ManyFields2");

  private static final org.apache.thrift.protocol.TField A1_FIELD_DESC = new org.apache.thrift.protocol.TField("a1", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField A2_FIELD_DESC = new org.apache.thrift.protocol.TField("a2", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField A3_FIELD_DESC = new org.apache.thrift.protocol.TField("a3", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField A4_FIELD_DESC = new org.apache.thrift.protocol.TField("a4", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField A5_FIELD_DESC = new org.apache.thrift.protocol.TField("a5", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField A6_FIELD_DESC = new org.apache.thrift.protocol.TField("a6", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField A7_FIELD_DESC = new org.apache.thrift.protocol.TField("a7", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField A8_FIELD_DESC = new org.apache.thrift.protocol.TField("a8", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField A9_FIELD_DESC = new org.apache.thrift.protocol.TField("a9", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField A10_FIELD_DESC = new org.apache.thrift.protocol.TField("a10", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField A11_FIELD_DESC = new org.apache.thrift.protocol.TField("a11", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField A12_FIELD_DESC = new org.apache.thrift.protocol.TField("a12", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField A13_FIELD_DESC = new org.apache.thrift.protocol.TField("a13", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField A14_FIELD_DESC = new org.apache.thrift.protocol.TField("a14", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField A15_FIELD_DESC = new org.apache.thrift.protocol.TField("a15", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField A16_FIELD_DESC = new org.apache.thrift.protocol.TField("a16", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField A17_FIELD_DESC = new org.apache.thrift.protocol.TField("a17", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField A18_FIELD_DESC = new org.apache.thrift.protocol.TField("a18", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField A19_FIELD_DESC = new org.apache.thrift.protocol.TField("a19", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField A20_FIELD_DESC = new org.apache.thrift.protocol.TField("a20", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField A21_FIELD_DESC = new org.apache.thrift.protocol.TField("a21", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField A22_FIELD_DESC = new org.apache.thrift.protocol.TField("a22", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField A23_FIELD_DESC = new org.apache.thrift.protocol.TField("a23", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField A24_FIELD_DESC = new org.apache.thrift.protocol.TField("a24", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField A25_FIELD_DESC = new org.apache.thrift.protocol.TField("a25", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField A26_FIELD_DESC = new org.apache.thrift.protocol.TField("a26", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField A27_FIELD_DESC = new org.apache.thrift.protocol.TField("a27", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField A28_FIELD_DESC = new org.apache.thrift.protocol.TField("a28", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField A29_FIELD_DESC = new org.apache.thrift.protocol.TField("a29", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField A30_FIELD_DESC = new org.apache.thrift.protocol.TField("a30", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField A31_FIELD_DESC = new org.apache.thrift.protocol.TField("a31", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField A32_FIELD_DESC = new org.apache.thrift.protocol.TField("a32", org.apache.thrift.protocol.TType.DOUBLE, (short)32);
  private static final org.apache.thrift.protocol.TField A33_FIELD_DESC = new org.apache.thrift.protocol.TField("a33", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField A34_FIELD_DESC = new org.apache.thrift.protocol.TField("a34", org.apache.thrift.protocol.TType.DOUBLE, (short)34);
  private static final org.apache.thrift.protocol.TField A35_FIELD_DESC = new org.apache.thrift.protocol.TField("a35", org.apache.thrift.protocol.TType.DOUBLE, (short)35);
  private static final org.apache.thrift.protocol.TField A36_FIELD_DESC = new org.apache.thrift.protocol.TField("a36", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField A37_FIELD_DESC = new org.apache.thrift.protocol.TField("a37", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField A38_FIELD_DESC = new org.apache.thrift.protocol.TField("a38", org.apache.thrift.protocol.TType.DOUBLE, (short)38);
  private static final org.apache.thrift.protocol.TField A39_FIELD_DESC = new org.apache.thrift.protocol.TField("a39", org.apache.thrift.protocol.TType.DOUBLE, (short)39);
  private static final org.apache.thrift.protocol.TField A40_FIELD_DESC = new org.apache.thrift.protocol.TField("a40", org.apache.thrift.protocol.TType.DOUBLE, (short)40);
  private static final org.apache.thrift.protocol.TField A41_FIELD_DESC = new org.apache.thrift.protocol.TField("a41", org.apache.thrift.protocol.TType.DOUBLE, (short)41);
  private static final org.apache.thrift.protocol.TField A42_FIELD_DESC = new org.apache.thrift.protocol.TField("a42", org.apache.thrift.protocol.TType.DOUBLE, (short)42);
  private static final org.apache.thrift.protocol.TField A43_FIELD_DESC = new org.apache.thrift.protocol.TField("a43", org.apache.thrift.protocol.TType.DOUBLE, (short)43);
  private static final org.apache.thrift.protocol.TField A44_FIELD_DESC = new org.apache.thrift.protocol.TField("a44", org.apache.thrift.protocol.TType.DOUBLE, (short)44);
  private static final org.apache.thrift.protocol.TField A45_FIELD_DESC = new org.apache.thrift.protocol.TField("a45", org.apache.thrift.protocol.TType.DOUBLE, (short)45);
  private static final org.apache.thrift.protocol.TField A46_FIELD_DESC = new org.apache.thrift.protocol.TField("a46", org.apache.thrift.protocol.TType.DOUBLE, (short)46);
  private static final org.apache.thrift.protocol.TField A47_FIELD_DESC = new org.apache.thrift.protocol.TField("a47", org.apache.thrift.protocol.TType.DOUBLE, (short)47);
  private static final org.apache.thrift.protocol.TField A48_FIELD_DESC = new org.apache.thrift.protocol.TField("a48", org.apache.thrift.protocol.TType.DOUBLE, (short)48);
  private static final org.apache.thrift.protocol.TField A49_FIELD_DESC = new org.apache.thrift.protocol.TField("a49", org.apache.thrift.protocol.TType.DOUBLE, (short)49);
  private static final org.apache.thrift.protocol.TField A50_FIELD_DESC = new org.apache.thrift.protocol.TField("a50", org.apache.thrift.protocol.TType.DOUBLE, (short)50);
  private static final org.apache.thrift.protocol.TField A51_FIELD_DESC = new org.apache.thrift.protocol.TField("a51", org.apache.thrift.protocol.TType.DOUBLE, (short)51);
  private static final org.apache.thrift.protocol.TField A52_FIELD_DESC = new org.apache.thrift.protocol.TField("a52", org.apache.thrift.protocol.TType.DOUBLE, (short)52);
  private static final org.apache.thrift.protocol.TField A53_FIELD_DESC = new org.apache.thrift.protocol.TField("a53", org.apache.thrift.protocol.TType.DOUBLE, (short)53);
  private static final org.apache.thrift.protocol.TField A54_FIELD_DESC = new org.apache.thrift.protocol.TField("a54", org.apache.thrift.protocol.TType.DOUBLE, (short)54);
  private static final org.apache.thrift.protocol.TField A55_FIELD_DESC = new org.apache.thrift.protocol.TField("a55", org.apache.thrift.protocol.TType.DOUBLE, (short)55);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ManyFields2StandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ManyFields2TupleSchemeFactory();

  public double a1; // optional
  public double a2; // required
  public double a3; // optional
  public double a4; // required
  public double a5; // optional
  public double a6; // required
  public double a7; // optional
  public double a8; // required
  public double a9; // optional
  public double a10; // required
  public double a11; // optional
  public double a12; // required
  public double a13; // optional
  public double a14; // required
  public double a15; // optional
  public double a16; // required
  public double a17; // optional
  public double a18; // required
  public double a19; // optional
  public double a20; // required
  public double a21; // optional
  public double a22; // required
  public double a23; // optional
  public double a24; // required
  public double a25; // optional
  public double a26; // required
  public double a27; // optional
  public double a28; // required
  public double a29; // optional
  public double a30; // required
  public double a31; // optional
  public double a32; // required
  public double a33; // optional
  public double a34; // required
  public double a35; // optional
  public double a36; // required
  public double a37; // optional
  public double a38; // required
  public double a39; // optional
  public double a40; // required
  public double a41; // optional
  public double a42; // required
  public double a43; // optional
  public double a44; // required
  public double a45; // optional
  public double a46; // required
  public double a47; // optional
  public double a48; // required
  public double a49; // optional
  public double a50; // required
  public double a51; // optional
  public double a52; // required
  public double a53; // optional
  public double a54; // required
  public double a55; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    A1((short)1, "a1"),
    A2((short)2, "a2"),
    A3((short)3, "a3"),
    A4((short)4, "a4"),
    A5((short)5, "a5"),
    A6((short)6, "a6"),
    A7((short)7, "a7"),
    A8((short)8, "a8"),
    A9((short)9, "a9"),
    A10((short)10, "a10"),
    A11((short)11, "a11"),
    A12((short)12, "a12"),
    A13((short)13, "a13"),
    A14((short)14, "a14"),
    A15((short)15, "a15"),
    A16((short)16, "a16"),
    A17((short)17, "a17"),
    A18((short)18, "a18"),
    A19((short)19, "a19"),
    A20((short)20, "a20"),
    A21((short)21, "a21"),
    A22((short)22, "a22"),
    A23((short)23, "a23"),
    A24((short)24, "a24"),
    A25((short)25, "a25"),
    A26((short)26, "a26"),
    A27((short)27, "a27"),
    A28((short)28, "a28"),
    A29((short)29, "a29"),
    A30((short)30, "a30"),
    A31((short)31, "a31"),
    A32((short)32, "a32"),
    A33((short)33, "a33"),
    A34((short)34, "a34"),
    A35((short)35, "a35"),
    A36((short)36, "a36"),
    A37((short)37, "a37"),
    A38((short)38, "a38"),
    A39((short)39, "a39"),
    A40((short)40, "a40"),
    A41((short)41, "a41"),
    A42((short)42, "a42"),
    A43((short)43, "a43"),
    A44((short)44, "a44"),
    A45((short)45, "a45"),
    A46((short)46, "a46"),
    A47((short)47, "a47"),
    A48((short)48, "a48"),
    A49((short)49, "a49"),
    A50((short)50, "a50"),
    A51((short)51, "a51"),
    A52((short)52, "a52"),
    A53((short)53, "a53"),
    A54((short)54, "a54"),
    A55((short)55, "a55");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // A1
          return A1;
        case 2: // A2
          return A2;
        case 3: // A3
          return A3;
        case 4: // A4
          return A4;
        case 5: // A5
          return A5;
        case 6: // A6
          return A6;
        case 7: // A7
          return A7;
        case 8: // A8
          return A8;
        case 9: // A9
          return A9;
        case 10: // A10
          return A10;
        case 11: // A11
          return A11;
        case 12: // A12
          return A12;
        case 13: // A13
          return A13;
        case 14: // A14
          return A14;
        case 15: // A15
          return A15;
        case 16: // A16
          return A16;
        case 17: // A17
          return A17;
        case 18: // A18
          return A18;
        case 19: // A19
          return A19;
        case 20: // A20
          return A20;
        case 21: // A21
          return A21;
        case 22: // A22
          return A22;
        case 23: // A23
          return A23;
        case 24: // A24
          return A24;
        case 25: // A25
          return A25;
        case 26: // A26
          return A26;
        case 27: // A27
          return A27;
        case 28: // A28
          return A28;
        case 29: // A29
          return A29;
        case 30: // A30
          return A30;
        case 31: // A31
          return A31;
        case 32: // A32
          return A32;
        case 33: // A33
          return A33;
        case 34: // A34
          return A34;
        case 35: // A35
          return A35;
        case 36: // A36
          return A36;
        case 37: // A37
          return A37;
        case 38: // A38
          return A38;
        case 39: // A39
          return A39;
        case 40: // A40
          return A40;
        case 41: // A41
          return A41;
        case 42: // A42
          return A42;
        case 43: // A43
          return A43;
        case 44: // A44
          return A44;
        case 45: // A45
          return A45;
        case 46: // A46
          return A46;
        case 47: // A47
          return A47;
        case 48: // A48
          return A48;
        case 49: // A49
          return A49;
        case 50: // A50
          return A50;
        case 51: // A51
          return A51;
        case 52: // A52
          return A52;
        case 53: // A53
          return A53;
        case 54: // A54
          return A54;
        case 55: // A55
          return A55;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __A1_ISSET_ID = 0;
  private static final int __A2_ISSET_ID = 1;
  private static final int __A3_ISSET_ID = 2;
  private static final int __A4_ISSET_ID = 3;
  private static final int __A5_ISSET_ID = 4;
  private static final int __A6_ISSET_ID = 5;
  private static final int __A7_ISSET_ID = 6;
  private static final int __A8_ISSET_ID = 7;
  private static final int __A9_ISSET_ID = 8;
  private static final int __A10_ISSET_ID = 9;
  private static final int __A11_ISSET_ID = 10;
  private static final int __A12_ISSET_ID = 11;
  private static final int __A13_ISSET_ID = 12;
  private static final int __A14_ISSET_ID = 13;
  private static final int __A15_ISSET_ID = 14;
  private static final int __A16_ISSET_ID = 15;
  private static final int __A17_ISSET_ID = 16;
  private static final int __A18_ISSET_ID = 17;
  private static final int __A19_ISSET_ID = 18;
  private static final int __A20_ISSET_ID = 19;
  private static final int __A21_ISSET_ID = 20;
  private static final int __A22_ISSET_ID = 21;
  private static final int __A23_ISSET_ID = 22;
  private static final int __A24_ISSET_ID = 23;
  private static final int __A25_ISSET_ID = 24;
  private static final int __A26_ISSET_ID = 25;
  private static final int __A27_ISSET_ID = 26;
  private static final int __A28_ISSET_ID = 27;
  private static final int __A29_ISSET_ID = 28;
  private static final int __A30_ISSET_ID = 29;
  private static final int __A31_ISSET_ID = 30;
  private static final int __A32_ISSET_ID = 31;
  private static final int __A33_ISSET_ID = 32;
  private static final int __A34_ISSET_ID = 33;
  private static final int __A35_ISSET_ID = 34;
  private static final int __A36_ISSET_ID = 35;
  private static final int __A37_ISSET_ID = 36;
  private static final int __A38_ISSET_ID = 37;
  private static final int __A39_ISSET_ID = 38;
  private static final int __A40_ISSET_ID = 39;
  private static final int __A41_ISSET_ID = 40;
  private static final int __A42_ISSET_ID = 41;
  private static final int __A43_ISSET_ID = 42;
  private static final int __A44_ISSET_ID = 43;
  private static final int __A45_ISSET_ID = 44;
  private static final int __A46_ISSET_ID = 45;
  private static final int __A47_ISSET_ID = 46;
  private static final int __A48_ISSET_ID = 47;
  private static final int __A49_ISSET_ID = 48;
  private static final int __A50_ISSET_ID = 49;
  private static final int __A51_ISSET_ID = 50;
  private static final int __A52_ISSET_ID = 51;
  private static final int __A53_ISSET_ID = 52;
  private static final int __A54_ISSET_ID = 53;
  private static final int __A55_ISSET_ID = 54;
  private long __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.A1,_Fields.A3,_Fields.A5,_Fields.A7,_Fields.A9,_Fields.A11,_Fields.A13,_Fields.A15,_Fields.A17,_Fields.A19,_Fields.A21,_Fields.A23,_Fields.A25,_Fields.A27,_Fields.A29,_Fields.A31,_Fields.A33,_Fields.A35,_Fields.A37,_Fields.A39,_Fields.A41,_Fields.A43,_Fields.A45,_Fields.A47,_Fields.A49,_Fields.A51,_Fields.A53,_Fields.A55};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.A1, new org.apache.thrift.meta_data.FieldMetaData("a1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A2, new org.apache.thrift.meta_data.FieldMetaData("a2", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A3, new org.apache.thrift.meta_data.FieldMetaData("a3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A4, new org.apache.thrift.meta_data.FieldMetaData("a4", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A5, new org.apache.thrift.meta_data.FieldMetaData("a5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A6, new org.apache.thrift.meta_data.FieldMetaData("a6", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A7, new org.apache.thrift.meta_data.FieldMetaData("a7", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A8, new org.apache.thrift.meta_data.FieldMetaData("a8", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A9, new org.apache.thrift.meta_data.FieldMetaData("a9", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A10, new org.apache.thrift.meta_data.FieldMetaData("a10", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A11, new org.apache.thrift.meta_data.FieldMetaData("a11", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A12, new org.apache.thrift.meta_data.FieldMetaData("a12", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A13, new org.apache.thrift.meta_data.FieldMetaData("a13", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A14, new org.apache.thrift.meta_data.FieldMetaData("a14", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A15, new org.apache.thrift.meta_data.FieldMetaData("a15", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A16, new org.apache.thrift.meta_data.FieldMetaData("a16", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A17, new org.apache.thrift.meta_data.FieldMetaData("a17", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A18, new org.apache.thrift.meta_data.FieldMetaData("a18", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A19, new org.apache.thrift.meta_data.FieldMetaData("a19", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A20, new org.apache.thrift.meta_data.FieldMetaData("a20", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A21, new org.apache.thrift.meta_data.FieldMetaData("a21", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A22, new org.apache.thrift.meta_data.FieldMetaData("a22", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A23, new org.apache.thrift.meta_data.FieldMetaData("a23", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A24, new org.apache.thrift.meta_data.FieldMetaData("a24", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A25, new org.apache.thrift.meta_data.FieldMetaData("a25", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A26, new org.apache.thrift.meta_data.FieldMetaData("a26", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A27, new org.apache.thrift.meta_data.FieldMetaData("a27", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A28, new org.apache.thrift.meta_data.FieldMetaData("a28", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A29, new org.apache.thrift.meta_data.FieldMetaData("a29", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A30, new org.apache.thrift.meta_data.FieldMetaData("a30", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A31, new org.apache.thrift.meta_data.FieldMetaData("a31", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A32, new org.apache.thrift.meta_data.FieldMetaData("a32", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A33, new org.apache.thrift.meta_data.FieldMetaData("a33", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A34, new org.apache.thrift.meta_data.FieldMetaData("a34", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A35, new org.apache.thrift.meta_data.FieldMetaData("a35", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A36, new org.apache.thrift.meta_data.FieldMetaData("a36", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A37, new org.apache.thrift.meta_data.FieldMetaData("a37", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A38, new org.apache.thrift.meta_data.FieldMetaData("a38", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A39, new org.apache.thrift.meta_data.FieldMetaData("a39", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A40, new org.apache.thrift.meta_data.FieldMetaData("a40", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A41, new org.apache.thrift.meta_data.FieldMetaData("a41", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A42, new org.apache.thrift.meta_data.FieldMetaData("a42", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A43, new org.apache.thrift.meta_data.FieldMetaData("a43", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A44, new org.apache.thrift.meta_data.FieldMetaData("a44", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A45, new org.apache.thrift.meta_data.FieldMetaData("a45", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A46, new org.apache.thrift.meta_data.FieldMetaData("a46", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A47, new org.apache.thrift.meta_data.FieldMetaData("a47", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A48, new org.apache.thrift.meta_data.FieldMetaData("a48", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A49, new org.apache.thrift.meta_data.FieldMetaData("a49", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A50, new org.apache.thrift.meta_data.FieldMetaData("a50", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A51, new org.apache.thrift.meta_data.FieldMetaData("a51", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A52, new org.apache.thrift.meta_data.FieldMetaData("a52", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A53, new org.apache.thrift.meta_data.FieldMetaData("a53", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A54, new org.apache.thrift.meta_data.FieldMetaData("a54", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.A55, new org.apache.thrift.meta_data.FieldMetaData("a55", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ManyFields2.class, metaDataMap);
  }

  public ManyFields2() {
  }

  public ManyFields2(
    double a2,
    double a4,
    double a6,
    double a8,
    double a10,
    double a12,
    double a14,
    double a16,
    double a18,
    double a20,
    double a22,
    double a24,
    double a26,
    double a28,
    double a30,
    double a32,
    double a34,
    double a36,
    double a38,
    double a40,
    double a42,
    double a44,
    double a46,
    double a48,
    double a50,
    double a52,
    double a54)
  {
    this();
    this.a2 = a2;
    setA2IsSet(true);
    this.a4 = a4;
    setA4IsSet(true);
    this.a6 = a6;
    setA6IsSet(true);
    this.a8 = a8;
    setA8IsSet(true);
    this.a10 = a10;
    setA10IsSet(true);
    this.a12 = a12;
    setA12IsSet(true);
    this.a14 = a14;
    setA14IsSet(true);
    this.a16 = a16;
    setA16IsSet(true);
    this.a18 = a18;
    setA18IsSet(true);
    this.a20 = a20;
    setA20IsSet(true);
    this.a22 = a22;
    setA22IsSet(true);
    this.a24 = a24;
    setA24IsSet(true);
    this.a26 = a26;
    setA26IsSet(true);
    this.a28 = a28;
    setA28IsSet(true);
    this.a30 = a30;
    setA30IsSet(true);
    this.a32 = a32;
    setA32IsSet(true);
    this.a34 = a34;
    setA34IsSet(true);
    this.a36 = a36;
    setA36IsSet(true);
    this.a38 = a38;
    setA38IsSet(true);
    this.a40 = a40;
    setA40IsSet(true);
    this.a42 = a42;
    setA42IsSet(true);
    this.a44 = a44;
    setA44IsSet(true);
    this.a46 = a46;
    setA46IsSet(true);
    this.a48 = a48;
    setA48IsSet(true);
    this.a50 = a50;
    setA50IsSet(true);
    this.a52 = a52;
    setA52IsSet(true);
    this.a54 = a54;
    setA54IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ManyFields2(ManyFields2 other) {
    __isset_bitfield = other.__isset_bitfield;
    this.a1 = other.a1;
    this.a2 = other.a2;
    this.a3 = other.a3;
    this.a4 = other.a4;
    this.a5 = other.a5;
    this.a6 = other.a6;
    this.a7 = other.a7;
    this.a8 = other.a8;
    this.a9 = other.a9;
    this.a10 = other.a10;
    this.a11 = other.a11;
    this.a12 = other.a12;
    this.a13 = other.a13;
    this.a14 = other.a14;
    this.a15 = other.a15;
    this.a16 = other.a16;
    this.a17 = other.a17;
    this.a18 = other.a18;
    this.a19 = other.a19;
    this.a20 = other.a20;
    this.a21 = other.a21;
    this.a22 = other.a22;
    this.a23 = other.a23;
    this.a24 = other.a24;
    this.a25 = other.a25;
    this.a26 = other.a26;
    this.a27 = other.a27;
    this.a28 = other.a28;
    this.a29 = other.a29;
    this.a30 = other.a30;
    this.a31 = other.a31;
    this.a32 = other.a32;
    this.a33 = other.a33;
    this.a34 = other.a34;
    this.a35 = other.a35;
    this.a36 = other.a36;
    this.a37 = other.a37;
    this.a38 = other.a38;
    this.a39 = other.a39;
    this.a40 = other.a40;
    this.a41 = other.a41;
    this.a42 = other.a42;
    this.a43 = other.a43;
    this.a44 = other.a44;
    this.a45 = other.a45;
    this.a46 = other.a46;
    this.a47 = other.a47;
    this.a48 = other.a48;
    this.a49 = other.a49;
    this.a50 = other.a50;
    this.a51 = other.a51;
    this.a52 = other.a52;
    this.a53 = other.a53;
    this.a54 = other.a54;
    this.a55 = other.a55;
  }

  @Override
  public ManyFields2 deepCopy() {
    return new ManyFields2(this);
  }

  @Override
  public void clear() {
    setA1IsSet(false);
    this.a1 = 0.0;
    setA2IsSet(false);
    this.a2 = 0.0;
    setA3IsSet(false);
    this.a3 = 0.0;
    setA4IsSet(false);
    this.a4 = 0.0;
    setA5IsSet(false);
    this.a5 = 0.0;
    setA6IsSet(false);
    this.a6 = 0.0;
    setA7IsSet(false);
    this.a7 = 0.0;
    setA8IsSet(false);
    this.a8 = 0.0;
    setA9IsSet(false);
    this.a9 = 0.0;
    setA10IsSet(false);
    this.a10 = 0.0;
    setA11IsSet(false);
    this.a11 = 0.0;
    setA12IsSet(false);
    this.a12 = 0.0;
    setA13IsSet(false);
    this.a13 = 0.0;
    setA14IsSet(false);
    this.a14 = 0.0;
    setA15IsSet(false);
    this.a15 = 0.0;
    setA16IsSet(false);
    this.a16 = 0.0;
    setA17IsSet(false);
    this.a17 = 0.0;
    setA18IsSet(false);
    this.a18 = 0.0;
    setA19IsSet(false);
    this.a19 = 0.0;
    setA20IsSet(false);
    this.a20 = 0.0;
    setA21IsSet(false);
    this.a21 = 0.0;
    setA22IsSet(false);
    this.a22 = 0.0;
    setA23IsSet(false);
    this.a23 = 0.0;
    setA24IsSet(false);
    this.a24 = 0.0;
    setA25IsSet(false);
    this.a25 = 0.0;
    setA26IsSet(false);
    this.a26 = 0.0;
    setA27IsSet(false);
    this.a27 = 0.0;
    setA28IsSet(false);
    this.a28 = 0.0;
    setA29IsSet(false);
    this.a29 = 0.0;
    setA30IsSet(false);
    this.a30 = 0.0;
    setA31IsSet(false);
    this.a31 = 0.0;
    setA32IsSet(false);
    this.a32 = 0.0;
    setA33IsSet(false);
    this.a33 = 0.0;
    setA34IsSet(false);
    this.a34 = 0.0;
    setA35IsSet(false);
    this.a35 = 0.0;
    setA36IsSet(false);
    this.a36 = 0.0;
    setA37IsSet(false);
    this.a37 = 0.0;
    setA38IsSet(false);
    this.a38 = 0.0;
    setA39IsSet(false);
    this.a39 = 0.0;
    setA40IsSet(false);
    this.a40 = 0.0;
    setA41IsSet(false);
    this.a41 = 0.0;
    setA42IsSet(false);
    this.a42 = 0.0;
    setA43IsSet(false);
    this.a43 = 0.0;
    setA44IsSet(false);
    this.a44 = 0.0;
    setA45IsSet(false);
    this.a45 = 0.0;
    setA46IsSet(false);
    this.a46 = 0.0;
    setA47IsSet(false);
    this.a47 = 0.0;
    setA48IsSet(false);
    this.a48 = 0.0;
    setA49IsSet(false);
    this.a49 = 0.0;
    setA50IsSet(false);
    this.a50 = 0.0;
    setA51IsSet(false);
    this.a51 = 0.0;
    setA52IsSet(false);
    this.a52 = 0.0;
    setA53IsSet(false);
    this.a53 = 0.0;
    setA54IsSet(false);
    this.a54 = 0.0;
    setA55IsSet(false);
    this.a55 = 0.0;
  }

  public double getA1() {
    return this.a1;
  }

  public ManyFields2 setA1(double a1) {
    this.a1 = a1;
    setA1IsSet(true);
    return this;
  }

  public void unsetA1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A1_ISSET_ID);
  }

  /** Returns true if field a1 is set (has been assigned a value) and false otherwise */
  public boolean isSetA1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A1_ISSET_ID);
  }

  public void setA1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A1_ISSET_ID, value);
  }

  public double getA2() {
    return this.a2;
  }

  public ManyFields2 setA2(double a2) {
    this.a2 = a2;
    setA2IsSet(true);
    return this;
  }

  public void unsetA2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A2_ISSET_ID);
  }

  /** Returns true if field a2 is set (has been assigned a value) and false otherwise */
  public boolean isSetA2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A2_ISSET_ID);
  }

  public void setA2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A2_ISSET_ID, value);
  }

  public double getA3() {
    return this.a3;
  }

  public ManyFields2 setA3(double a3) {
    this.a3 = a3;
    setA3IsSet(true);
    return this;
  }

  public void unsetA3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A3_ISSET_ID);
  }

  /** Returns true if field a3 is set (has been assigned a value) and false otherwise */
  public boolean isSetA3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A3_ISSET_ID);
  }

  public void setA3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A3_ISSET_ID, value);
  }

  public double getA4() {
    return this.a4;
  }

  public ManyFields2 setA4(double a4) {
    this.a4 = a4;
    setA4IsSet(true);
    return this;
  }

  public void unsetA4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A4_ISSET_ID);
  }

  /** Returns true if field a4 is set (has been assigned a value) and false otherwise */
  public boolean isSetA4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A4_ISSET_ID);
  }

  public void setA4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A4_ISSET_ID, value);
  }

  public double getA5() {
    return this.a5;
  }

  public ManyFields2 setA5(double a5) {
    this.a5 = a5;
    setA5IsSet(true);
    return this;
  }

  public void unsetA5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A5_ISSET_ID);
  }

  /** Returns true if field a5 is set (has been assigned a value) and false otherwise */
  public boolean isSetA5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A5_ISSET_ID);
  }

  public void setA5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A5_ISSET_ID, value);
  }

  public double getA6() {
    return this.a6;
  }

  public ManyFields2 setA6(double a6) {
    this.a6 = a6;
    setA6IsSet(true);
    return this;
  }

  public void unsetA6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A6_ISSET_ID);
  }

  /** Returns true if field a6 is set (has been assigned a value) and false otherwise */
  public boolean isSetA6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A6_ISSET_ID);
  }

  public void setA6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A6_ISSET_ID, value);
  }

  public double getA7() {
    return this.a7;
  }

  public ManyFields2 setA7(double a7) {
    this.a7 = a7;
    setA7IsSet(true);
    return this;
  }

  public void unsetA7() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A7_ISSET_ID);
  }

  /** Returns true if field a7 is set (has been assigned a value) and false otherwise */
  public boolean isSetA7() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A7_ISSET_ID);
  }

  public void setA7IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A7_ISSET_ID, value);
  }

  public double getA8() {
    return this.a8;
  }

  public ManyFields2 setA8(double a8) {
    this.a8 = a8;
    setA8IsSet(true);
    return this;
  }

  public void unsetA8() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A8_ISSET_ID);
  }

  /** Returns true if field a8 is set (has been assigned a value) and false otherwise */
  public boolean isSetA8() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A8_ISSET_ID);
  }

  public void setA8IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A8_ISSET_ID, value);
  }

  public double getA9() {
    return this.a9;
  }

  public ManyFields2 setA9(double a9) {
    this.a9 = a9;
    setA9IsSet(true);
    return this;
  }

  public void unsetA9() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A9_ISSET_ID);
  }

  /** Returns true if field a9 is set (has been assigned a value) and false otherwise */
  public boolean isSetA9() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A9_ISSET_ID);
  }

  public void setA9IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A9_ISSET_ID, value);
  }

  public double getA10() {
    return this.a10;
  }

  public ManyFields2 setA10(double a10) {
    this.a10 = a10;
    setA10IsSet(true);
    return this;
  }

  public void unsetA10() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A10_ISSET_ID);
  }

  /** Returns true if field a10 is set (has been assigned a value) and false otherwise */
  public boolean isSetA10() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A10_ISSET_ID);
  }

  public void setA10IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A10_ISSET_ID, value);
  }

  public double getA11() {
    return this.a11;
  }

  public ManyFields2 setA11(double a11) {
    this.a11 = a11;
    setA11IsSet(true);
    return this;
  }

  public void unsetA11() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A11_ISSET_ID);
  }

  /** Returns true if field a11 is set (has been assigned a value) and false otherwise */
  public boolean isSetA11() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A11_ISSET_ID);
  }

  public void setA11IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A11_ISSET_ID, value);
  }

  public double getA12() {
    return this.a12;
  }

  public ManyFields2 setA12(double a12) {
    this.a12 = a12;
    setA12IsSet(true);
    return this;
  }

  public void unsetA12() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A12_ISSET_ID);
  }

  /** Returns true if field a12 is set (has been assigned a value) and false otherwise */
  public boolean isSetA12() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A12_ISSET_ID);
  }

  public void setA12IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A12_ISSET_ID, value);
  }

  public double getA13() {
    return this.a13;
  }

  public ManyFields2 setA13(double a13) {
    this.a13 = a13;
    setA13IsSet(true);
    return this;
  }

  public void unsetA13() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A13_ISSET_ID);
  }

  /** Returns true if field a13 is set (has been assigned a value) and false otherwise */
  public boolean isSetA13() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A13_ISSET_ID);
  }

  public void setA13IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A13_ISSET_ID, value);
  }

  public double getA14() {
    return this.a14;
  }

  public ManyFields2 setA14(double a14) {
    this.a14 = a14;
    setA14IsSet(true);
    return this;
  }

  public void unsetA14() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A14_ISSET_ID);
  }

  /** Returns true if field a14 is set (has been assigned a value) and false otherwise */
  public boolean isSetA14() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A14_ISSET_ID);
  }

  public void setA14IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A14_ISSET_ID, value);
  }

  public double getA15() {
    return this.a15;
  }

  public ManyFields2 setA15(double a15) {
    this.a15 = a15;
    setA15IsSet(true);
    return this;
  }

  public void unsetA15() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A15_ISSET_ID);
  }

  /** Returns true if field a15 is set (has been assigned a value) and false otherwise */
  public boolean isSetA15() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A15_ISSET_ID);
  }

  public void setA15IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A15_ISSET_ID, value);
  }

  public double getA16() {
    return this.a16;
  }

  public ManyFields2 setA16(double a16) {
    this.a16 = a16;
    setA16IsSet(true);
    return this;
  }

  public void unsetA16() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A16_ISSET_ID);
  }

  /** Returns true if field a16 is set (has been assigned a value) and false otherwise */
  public boolean isSetA16() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A16_ISSET_ID);
  }

  public void setA16IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A16_ISSET_ID, value);
  }

  public double getA17() {
    return this.a17;
  }

  public ManyFields2 setA17(double a17) {
    this.a17 = a17;
    setA17IsSet(true);
    return this;
  }

  public void unsetA17() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A17_ISSET_ID);
  }

  /** Returns true if field a17 is set (has been assigned a value) and false otherwise */
  public boolean isSetA17() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A17_ISSET_ID);
  }

  public void setA17IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A17_ISSET_ID, value);
  }

  public double getA18() {
    return this.a18;
  }

  public ManyFields2 setA18(double a18) {
    this.a18 = a18;
    setA18IsSet(true);
    return this;
  }

  public void unsetA18() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A18_ISSET_ID);
  }

  /** Returns true if field a18 is set (has been assigned a value) and false otherwise */
  public boolean isSetA18() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A18_ISSET_ID);
  }

  public void setA18IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A18_ISSET_ID, value);
  }

  public double getA19() {
    return this.a19;
  }

  public ManyFields2 setA19(double a19) {
    this.a19 = a19;
    setA19IsSet(true);
    return this;
  }

  public void unsetA19() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A19_ISSET_ID);
  }

  /** Returns true if field a19 is set (has been assigned a value) and false otherwise */
  public boolean isSetA19() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A19_ISSET_ID);
  }

  public void setA19IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A19_ISSET_ID, value);
  }

  public double getA20() {
    return this.a20;
  }

  public ManyFields2 setA20(double a20) {
    this.a20 = a20;
    setA20IsSet(true);
    return this;
  }

  public void unsetA20() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A20_ISSET_ID);
  }

  /** Returns true if field a20 is set (has been assigned a value) and false otherwise */
  public boolean isSetA20() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A20_ISSET_ID);
  }

  public void setA20IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A20_ISSET_ID, value);
  }

  public double getA21() {
    return this.a21;
  }

  public ManyFields2 setA21(double a21) {
    this.a21 = a21;
    setA21IsSet(true);
    return this;
  }

  public void unsetA21() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A21_ISSET_ID);
  }

  /** Returns true if field a21 is set (has been assigned a value) and false otherwise */
  public boolean isSetA21() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A21_ISSET_ID);
  }

  public void setA21IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A21_ISSET_ID, value);
  }

  public double getA22() {
    return this.a22;
  }

  public ManyFields2 setA22(double a22) {
    this.a22 = a22;
    setA22IsSet(true);
    return this;
  }

  public void unsetA22() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A22_ISSET_ID);
  }

  /** Returns true if field a22 is set (has been assigned a value) and false otherwise */
  public boolean isSetA22() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A22_ISSET_ID);
  }

  public void setA22IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A22_ISSET_ID, value);
  }

  public double getA23() {
    return this.a23;
  }

  public ManyFields2 setA23(double a23) {
    this.a23 = a23;
    setA23IsSet(true);
    return this;
  }

  public void unsetA23() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A23_ISSET_ID);
  }

  /** Returns true if field a23 is set (has been assigned a value) and false otherwise */
  public boolean isSetA23() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A23_ISSET_ID);
  }

  public void setA23IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A23_ISSET_ID, value);
  }

  public double getA24() {
    return this.a24;
  }

  public ManyFields2 setA24(double a24) {
    this.a24 = a24;
    setA24IsSet(true);
    return this;
  }

  public void unsetA24() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A24_ISSET_ID);
  }

  /** Returns true if field a24 is set (has been assigned a value) and false otherwise */
  public boolean isSetA24() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A24_ISSET_ID);
  }

  public void setA24IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A24_ISSET_ID, value);
  }

  public double getA25() {
    return this.a25;
  }

  public ManyFields2 setA25(double a25) {
    this.a25 = a25;
    setA25IsSet(true);
    return this;
  }

  public void unsetA25() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A25_ISSET_ID);
  }

  /** Returns true if field a25 is set (has been assigned a value) and false otherwise */
  public boolean isSetA25() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A25_ISSET_ID);
  }

  public void setA25IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A25_ISSET_ID, value);
  }

  public double getA26() {
    return this.a26;
  }

  public ManyFields2 setA26(double a26) {
    this.a26 = a26;
    setA26IsSet(true);
    return this;
  }

  public void unsetA26() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A26_ISSET_ID);
  }

  /** Returns true if field a26 is set (has been assigned a value) and false otherwise */
  public boolean isSetA26() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A26_ISSET_ID);
  }

  public void setA26IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A26_ISSET_ID, value);
  }

  public double getA27() {
    return this.a27;
  }

  public ManyFields2 setA27(double a27) {
    this.a27 = a27;
    setA27IsSet(true);
    return this;
  }

  public void unsetA27() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A27_ISSET_ID);
  }

  /** Returns true if field a27 is set (has been assigned a value) and false otherwise */
  public boolean isSetA27() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A27_ISSET_ID);
  }

  public void setA27IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A27_ISSET_ID, value);
  }

  public double getA28() {
    return this.a28;
  }

  public ManyFields2 setA28(double a28) {
    this.a28 = a28;
    setA28IsSet(true);
    return this;
  }

  public void unsetA28() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A28_ISSET_ID);
  }

  /** Returns true if field a28 is set (has been assigned a value) and false otherwise */
  public boolean isSetA28() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A28_ISSET_ID);
  }

  public void setA28IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A28_ISSET_ID, value);
  }

  public double getA29() {
    return this.a29;
  }

  public ManyFields2 setA29(double a29) {
    this.a29 = a29;
    setA29IsSet(true);
    return this;
  }

  public void unsetA29() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A29_ISSET_ID);
  }

  /** Returns true if field a29 is set (has been assigned a value) and false otherwise */
  public boolean isSetA29() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A29_ISSET_ID);
  }

  public void setA29IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A29_ISSET_ID, value);
  }

  public double getA30() {
    return this.a30;
  }

  public ManyFields2 setA30(double a30) {
    this.a30 = a30;
    setA30IsSet(true);
    return this;
  }

  public void unsetA30() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A30_ISSET_ID);
  }

  /** Returns true if field a30 is set (has been assigned a value) and false otherwise */
  public boolean isSetA30() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A30_ISSET_ID);
  }

  public void setA30IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A30_ISSET_ID, value);
  }

  public double getA31() {
    return this.a31;
  }

  public ManyFields2 setA31(double a31) {
    this.a31 = a31;
    setA31IsSet(true);
    return this;
  }

  public void unsetA31() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A31_ISSET_ID);
  }

  /** Returns true if field a31 is set (has been assigned a value) and false otherwise */
  public boolean isSetA31() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A31_ISSET_ID);
  }

  public void setA31IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A31_ISSET_ID, value);
  }

  public double getA32() {
    return this.a32;
  }

  public ManyFields2 setA32(double a32) {
    this.a32 = a32;
    setA32IsSet(true);
    return this;
  }

  public void unsetA32() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A32_ISSET_ID);
  }

  /** Returns true if field a32 is set (has been assigned a value) and false otherwise */
  public boolean isSetA32() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A32_ISSET_ID);
  }

  public void setA32IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A32_ISSET_ID, value);
  }

  public double getA33() {
    return this.a33;
  }

  public ManyFields2 setA33(double a33) {
    this.a33 = a33;
    setA33IsSet(true);
    return this;
  }

  public void unsetA33() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A33_ISSET_ID);
  }

  /** Returns true if field a33 is set (has been assigned a value) and false otherwise */
  public boolean isSetA33() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A33_ISSET_ID);
  }

  public void setA33IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A33_ISSET_ID, value);
  }

  public double getA34() {
    return this.a34;
  }

  public ManyFields2 setA34(double a34) {
    this.a34 = a34;
    setA34IsSet(true);
    return this;
  }

  public void unsetA34() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A34_ISSET_ID);
  }

  /** Returns true if field a34 is set (has been assigned a value) and false otherwise */
  public boolean isSetA34() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A34_ISSET_ID);
  }

  public void setA34IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A34_ISSET_ID, value);
  }

  public double getA35() {
    return this.a35;
  }

  public ManyFields2 setA35(double a35) {
    this.a35 = a35;
    setA35IsSet(true);
    return this;
  }

  public void unsetA35() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A35_ISSET_ID);
  }

  /** Returns true if field a35 is set (has been assigned a value) and false otherwise */
  public boolean isSetA35() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A35_ISSET_ID);
  }

  public void setA35IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A35_ISSET_ID, value);
  }

  public double getA36() {
    return this.a36;
  }

  public ManyFields2 setA36(double a36) {
    this.a36 = a36;
    setA36IsSet(true);
    return this;
  }

  public void unsetA36() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A36_ISSET_ID);
  }

  /** Returns true if field a36 is set (has been assigned a value) and false otherwise */
  public boolean isSetA36() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A36_ISSET_ID);
  }

  public void setA36IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A36_ISSET_ID, value);
  }

  public double getA37() {
    return this.a37;
  }

  public ManyFields2 setA37(double a37) {
    this.a37 = a37;
    setA37IsSet(true);
    return this;
  }

  public void unsetA37() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A37_ISSET_ID);
  }

  /** Returns true if field a37 is set (has been assigned a value) and false otherwise */
  public boolean isSetA37() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A37_ISSET_ID);
  }

  public void setA37IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A37_ISSET_ID, value);
  }

  public double getA38() {
    return this.a38;
  }

  public ManyFields2 setA38(double a38) {
    this.a38 = a38;
    setA38IsSet(true);
    return this;
  }

  public void unsetA38() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A38_ISSET_ID);
  }

  /** Returns true if field a38 is set (has been assigned a value) and false otherwise */
  public boolean isSetA38() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A38_ISSET_ID);
  }

  public void setA38IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A38_ISSET_ID, value);
  }

  public double getA39() {
    return this.a39;
  }

  public ManyFields2 setA39(double a39) {
    this.a39 = a39;
    setA39IsSet(true);
    return this;
  }

  public void unsetA39() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A39_ISSET_ID);
  }

  /** Returns true if field a39 is set (has been assigned a value) and false otherwise */
  public boolean isSetA39() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A39_ISSET_ID);
  }

  public void setA39IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A39_ISSET_ID, value);
  }

  public double getA40() {
    return this.a40;
  }

  public ManyFields2 setA40(double a40) {
    this.a40 = a40;
    setA40IsSet(true);
    return this;
  }

  public void unsetA40() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A40_ISSET_ID);
  }

  /** Returns true if field a40 is set (has been assigned a value) and false otherwise */
  public boolean isSetA40() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A40_ISSET_ID);
  }

  public void setA40IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A40_ISSET_ID, value);
  }

  public double getA41() {
    return this.a41;
  }

  public ManyFields2 setA41(double a41) {
    this.a41 = a41;
    setA41IsSet(true);
    return this;
  }

  public void unsetA41() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A41_ISSET_ID);
  }

  /** Returns true if field a41 is set (has been assigned a value) and false otherwise */
  public boolean isSetA41() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A41_ISSET_ID);
  }

  public void setA41IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A41_ISSET_ID, value);
  }

  public double getA42() {
    return this.a42;
  }

  public ManyFields2 setA42(double a42) {
    this.a42 = a42;
    setA42IsSet(true);
    return this;
  }

  public void unsetA42() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A42_ISSET_ID);
  }

  /** Returns true if field a42 is set (has been assigned a value) and false otherwise */
  public boolean isSetA42() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A42_ISSET_ID);
  }

  public void setA42IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A42_ISSET_ID, value);
  }

  public double getA43() {
    return this.a43;
  }

  public ManyFields2 setA43(double a43) {
    this.a43 = a43;
    setA43IsSet(true);
    return this;
  }

  public void unsetA43() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A43_ISSET_ID);
  }

  /** Returns true if field a43 is set (has been assigned a value) and false otherwise */
  public boolean isSetA43() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A43_ISSET_ID);
  }

  public void setA43IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A43_ISSET_ID, value);
  }

  public double getA44() {
    return this.a44;
  }

  public ManyFields2 setA44(double a44) {
    this.a44 = a44;
    setA44IsSet(true);
    return this;
  }

  public void unsetA44() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A44_ISSET_ID);
  }

  /** Returns true if field a44 is set (has been assigned a value) and false otherwise */
  public boolean isSetA44() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A44_ISSET_ID);
  }

  public void setA44IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A44_ISSET_ID, value);
  }

  public double getA45() {
    return this.a45;
  }

  public ManyFields2 setA45(double a45) {
    this.a45 = a45;
    setA45IsSet(true);
    return this;
  }

  public void unsetA45() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A45_ISSET_ID);
  }

  /** Returns true if field a45 is set (has been assigned a value) and false otherwise */
  public boolean isSetA45() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A45_ISSET_ID);
  }

  public void setA45IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A45_ISSET_ID, value);
  }

  public double getA46() {
    return this.a46;
  }

  public ManyFields2 setA46(double a46) {
    this.a46 = a46;
    setA46IsSet(true);
    return this;
  }

  public void unsetA46() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A46_ISSET_ID);
  }

  /** Returns true if field a46 is set (has been assigned a value) and false otherwise */
  public boolean isSetA46() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A46_ISSET_ID);
  }

  public void setA46IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A46_ISSET_ID, value);
  }

  public double getA47() {
    return this.a47;
  }

  public ManyFields2 setA47(double a47) {
    this.a47 = a47;
    setA47IsSet(true);
    return this;
  }

  public void unsetA47() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A47_ISSET_ID);
  }

  /** Returns true if field a47 is set (has been assigned a value) and false otherwise */
  public boolean isSetA47() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A47_ISSET_ID);
  }

  public void setA47IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A47_ISSET_ID, value);
  }

  public double getA48() {
    return this.a48;
  }

  public ManyFields2 setA48(double a48) {
    this.a48 = a48;
    setA48IsSet(true);
    return this;
  }

  public void unsetA48() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A48_ISSET_ID);
  }

  /** Returns true if field a48 is set (has been assigned a value) and false otherwise */
  public boolean isSetA48() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A48_ISSET_ID);
  }

  public void setA48IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A48_ISSET_ID, value);
  }

  public double getA49() {
    return this.a49;
  }

  public ManyFields2 setA49(double a49) {
    this.a49 = a49;
    setA49IsSet(true);
    return this;
  }

  public void unsetA49() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A49_ISSET_ID);
  }

  /** Returns true if field a49 is set (has been assigned a value) and false otherwise */
  public boolean isSetA49() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A49_ISSET_ID);
  }

  public void setA49IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A49_ISSET_ID, value);
  }

  public double getA50() {
    return this.a50;
  }

  public ManyFields2 setA50(double a50) {
    this.a50 = a50;
    setA50IsSet(true);
    return this;
  }

  public void unsetA50() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A50_ISSET_ID);
  }

  /** Returns true if field a50 is set (has been assigned a value) and false otherwise */
  public boolean isSetA50() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A50_ISSET_ID);
  }

  public void setA50IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A50_ISSET_ID, value);
  }

  public double getA51() {
    return this.a51;
  }

  public ManyFields2 setA51(double a51) {
    this.a51 = a51;
    setA51IsSet(true);
    return this;
  }

  public void unsetA51() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A51_ISSET_ID);
  }

  /** Returns true if field a51 is set (has been assigned a value) and false otherwise */
  public boolean isSetA51() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A51_ISSET_ID);
  }

  public void setA51IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A51_ISSET_ID, value);
  }

  public double getA52() {
    return this.a52;
  }

  public ManyFields2 setA52(double a52) {
    this.a52 = a52;
    setA52IsSet(true);
    return this;
  }

  public void unsetA52() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A52_ISSET_ID);
  }

  /** Returns true if field a52 is set (has been assigned a value) and false otherwise */
  public boolean isSetA52() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A52_ISSET_ID);
  }

  public void setA52IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A52_ISSET_ID, value);
  }

  public double getA53() {
    return this.a53;
  }

  public ManyFields2 setA53(double a53) {
    this.a53 = a53;
    setA53IsSet(true);
    return this;
  }

  public void unsetA53() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A53_ISSET_ID);
  }

  /** Returns true if field a53 is set (has been assigned a value) and false otherwise */
  public boolean isSetA53() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A53_ISSET_ID);
  }

  public void setA53IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A53_ISSET_ID, value);
  }

  public double getA54() {
    return this.a54;
  }

  public ManyFields2 setA54(double a54) {
    this.a54 = a54;
    setA54IsSet(true);
    return this;
  }

  public void unsetA54() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A54_ISSET_ID);
  }

  /** Returns true if field a54 is set (has been assigned a value) and false otherwise */
  public boolean isSetA54() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A54_ISSET_ID);
  }

  public void setA54IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A54_ISSET_ID, value);
  }

  public double getA55() {
    return this.a55;
  }

  public ManyFields2 setA55(double a55) {
    this.a55 = a55;
    setA55IsSet(true);
    return this;
  }

  public void unsetA55() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __A55_ISSET_ID);
  }

  /** Returns true if field a55 is set (has been assigned a value) and false otherwise */
  public boolean isSetA55() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __A55_ISSET_ID);
  }

  public void setA55IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __A55_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case A1:
      if (value == null) {
        unsetA1();
      } else {
        setA1((java.lang.Double)value);
      }
      break;

    case A2:
      if (value == null) {
        unsetA2();
      } else {
        setA2((java.lang.Double)value);
      }
      break;

    case A3:
      if (value == null) {
        unsetA3();
      } else {
        setA3((java.lang.Double)value);
      }
      break;

    case A4:
      if (value == null) {
        unsetA4();
      } else {
        setA4((java.lang.Double)value);
      }
      break;

    case A5:
      if (value == null) {
        unsetA5();
      } else {
        setA5((java.lang.Double)value);
      }
      break;

    case A6:
      if (value == null) {
        unsetA6();
      } else {
        setA6((java.lang.Double)value);
      }
      break;

    case A7:
      if (value == null) {
        unsetA7();
      } else {
        setA7((java.lang.Double)value);
      }
      break;

    case A8:
      if (value == null) {
        unsetA8();
      } else {
        setA8((java.lang.Double)value);
      }
      break;

    case A9:
      if (value == null) {
        unsetA9();
      } else {
        setA9((java.lang.Double)value);
      }
      break;

    case A10:
      if (value == null) {
        unsetA10();
      } else {
        setA10((java.lang.Double)value);
      }
      break;

    case A11:
      if (value == null) {
        unsetA11();
      } else {
        setA11((java.lang.Double)value);
      }
      break;

    case A12:
      if (value == null) {
        unsetA12();
      } else {
        setA12((java.lang.Double)value);
      }
      break;

    case A13:
      if (value == null) {
        unsetA13();
      } else {
        setA13((java.lang.Double)value);
      }
      break;

    case A14:
      if (value == null) {
        unsetA14();
      } else {
        setA14((java.lang.Double)value);
      }
      break;

    case A15:
      if (value == null) {
        unsetA15();
      } else {
        setA15((java.lang.Double)value);
      }
      break;

    case A16:
      if (value == null) {
        unsetA16();
      } else {
        setA16((java.lang.Double)value);
      }
      break;

    case A17:
      if (value == null) {
        unsetA17();
      } else {
        setA17((java.lang.Double)value);
      }
      break;

    case A18:
      if (value == null) {
        unsetA18();
      } else {
        setA18((java.lang.Double)value);
      }
      break;

    case A19:
      if (value == null) {
        unsetA19();
      } else {
        setA19((java.lang.Double)value);
      }
      break;

    case A20:
      if (value == null) {
        unsetA20();
      } else {
        setA20((java.lang.Double)value);
      }
      break;

    case A21:
      if (value == null) {
        unsetA21();
      } else {
        setA21((java.lang.Double)value);
      }
      break;

    case A22:
      if (value == null) {
        unsetA22();
      } else {
        setA22((java.lang.Double)value);
      }
      break;

    case A23:
      if (value == null) {
        unsetA23();
      } else {
        setA23((java.lang.Double)value);
      }
      break;

    case A24:
      if (value == null) {
        unsetA24();
      } else {
        setA24((java.lang.Double)value);
      }
      break;

    case A25:
      if (value == null) {
        unsetA25();
      } else {
        setA25((java.lang.Double)value);
      }
      break;

    case A26:
      if (value == null) {
        unsetA26();
      } else {
        setA26((java.lang.Double)value);
      }
      break;

    case A27:
      if (value == null) {
        unsetA27();
      } else {
        setA27((java.lang.Double)value);
      }
      break;

    case A28:
      if (value == null) {
        unsetA28();
      } else {
        setA28((java.lang.Double)value);
      }
      break;

    case A29:
      if (value == null) {
        unsetA29();
      } else {
        setA29((java.lang.Double)value);
      }
      break;

    case A30:
      if (value == null) {
        unsetA30();
      } else {
        setA30((java.lang.Double)value);
      }
      break;

    case A31:
      if (value == null) {
        unsetA31();
      } else {
        setA31((java.lang.Double)value);
      }
      break;

    case A32:
      if (value == null) {
        unsetA32();
      } else {
        setA32((java.lang.Double)value);
      }
      break;

    case A33:
      if (value == null) {
        unsetA33();
      } else {
        setA33((java.lang.Double)value);
      }
      break;

    case A34:
      if (value == null) {
        unsetA34();
      } else {
        setA34((java.lang.Double)value);
      }
      break;

    case A35:
      if (value == null) {
        unsetA35();
      } else {
        setA35((java.lang.Double)value);
      }
      break;

    case A36:
      if (value == null) {
        unsetA36();
      } else {
        setA36((java.lang.Double)value);
      }
      break;

    case A37:
      if (value == null) {
        unsetA37();
      } else {
        setA37((java.lang.Double)value);
      }
      break;

    case A38:
      if (value == null) {
        unsetA38();
      } else {
        setA38((java.lang.Double)value);
      }
      break;

    case A39:
      if (value == null) {
        unsetA39();
      } else {
        setA39((java.lang.Double)value);
      }
      break;

    case A40:
      if (value == null) {
        unsetA40();
      } else {
        setA40((java.lang.Double)value);
      }
      break;

    case A41:
      if (value == null) {
        unsetA41();
      } else {
        setA41((java.lang.Double)value);
      }
      break;

    case A42:
      if (value == null) {
        unsetA42();
      } else {
        setA42((java.lang.Double)value);
      }
      break;

    case A43:
      if (value == null) {
        unsetA43();
      } else {
        setA43((java.lang.Double)value);
      }
      break;

    case A44:
      if (value == null) {
        unsetA44();
      } else {
        setA44((java.lang.Double)value);
      }
      break;

    case A45:
      if (value == null) {
        unsetA45();
      } else {
        setA45((java.lang.Double)value);
      }
      break;

    case A46:
      if (value == null) {
        unsetA46();
      } else {
        setA46((java.lang.Double)value);
      }
      break;

    case A47:
      if (value == null) {
        unsetA47();
      } else {
        setA47((java.lang.Double)value);
      }
      break;

    case A48:
      if (value == null) {
        unsetA48();
      } else {
        setA48((java.lang.Double)value);
      }
      break;

    case A49:
      if (value == null) {
        unsetA49();
      } else {
        setA49((java.lang.Double)value);
      }
      break;

    case A50:
      if (value == null) {
        unsetA50();
      } else {
        setA50((java.lang.Double)value);
      }
      break;

    case A51:
      if (value == null) {
        unsetA51();
      } else {
        setA51((java.lang.Double)value);
      }
      break;

    case A52:
      if (value == null) {
        unsetA52();
      } else {
        setA52((java.lang.Double)value);
      }
      break;

    case A53:
      if (value == null) {
        unsetA53();
      } else {
        setA53((java.lang.Double)value);
      }
      break;

    case A54:
      if (value == null) {
        unsetA54();
      } else {
        setA54((java.lang.Double)value);
      }
      break;

    case A55:
      if (value == null) {
        unsetA55();
      } else {
        setA55((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case A1:
      return getA1();

    case A2:
      return getA2();

    case A3:
      return getA3();

    case A4:
      return getA4();

    case A5:
      return getA5();

    case A6:
      return getA6();

    case A7:
      return getA7();

    case A8:
      return getA8();

    case A9:
      return getA9();

    case A10:
      return getA10();

    case A11:
      return getA11();

    case A12:
      return getA12();

    case A13:
      return getA13();

    case A14:
      return getA14();

    case A15:
      return getA15();

    case A16:
      return getA16();

    case A17:
      return getA17();

    case A18:
      return getA18();

    case A19:
      return getA19();

    case A20:
      return getA20();

    case A21:
      return getA21();

    case A22:
      return getA22();

    case A23:
      return getA23();

    case A24:
      return getA24();

    case A25:
      return getA25();

    case A26:
      return getA26();

    case A27:
      return getA27();

    case A28:
      return getA28();

    case A29:
      return getA29();

    case A30:
      return getA30();

    case A31:
      return getA31();

    case A32:
      return getA32();

    case A33:
      return getA33();

    case A34:
      return getA34();

    case A35:
      return getA35();

    case A36:
      return getA36();

    case A37:
      return getA37();

    case A38:
      return getA38();

    case A39:
      return getA39();

    case A40:
      return getA40();

    case A41:
      return getA41();

    case A42:
      return getA42();

    case A43:
      return getA43();

    case A44:
      return getA44();

    case A45:
      return getA45();

    case A46:
      return getA46();

    case A47:
      return getA47();

    case A48:
      return getA48();

    case A49:
      return getA49();

    case A50:
      return getA50();

    case A51:
      return getA51();

    case A52:
      return getA52();

    case A53:
      return getA53();

    case A54:
      return getA54();

    case A55:
      return getA55();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case A1:
      return isSetA1();
    case A2:
      return isSetA2();
    case A3:
      return isSetA3();
    case A4:
      return isSetA4();
    case A5:
      return isSetA5();
    case A6:
      return isSetA6();
    case A7:
      return isSetA7();
    case A8:
      return isSetA8();
    case A9:
      return isSetA9();
    case A10:
      return isSetA10();
    case A11:
      return isSetA11();
    case A12:
      return isSetA12();
    case A13:
      return isSetA13();
    case A14:
      return isSetA14();
    case A15:
      return isSetA15();
    case A16:
      return isSetA16();
    case A17:
      return isSetA17();
    case A18:
      return isSetA18();
    case A19:
      return isSetA19();
    case A20:
      return isSetA20();
    case A21:
      return isSetA21();
    case A22:
      return isSetA22();
    case A23:
      return isSetA23();
    case A24:
      return isSetA24();
    case A25:
      return isSetA25();
    case A26:
      return isSetA26();
    case A27:
      return isSetA27();
    case A28:
      return isSetA28();
    case A29:
      return isSetA29();
    case A30:
      return isSetA30();
    case A31:
      return isSetA31();
    case A32:
      return isSetA32();
    case A33:
      return isSetA33();
    case A34:
      return isSetA34();
    case A35:
      return isSetA35();
    case A36:
      return isSetA36();
    case A37:
      return isSetA37();
    case A38:
      return isSetA38();
    case A39:
      return isSetA39();
    case A40:
      return isSetA40();
    case A41:
      return isSetA41();
    case A42:
      return isSetA42();
    case A43:
      return isSetA43();
    case A44:
      return isSetA44();
    case A45:
      return isSetA45();
    case A46:
      return isSetA46();
    case A47:
      return isSetA47();
    case A48:
      return isSetA48();
    case A49:
      return isSetA49();
    case A50:
      return isSetA50();
    case A51:
      return isSetA51();
    case A52:
      return isSetA52();
    case A53:
      return isSetA53();
    case A54:
      return isSetA54();
    case A55:
      return isSetA55();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ManyFields2)
      return this.equals((ManyFields2)that);
    return false;
  }

  public boolean equals(ManyFields2 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_a1 = true && this.isSetA1();
    boolean that_present_a1 = true && that.isSetA1();
    if (this_present_a1 || that_present_a1) {
      if (!(this_present_a1 && that_present_a1))
        return false;
      if (this.a1 != that.a1)
        return false;
    }

    boolean this_present_a2 = true;
    boolean that_present_a2 = true;
    if (this_present_a2 || that_present_a2) {
      if (!(this_present_a2 && that_present_a2))
        return false;
      if (this.a2 != that.a2)
        return false;
    }

    boolean this_present_a3 = true && this.isSetA3();
    boolean that_present_a3 = true && that.isSetA3();
    if (this_present_a3 || that_present_a3) {
      if (!(this_present_a3 && that_present_a3))
        return false;
      if (this.a3 != that.a3)
        return false;
    }

    boolean this_present_a4 = true;
    boolean that_present_a4 = true;
    if (this_present_a4 || that_present_a4) {
      if (!(this_present_a4 && that_present_a4))
        return false;
      if (this.a4 != that.a4)
        return false;
    }

    boolean this_present_a5 = true && this.isSetA5();
    boolean that_present_a5 = true && that.isSetA5();
    if (this_present_a5 || that_present_a5) {
      if (!(this_present_a5 && that_present_a5))
        return false;
      if (this.a5 != that.a5)
        return false;
    }

    boolean this_present_a6 = true;
    boolean that_present_a6 = true;
    if (this_present_a6 || that_present_a6) {
      if (!(this_present_a6 && that_present_a6))
        return false;
      if (this.a6 != that.a6)
        return false;
    }

    boolean this_present_a7 = true && this.isSetA7();
    boolean that_present_a7 = true && that.isSetA7();
    if (this_present_a7 || that_present_a7) {
      if (!(this_present_a7 && that_present_a7))
        return false;
      if (this.a7 != that.a7)
        return false;
    }

    boolean this_present_a8 = true;
    boolean that_present_a8 = true;
    if (this_present_a8 || that_present_a8) {
      if (!(this_present_a8 && that_present_a8))
        return false;
      if (this.a8 != that.a8)
        return false;
    }

    boolean this_present_a9 = true && this.isSetA9();
    boolean that_present_a9 = true && that.isSetA9();
    if (this_present_a9 || that_present_a9) {
      if (!(this_present_a9 && that_present_a9))
        return false;
      if (this.a9 != that.a9)
        return false;
    }

    boolean this_present_a10 = true;
    boolean that_present_a10 = true;
    if (this_present_a10 || that_present_a10) {
      if (!(this_present_a10 && that_present_a10))
        return false;
      if (this.a10 != that.a10)
        return false;
    }

    boolean this_present_a11 = true && this.isSetA11();
    boolean that_present_a11 = true && that.isSetA11();
    if (this_present_a11 || that_present_a11) {
      if (!(this_present_a11 && that_present_a11))
        return false;
      if (this.a11 != that.a11)
        return false;
    }

    boolean this_present_a12 = true;
    boolean that_present_a12 = true;
    if (this_present_a12 || that_present_a12) {
      if (!(this_present_a12 && that_present_a12))
        return false;
      if (this.a12 != that.a12)
        return false;
    }

    boolean this_present_a13 = true && this.isSetA13();
    boolean that_present_a13 = true && that.isSetA13();
    if (this_present_a13 || that_present_a13) {
      if (!(this_present_a13 && that_present_a13))
        return false;
      if (this.a13 != that.a13)
        return false;
    }

    boolean this_present_a14 = true;
    boolean that_present_a14 = true;
    if (this_present_a14 || that_present_a14) {
      if (!(this_present_a14 && that_present_a14))
        return false;
      if (this.a14 != that.a14)
        return false;
    }

    boolean this_present_a15 = true && this.isSetA15();
    boolean that_present_a15 = true && that.isSetA15();
    if (this_present_a15 || that_present_a15) {
      if (!(this_present_a15 && that_present_a15))
        return false;
      if (this.a15 != that.a15)
        return false;
    }

    boolean this_present_a16 = true;
    boolean that_present_a16 = true;
    if (this_present_a16 || that_present_a16) {
      if (!(this_present_a16 && that_present_a16))
        return false;
      if (this.a16 != that.a16)
        return false;
    }

    boolean this_present_a17 = true && this.isSetA17();
    boolean that_present_a17 = true && that.isSetA17();
    if (this_present_a17 || that_present_a17) {
      if (!(this_present_a17 && that_present_a17))
        return false;
      if (this.a17 != that.a17)
        return false;
    }

    boolean this_present_a18 = true;
    boolean that_present_a18 = true;
    if (this_present_a18 || that_present_a18) {
      if (!(this_present_a18 && that_present_a18))
        return false;
      if (this.a18 != that.a18)
        return false;
    }

    boolean this_present_a19 = true && this.isSetA19();
    boolean that_present_a19 = true && that.isSetA19();
    if (this_present_a19 || that_present_a19) {
      if (!(this_present_a19 && that_present_a19))
        return false;
      if (this.a19 != that.a19)
        return false;
    }

    boolean this_present_a20 = true;
    boolean that_present_a20 = true;
    if (this_present_a20 || that_present_a20) {
      if (!(this_present_a20 && that_present_a20))
        return false;
      if (this.a20 != that.a20)
        return false;
    }

    boolean this_present_a21 = true && this.isSetA21();
    boolean that_present_a21 = true && that.isSetA21();
    if (this_present_a21 || that_present_a21) {
      if (!(this_present_a21 && that_present_a21))
        return false;
      if (this.a21 != that.a21)
        return false;
    }

    boolean this_present_a22 = true;
    boolean that_present_a22 = true;
    if (this_present_a22 || that_present_a22) {
      if (!(this_present_a22 && that_present_a22))
        return false;
      if (this.a22 != that.a22)
        return false;
    }

    boolean this_present_a23 = true && this.isSetA23();
    boolean that_present_a23 = true && that.isSetA23();
    if (this_present_a23 || that_present_a23) {
      if (!(this_present_a23 && that_present_a23))
        return false;
      if (this.a23 != that.a23)
        return false;
    }

    boolean this_present_a24 = true;
    boolean that_present_a24 = true;
    if (this_present_a24 || that_present_a24) {
      if (!(this_present_a24 && that_present_a24))
        return false;
      if (this.a24 != that.a24)
        return false;
    }

    boolean this_present_a25 = true && this.isSetA25();
    boolean that_present_a25 = true && that.isSetA25();
    if (this_present_a25 || that_present_a25) {
      if (!(this_present_a25 && that_present_a25))
        return false;
      if (this.a25 != that.a25)
        return false;
    }

    boolean this_present_a26 = true;
    boolean that_present_a26 = true;
    if (this_present_a26 || that_present_a26) {
      if (!(this_present_a26 && that_present_a26))
        return false;
      if (this.a26 != that.a26)
        return false;
    }

    boolean this_present_a27 = true && this.isSetA27();
    boolean that_present_a27 = true && that.isSetA27();
    if (this_present_a27 || that_present_a27) {
      if (!(this_present_a27 && that_present_a27))
        return false;
      if (this.a27 != that.a27)
        return false;
    }

    boolean this_present_a28 = true;
    boolean that_present_a28 = true;
    if (this_present_a28 || that_present_a28) {
      if (!(this_present_a28 && that_present_a28))
        return false;
      if (this.a28 != that.a28)
        return false;
    }

    boolean this_present_a29 = true && this.isSetA29();
    boolean that_present_a29 = true && that.isSetA29();
    if (this_present_a29 || that_present_a29) {
      if (!(this_present_a29 && that_present_a29))
        return false;
      if (this.a29 != that.a29)
        return false;
    }

    boolean this_present_a30 = true;
    boolean that_present_a30 = true;
    if (this_present_a30 || that_present_a30) {
      if (!(this_present_a30 && that_present_a30))
        return false;
      if (this.a30 != that.a30)
        return false;
    }

    boolean this_present_a31 = true && this.isSetA31();
    boolean that_present_a31 = true && that.isSetA31();
    if (this_present_a31 || that_present_a31) {
      if (!(this_present_a31 && that_present_a31))
        return false;
      if (this.a31 != that.a31)
        return false;
    }

    boolean this_present_a32 = true;
    boolean that_present_a32 = true;
    if (this_present_a32 || that_present_a32) {
      if (!(this_present_a32 && that_present_a32))
        return false;
      if (this.a32 != that.a32)
        return false;
    }

    boolean this_present_a33 = true && this.isSetA33();
    boolean that_present_a33 = true && that.isSetA33();
    if (this_present_a33 || that_present_a33) {
      if (!(this_present_a33 && that_present_a33))
        return false;
      if (this.a33 != that.a33)
        return false;
    }

    boolean this_present_a34 = true;
    boolean that_present_a34 = true;
    if (this_present_a34 || that_present_a34) {
      if (!(this_present_a34 && that_present_a34))
        return false;
      if (this.a34 != that.a34)
        return false;
    }

    boolean this_present_a35 = true && this.isSetA35();
    boolean that_present_a35 = true && that.isSetA35();
    if (this_present_a35 || that_present_a35) {
      if (!(this_present_a35 && that_present_a35))
        return false;
      if (this.a35 != that.a35)
        return false;
    }

    boolean this_present_a36 = true;
    boolean that_present_a36 = true;
    if (this_present_a36 || that_present_a36) {
      if (!(this_present_a36 && that_present_a36))
        return false;
      if (this.a36 != that.a36)
        return false;
    }

    boolean this_present_a37 = true && this.isSetA37();
    boolean that_present_a37 = true && that.isSetA37();
    if (this_present_a37 || that_present_a37) {
      if (!(this_present_a37 && that_present_a37))
        return false;
      if (this.a37 != that.a37)
        return false;
    }

    boolean this_present_a38 = true;
    boolean that_present_a38 = true;
    if (this_present_a38 || that_present_a38) {
      if (!(this_present_a38 && that_present_a38))
        return false;
      if (this.a38 != that.a38)
        return false;
    }

    boolean this_present_a39 = true && this.isSetA39();
    boolean that_present_a39 = true && that.isSetA39();
    if (this_present_a39 || that_present_a39) {
      if (!(this_present_a39 && that_present_a39))
        return false;
      if (this.a39 != that.a39)
        return false;
    }

    boolean this_present_a40 = true;
    boolean that_present_a40 = true;
    if (this_present_a40 || that_present_a40) {
      if (!(this_present_a40 && that_present_a40))
        return false;
      if (this.a40 != that.a40)
        return false;
    }

    boolean this_present_a41 = true && this.isSetA41();
    boolean that_present_a41 = true && that.isSetA41();
    if (this_present_a41 || that_present_a41) {
      if (!(this_present_a41 && that_present_a41))
        return false;
      if (this.a41 != that.a41)
        return false;
    }

    boolean this_present_a42 = true;
    boolean that_present_a42 = true;
    if (this_present_a42 || that_present_a42) {
      if (!(this_present_a42 && that_present_a42))
        return false;
      if (this.a42 != that.a42)
        return false;
    }

    boolean this_present_a43 = true && this.isSetA43();
    boolean that_present_a43 = true && that.isSetA43();
    if (this_present_a43 || that_present_a43) {
      if (!(this_present_a43 && that_present_a43))
        return false;
      if (this.a43 != that.a43)
        return false;
    }

    boolean this_present_a44 = true;
    boolean that_present_a44 = true;
    if (this_present_a44 || that_present_a44) {
      if (!(this_present_a44 && that_present_a44))
        return false;
      if (this.a44 != that.a44)
        return false;
    }

    boolean this_present_a45 = true && this.isSetA45();
    boolean that_present_a45 = true && that.isSetA45();
    if (this_present_a45 || that_present_a45) {
      if (!(this_present_a45 && that_present_a45))
        return false;
      if (this.a45 != that.a45)
        return false;
    }

    boolean this_present_a46 = true;
    boolean that_present_a46 = true;
    if (this_present_a46 || that_present_a46) {
      if (!(this_present_a46 && that_present_a46))
        return false;
      if (this.a46 != that.a46)
        return false;
    }

    boolean this_present_a47 = true && this.isSetA47();
    boolean that_present_a47 = true && that.isSetA47();
    if (this_present_a47 || that_present_a47) {
      if (!(this_present_a47 && that_present_a47))
        return false;
      if (this.a47 != that.a47)
        return false;
    }

    boolean this_present_a48 = true;
    boolean that_present_a48 = true;
    if (this_present_a48 || that_present_a48) {
      if (!(this_present_a48 && that_present_a48))
        return false;
      if (this.a48 != that.a48)
        return false;
    }

    boolean this_present_a49 = true && this.isSetA49();
    boolean that_present_a49 = true && that.isSetA49();
    if (this_present_a49 || that_present_a49) {
      if (!(this_present_a49 && that_present_a49))
        return false;
      if (this.a49 != that.a49)
        return false;
    }

    boolean this_present_a50 = true;
    boolean that_present_a50 = true;
    if (this_present_a50 || that_present_a50) {
      if (!(this_present_a50 && that_present_a50))
        return false;
      if (this.a50 != that.a50)
        return false;
    }

    boolean this_present_a51 = true && this.isSetA51();
    boolean that_present_a51 = true && that.isSetA51();
    if (this_present_a51 || that_present_a51) {
      if (!(this_present_a51 && that_present_a51))
        return false;
      if (this.a51 != that.a51)
        return false;
    }

    boolean this_present_a52 = true;
    boolean that_present_a52 = true;
    if (this_present_a52 || that_present_a52) {
      if (!(this_present_a52 && that_present_a52))
        return false;
      if (this.a52 != that.a52)
        return false;
    }

    boolean this_present_a53 = true && this.isSetA53();
    boolean that_present_a53 = true && that.isSetA53();
    if (this_present_a53 || that_present_a53) {
      if (!(this_present_a53 && that_present_a53))
        return false;
      if (this.a53 != that.a53)
        return false;
    }

    boolean this_present_a54 = true;
    boolean that_present_a54 = true;
    if (this_present_a54 || that_present_a54) {
      if (!(this_present_a54 && that_present_a54))
        return false;
      if (this.a54 != that.a54)
        return false;
    }

    boolean this_present_a55 = true && this.isSetA55();
    boolean that_present_a55 = true && that.isSetA55();
    if (this_present_a55 || that_present_a55) {
      if (!(this_present_a55 && that_present_a55))
        return false;
      if (this.a55 != that.a55)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetA1()) ? 131071 : 524287);
    if (isSetA1())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a1);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a2);

    hashCode = hashCode * 8191 + ((isSetA3()) ? 131071 : 524287);
    if (isSetA3())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a3);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a4);

    hashCode = hashCode * 8191 + ((isSetA5()) ? 131071 : 524287);
    if (isSetA5())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a5);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a6);

    hashCode = hashCode * 8191 + ((isSetA7()) ? 131071 : 524287);
    if (isSetA7())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a7);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a8);

    hashCode = hashCode * 8191 + ((isSetA9()) ? 131071 : 524287);
    if (isSetA9())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a9);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a10);

    hashCode = hashCode * 8191 + ((isSetA11()) ? 131071 : 524287);
    if (isSetA11())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a11);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a12);

    hashCode = hashCode * 8191 + ((isSetA13()) ? 131071 : 524287);
    if (isSetA13())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a13);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a14);

    hashCode = hashCode * 8191 + ((isSetA15()) ? 131071 : 524287);
    if (isSetA15())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a15);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a16);

    hashCode = hashCode * 8191 + ((isSetA17()) ? 131071 : 524287);
    if (isSetA17())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a17);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a18);

    hashCode = hashCode * 8191 + ((isSetA19()) ? 131071 : 524287);
    if (isSetA19())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a19);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a20);

    hashCode = hashCode * 8191 + ((isSetA21()) ? 131071 : 524287);
    if (isSetA21())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a21);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a22);

    hashCode = hashCode * 8191 + ((isSetA23()) ? 131071 : 524287);
    if (isSetA23())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a23);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a24);

    hashCode = hashCode * 8191 + ((isSetA25()) ? 131071 : 524287);
    if (isSetA25())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a25);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a26);

    hashCode = hashCode * 8191 + ((isSetA27()) ? 131071 : 524287);
    if (isSetA27())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a27);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a28);

    hashCode = hashCode * 8191 + ((isSetA29()) ? 131071 : 524287);
    if (isSetA29())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a29);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a30);

    hashCode = hashCode * 8191 + ((isSetA31()) ? 131071 : 524287);
    if (isSetA31())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a31);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a32);

    hashCode = hashCode * 8191 + ((isSetA33()) ? 131071 : 524287);
    if (isSetA33())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a33);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a34);

    hashCode = hashCode * 8191 + ((isSetA35()) ? 131071 : 524287);
    if (isSetA35())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a35);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a36);

    hashCode = hashCode * 8191 + ((isSetA37()) ? 131071 : 524287);
    if (isSetA37())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a37);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a38);

    hashCode = hashCode * 8191 + ((isSetA39()) ? 131071 : 524287);
    if (isSetA39())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a39);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a40);

    hashCode = hashCode * 8191 + ((isSetA41()) ? 131071 : 524287);
    if (isSetA41())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a41);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a42);

    hashCode = hashCode * 8191 + ((isSetA43()) ? 131071 : 524287);
    if (isSetA43())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a43);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a44);

    hashCode = hashCode * 8191 + ((isSetA45()) ? 131071 : 524287);
    if (isSetA45())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a45);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a46);

    hashCode = hashCode * 8191 + ((isSetA47()) ? 131071 : 524287);
    if (isSetA47())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a47);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a48);

    hashCode = hashCode * 8191 + ((isSetA49()) ? 131071 : 524287);
    if (isSetA49())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a49);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a50);

    hashCode = hashCode * 8191 + ((isSetA51()) ? 131071 : 524287);
    if (isSetA51())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a51);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a52);

    hashCode = hashCode * 8191 + ((isSetA53()) ? 131071 : 524287);
    if (isSetA53())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a53);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a54);

    hashCode = hashCode * 8191 + ((isSetA55()) ? 131071 : 524287);
    if (isSetA55())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(a55);

    return hashCode;
  }

  @Override
  public int compareTo(ManyFields2 other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetA1(), other.isSetA1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a1, other.a1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA2(), other.isSetA2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a2, other.a2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA3(), other.isSetA3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a3, other.a3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA4(), other.isSetA4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a4, other.a4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA5(), other.isSetA5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a5, other.a5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA6(), other.isSetA6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a6, other.a6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA7(), other.isSetA7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a7, other.a7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA8(), other.isSetA8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a8, other.a8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA9(), other.isSetA9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a9, other.a9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA10(), other.isSetA10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a10, other.a10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA11(), other.isSetA11());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA11()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a11, other.a11);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA12(), other.isSetA12());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA12()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a12, other.a12);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA13(), other.isSetA13());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA13()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a13, other.a13);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA14(), other.isSetA14());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA14()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a14, other.a14);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA15(), other.isSetA15());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA15()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a15, other.a15);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA16(), other.isSetA16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a16, other.a16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA17(), other.isSetA17());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA17()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a17, other.a17);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA18(), other.isSetA18());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA18()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a18, other.a18);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA19(), other.isSetA19());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA19()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a19, other.a19);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA20(), other.isSetA20());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA20()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a20, other.a20);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA21(), other.isSetA21());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA21()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a21, other.a21);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA22(), other.isSetA22());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA22()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a22, other.a22);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA23(), other.isSetA23());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA23()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a23, other.a23);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA24(), other.isSetA24());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA24()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a24, other.a24);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA25(), other.isSetA25());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA25()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a25, other.a25);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA26(), other.isSetA26());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA26()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a26, other.a26);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA27(), other.isSetA27());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA27()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a27, other.a27);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA28(), other.isSetA28());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA28()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a28, other.a28);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA29(), other.isSetA29());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA29()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a29, other.a29);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA30(), other.isSetA30());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA30()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a30, other.a30);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA31(), other.isSetA31());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA31()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a31, other.a31);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA32(), other.isSetA32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a32, other.a32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA33(), other.isSetA33());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA33()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a33, other.a33);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA34(), other.isSetA34());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA34()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a34, other.a34);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA35(), other.isSetA35());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA35()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a35, other.a35);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA36(), other.isSetA36());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA36()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a36, other.a36);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA37(), other.isSetA37());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA37()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a37, other.a37);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA38(), other.isSetA38());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA38()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a38, other.a38);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA39(), other.isSetA39());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA39()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a39, other.a39);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA40(), other.isSetA40());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA40()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a40, other.a40);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA41(), other.isSetA41());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA41()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a41, other.a41);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA42(), other.isSetA42());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA42()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a42, other.a42);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA43(), other.isSetA43());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA43()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a43, other.a43);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA44(), other.isSetA44());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA44()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a44, other.a44);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA45(), other.isSetA45());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA45()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a45, other.a45);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA46(), other.isSetA46());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA46()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a46, other.a46);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA47(), other.isSetA47());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA47()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a47, other.a47);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA48(), other.isSetA48());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA48()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a48, other.a48);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA49(), other.isSetA49());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA49()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a49, other.a49);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA50(), other.isSetA50());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA50()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a50, other.a50);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA51(), other.isSetA51());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA51()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a51, other.a51);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA52(), other.isSetA52());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA52()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a52, other.a52);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA53(), other.isSetA53());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA53()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a53, other.a53);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA54(), other.isSetA54());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA54()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a54, other.a54);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetA55(), other.isSetA55());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetA55()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a55, other.a55);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ManyFields2(");
    boolean first = true;

    if (isSetA1()) {
      sb.append("a1:");
      sb.append(this.a1);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a2:");
    sb.append(this.a2);
    first = false;
    if (isSetA3()) {
      if (!first) sb.append(", ");
      sb.append("a3:");
      sb.append(this.a3);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a4:");
    sb.append(this.a4);
    first = false;
    if (isSetA5()) {
      if (!first) sb.append(", ");
      sb.append("a5:");
      sb.append(this.a5);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a6:");
    sb.append(this.a6);
    first = false;
    if (isSetA7()) {
      if (!first) sb.append(", ");
      sb.append("a7:");
      sb.append(this.a7);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a8:");
    sb.append(this.a8);
    first = false;
    if (isSetA9()) {
      if (!first) sb.append(", ");
      sb.append("a9:");
      sb.append(this.a9);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a10:");
    sb.append(this.a10);
    first = false;
    if (isSetA11()) {
      if (!first) sb.append(", ");
      sb.append("a11:");
      sb.append(this.a11);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a12:");
    sb.append(this.a12);
    first = false;
    if (isSetA13()) {
      if (!first) sb.append(", ");
      sb.append("a13:");
      sb.append(this.a13);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a14:");
    sb.append(this.a14);
    first = false;
    if (isSetA15()) {
      if (!first) sb.append(", ");
      sb.append("a15:");
      sb.append(this.a15);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a16:");
    sb.append(this.a16);
    first = false;
    if (isSetA17()) {
      if (!first) sb.append(", ");
      sb.append("a17:");
      sb.append(this.a17);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a18:");
    sb.append(this.a18);
    first = false;
    if (isSetA19()) {
      if (!first) sb.append(", ");
      sb.append("a19:");
      sb.append(this.a19);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a20:");
    sb.append(this.a20);
    first = false;
    if (isSetA21()) {
      if (!first) sb.append(", ");
      sb.append("a21:");
      sb.append(this.a21);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a22:");
    sb.append(this.a22);
    first = false;
    if (isSetA23()) {
      if (!first) sb.append(", ");
      sb.append("a23:");
      sb.append(this.a23);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a24:");
    sb.append(this.a24);
    first = false;
    if (isSetA25()) {
      if (!first) sb.append(", ");
      sb.append("a25:");
      sb.append(this.a25);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a26:");
    sb.append(this.a26);
    first = false;
    if (isSetA27()) {
      if (!first) sb.append(", ");
      sb.append("a27:");
      sb.append(this.a27);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a28:");
    sb.append(this.a28);
    first = false;
    if (isSetA29()) {
      if (!first) sb.append(", ");
      sb.append("a29:");
      sb.append(this.a29);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a30:");
    sb.append(this.a30);
    first = false;
    if (isSetA31()) {
      if (!first) sb.append(", ");
      sb.append("a31:");
      sb.append(this.a31);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a32:");
    sb.append(this.a32);
    first = false;
    if (isSetA33()) {
      if (!first) sb.append(", ");
      sb.append("a33:");
      sb.append(this.a33);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a34:");
    sb.append(this.a34);
    first = false;
    if (isSetA35()) {
      if (!first) sb.append(", ");
      sb.append("a35:");
      sb.append(this.a35);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a36:");
    sb.append(this.a36);
    first = false;
    if (isSetA37()) {
      if (!first) sb.append(", ");
      sb.append("a37:");
      sb.append(this.a37);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a38:");
    sb.append(this.a38);
    first = false;
    if (isSetA39()) {
      if (!first) sb.append(", ");
      sb.append("a39:");
      sb.append(this.a39);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a40:");
    sb.append(this.a40);
    first = false;
    if (isSetA41()) {
      if (!first) sb.append(", ");
      sb.append("a41:");
      sb.append(this.a41);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a42:");
    sb.append(this.a42);
    first = false;
    if (isSetA43()) {
      if (!first) sb.append(", ");
      sb.append("a43:");
      sb.append(this.a43);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a44:");
    sb.append(this.a44);
    first = false;
    if (isSetA45()) {
      if (!first) sb.append(", ");
      sb.append("a45:");
      sb.append(this.a45);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a46:");
    sb.append(this.a46);
    first = false;
    if (isSetA47()) {
      if (!first) sb.append(", ");
      sb.append("a47:");
      sb.append(this.a47);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a48:");
    sb.append(this.a48);
    first = false;
    if (isSetA49()) {
      if (!first) sb.append(", ");
      sb.append("a49:");
      sb.append(this.a49);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a50:");
    sb.append(this.a50);
    first = false;
    if (isSetA51()) {
      if (!first) sb.append(", ");
      sb.append("a51:");
      sb.append(this.a51);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a52:");
    sb.append(this.a52);
    first = false;
    if (isSetA53()) {
      if (!first) sb.append(", ");
      sb.append("a53:");
      sb.append(this.a53);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("a54:");
    sb.append(this.a54);
    first = false;
    if (isSetA55()) {
      if (!first) sb.append(", ");
      sb.append("a55:");
      sb.append(this.a55);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'a2' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a4' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a6' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a8' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a10' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a12' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a14' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a16' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a18' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a20' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a22' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a24' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a26' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a28' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a30' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a32' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a34' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a36' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a38' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a40' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a42' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a44' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a46' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a48' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a50' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a52' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'a54' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ManyFields2StandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ManyFields2StandardScheme getScheme() {
      return new ManyFields2StandardScheme();
    }
  }

  private static class ManyFields2StandardScheme extends org.apache.thrift.scheme.StandardScheme<ManyFields2> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, ManyFields2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // A1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a1 = iprot.readDouble();
              struct.setA1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // A2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a2 = iprot.readDouble();
              struct.setA2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // A3
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a3 = iprot.readDouble();
              struct.setA3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // A4
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a4 = iprot.readDouble();
              struct.setA4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // A5
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a5 = iprot.readDouble();
              struct.setA5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // A6
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a6 = iprot.readDouble();
              struct.setA6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // A7
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a7 = iprot.readDouble();
              struct.setA7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // A8
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a8 = iprot.readDouble();
              struct.setA8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // A9
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a9 = iprot.readDouble();
              struct.setA9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // A10
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a10 = iprot.readDouble();
              struct.setA10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // A11
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a11 = iprot.readDouble();
              struct.setA11IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // A12
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a12 = iprot.readDouble();
              struct.setA12IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // A13
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a13 = iprot.readDouble();
              struct.setA13IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // A14
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a14 = iprot.readDouble();
              struct.setA14IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // A15
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a15 = iprot.readDouble();
              struct.setA15IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // A16
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a16 = iprot.readDouble();
              struct.setA16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // A17
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a17 = iprot.readDouble();
              struct.setA17IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // A18
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a18 = iprot.readDouble();
              struct.setA18IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // A19
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a19 = iprot.readDouble();
              struct.setA19IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // A20
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a20 = iprot.readDouble();
              struct.setA20IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // A21
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a21 = iprot.readDouble();
              struct.setA21IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // A22
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a22 = iprot.readDouble();
              struct.setA22IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // A23
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a23 = iprot.readDouble();
              struct.setA23IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // A24
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a24 = iprot.readDouble();
              struct.setA24IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // A25
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a25 = iprot.readDouble();
              struct.setA25IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // A26
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a26 = iprot.readDouble();
              struct.setA26IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // A27
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a27 = iprot.readDouble();
              struct.setA27IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // A28
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a28 = iprot.readDouble();
              struct.setA28IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // A29
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a29 = iprot.readDouble();
              struct.setA29IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // A30
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a30 = iprot.readDouble();
              struct.setA30IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // A31
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a31 = iprot.readDouble();
              struct.setA31IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // A32
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a32 = iprot.readDouble();
              struct.setA32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // A33
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a33 = iprot.readDouble();
              struct.setA33IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // A34
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a34 = iprot.readDouble();
              struct.setA34IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // A35
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a35 = iprot.readDouble();
              struct.setA35IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // A36
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a36 = iprot.readDouble();
              struct.setA36IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // A37
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a37 = iprot.readDouble();
              struct.setA37IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // A38
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a38 = iprot.readDouble();
              struct.setA38IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // A39
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a39 = iprot.readDouble();
              struct.setA39IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // A40
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a40 = iprot.readDouble();
              struct.setA40IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // A41
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a41 = iprot.readDouble();
              struct.setA41IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // A42
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a42 = iprot.readDouble();
              struct.setA42IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // A43
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a43 = iprot.readDouble();
              struct.setA43IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // A44
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a44 = iprot.readDouble();
              struct.setA44IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // A45
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a45 = iprot.readDouble();
              struct.setA45IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // A46
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a46 = iprot.readDouble();
              struct.setA46IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // A47
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a47 = iprot.readDouble();
              struct.setA47IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // A48
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a48 = iprot.readDouble();
              struct.setA48IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // A49
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a49 = iprot.readDouble();
              struct.setA49IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // A50
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a50 = iprot.readDouble();
              struct.setA50IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // A51
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a51 = iprot.readDouble();
              struct.setA51IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // A52
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a52 = iprot.readDouble();
              struct.setA52IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // A53
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a53 = iprot.readDouble();
              struct.setA53IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // A54
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a54 = iprot.readDouble();
              struct.setA54IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // A55
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.a55 = iprot.readDouble();
              struct.setA55IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetA2()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a2' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA4()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a4' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA6()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a6' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA8()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a8' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA10()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a10' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA12()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a12' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA14()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a14' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA16()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a16' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA18()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a18' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA20()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a20' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA22()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a22' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA24()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a24' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA26()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a26' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA28()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a28' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA30()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a30' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA32()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a32' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA34()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a34' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA36()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a36' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA38()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a38' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA40()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a40' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA42()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a42' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA44()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a44' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA46()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a46' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA48()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a48' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA50()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a50' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA52()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a52' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetA54()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'a54' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, ManyFields2 struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetA1()) {
        oprot.writeFieldBegin(A1_FIELD_DESC);
        oprot.writeDouble(struct.a1);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A2_FIELD_DESC);
      oprot.writeDouble(struct.a2);
      oprot.writeFieldEnd();
      if (struct.isSetA3()) {
        oprot.writeFieldBegin(A3_FIELD_DESC);
        oprot.writeDouble(struct.a3);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A4_FIELD_DESC);
      oprot.writeDouble(struct.a4);
      oprot.writeFieldEnd();
      if (struct.isSetA5()) {
        oprot.writeFieldBegin(A5_FIELD_DESC);
        oprot.writeDouble(struct.a5);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A6_FIELD_DESC);
      oprot.writeDouble(struct.a6);
      oprot.writeFieldEnd();
      if (struct.isSetA7()) {
        oprot.writeFieldBegin(A7_FIELD_DESC);
        oprot.writeDouble(struct.a7);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A8_FIELD_DESC);
      oprot.writeDouble(struct.a8);
      oprot.writeFieldEnd();
      if (struct.isSetA9()) {
        oprot.writeFieldBegin(A9_FIELD_DESC);
        oprot.writeDouble(struct.a9);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A10_FIELD_DESC);
      oprot.writeDouble(struct.a10);
      oprot.writeFieldEnd();
      if (struct.isSetA11()) {
        oprot.writeFieldBegin(A11_FIELD_DESC);
        oprot.writeDouble(struct.a11);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A12_FIELD_DESC);
      oprot.writeDouble(struct.a12);
      oprot.writeFieldEnd();
      if (struct.isSetA13()) {
        oprot.writeFieldBegin(A13_FIELD_DESC);
        oprot.writeDouble(struct.a13);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A14_FIELD_DESC);
      oprot.writeDouble(struct.a14);
      oprot.writeFieldEnd();
      if (struct.isSetA15()) {
        oprot.writeFieldBegin(A15_FIELD_DESC);
        oprot.writeDouble(struct.a15);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A16_FIELD_DESC);
      oprot.writeDouble(struct.a16);
      oprot.writeFieldEnd();
      if (struct.isSetA17()) {
        oprot.writeFieldBegin(A17_FIELD_DESC);
        oprot.writeDouble(struct.a17);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A18_FIELD_DESC);
      oprot.writeDouble(struct.a18);
      oprot.writeFieldEnd();
      if (struct.isSetA19()) {
        oprot.writeFieldBegin(A19_FIELD_DESC);
        oprot.writeDouble(struct.a19);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A20_FIELD_DESC);
      oprot.writeDouble(struct.a20);
      oprot.writeFieldEnd();
      if (struct.isSetA21()) {
        oprot.writeFieldBegin(A21_FIELD_DESC);
        oprot.writeDouble(struct.a21);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A22_FIELD_DESC);
      oprot.writeDouble(struct.a22);
      oprot.writeFieldEnd();
      if (struct.isSetA23()) {
        oprot.writeFieldBegin(A23_FIELD_DESC);
        oprot.writeDouble(struct.a23);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A24_FIELD_DESC);
      oprot.writeDouble(struct.a24);
      oprot.writeFieldEnd();
      if (struct.isSetA25()) {
        oprot.writeFieldBegin(A25_FIELD_DESC);
        oprot.writeDouble(struct.a25);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A26_FIELD_DESC);
      oprot.writeDouble(struct.a26);
      oprot.writeFieldEnd();
      if (struct.isSetA27()) {
        oprot.writeFieldBegin(A27_FIELD_DESC);
        oprot.writeDouble(struct.a27);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A28_FIELD_DESC);
      oprot.writeDouble(struct.a28);
      oprot.writeFieldEnd();
      if (struct.isSetA29()) {
        oprot.writeFieldBegin(A29_FIELD_DESC);
        oprot.writeDouble(struct.a29);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A30_FIELD_DESC);
      oprot.writeDouble(struct.a30);
      oprot.writeFieldEnd();
      if (struct.isSetA31()) {
        oprot.writeFieldBegin(A31_FIELD_DESC);
        oprot.writeDouble(struct.a31);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A32_FIELD_DESC);
      oprot.writeDouble(struct.a32);
      oprot.writeFieldEnd();
      if (struct.isSetA33()) {
        oprot.writeFieldBegin(A33_FIELD_DESC);
        oprot.writeDouble(struct.a33);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A34_FIELD_DESC);
      oprot.writeDouble(struct.a34);
      oprot.writeFieldEnd();
      if (struct.isSetA35()) {
        oprot.writeFieldBegin(A35_FIELD_DESC);
        oprot.writeDouble(struct.a35);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A36_FIELD_DESC);
      oprot.writeDouble(struct.a36);
      oprot.writeFieldEnd();
      if (struct.isSetA37()) {
        oprot.writeFieldBegin(A37_FIELD_DESC);
        oprot.writeDouble(struct.a37);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A38_FIELD_DESC);
      oprot.writeDouble(struct.a38);
      oprot.writeFieldEnd();
      if (struct.isSetA39()) {
        oprot.writeFieldBegin(A39_FIELD_DESC);
        oprot.writeDouble(struct.a39);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A40_FIELD_DESC);
      oprot.writeDouble(struct.a40);
      oprot.writeFieldEnd();
      if (struct.isSetA41()) {
        oprot.writeFieldBegin(A41_FIELD_DESC);
        oprot.writeDouble(struct.a41);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A42_FIELD_DESC);
      oprot.writeDouble(struct.a42);
      oprot.writeFieldEnd();
      if (struct.isSetA43()) {
        oprot.writeFieldBegin(A43_FIELD_DESC);
        oprot.writeDouble(struct.a43);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A44_FIELD_DESC);
      oprot.writeDouble(struct.a44);
      oprot.writeFieldEnd();
      if (struct.isSetA45()) {
        oprot.writeFieldBegin(A45_FIELD_DESC);
        oprot.writeDouble(struct.a45);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A46_FIELD_DESC);
      oprot.writeDouble(struct.a46);
      oprot.writeFieldEnd();
      if (struct.isSetA47()) {
        oprot.writeFieldBegin(A47_FIELD_DESC);
        oprot.writeDouble(struct.a47);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A48_FIELD_DESC);
      oprot.writeDouble(struct.a48);
      oprot.writeFieldEnd();
      if (struct.isSetA49()) {
        oprot.writeFieldBegin(A49_FIELD_DESC);
        oprot.writeDouble(struct.a49);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A50_FIELD_DESC);
      oprot.writeDouble(struct.a50);
      oprot.writeFieldEnd();
      if (struct.isSetA51()) {
        oprot.writeFieldBegin(A51_FIELD_DESC);
        oprot.writeDouble(struct.a51);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A52_FIELD_DESC);
      oprot.writeDouble(struct.a52);
      oprot.writeFieldEnd();
      if (struct.isSetA53()) {
        oprot.writeFieldBegin(A53_FIELD_DESC);
        oprot.writeDouble(struct.a53);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A54_FIELD_DESC);
      oprot.writeDouble(struct.a54);
      oprot.writeFieldEnd();
      if (struct.isSetA55()) {
        oprot.writeFieldBegin(A55_FIELD_DESC);
        oprot.writeDouble(struct.a55);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ManyFields2TupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public ManyFields2TupleScheme getScheme() {
      return new ManyFields2TupleScheme();
    }
  }

  private static class ManyFields2TupleScheme extends org.apache.thrift.scheme.TupleScheme<ManyFields2> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ManyFields2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeDouble(struct.a2);
      oprot.writeDouble(struct.a4);
      oprot.writeDouble(struct.a6);
      oprot.writeDouble(struct.a8);
      oprot.writeDouble(struct.a10);
      oprot.writeDouble(struct.a12);
      oprot.writeDouble(struct.a14);
      oprot.writeDouble(struct.a16);
      oprot.writeDouble(struct.a18);
      oprot.writeDouble(struct.a20);
      oprot.writeDouble(struct.a22);
      oprot.writeDouble(struct.a24);
      oprot.writeDouble(struct.a26);
      oprot.writeDouble(struct.a28);
      oprot.writeDouble(struct.a30);
      oprot.writeDouble(struct.a32);
      oprot.writeDouble(struct.a34);
      oprot.writeDouble(struct.a36);
      oprot.writeDouble(struct.a38);
      oprot.writeDouble(struct.a40);
      oprot.writeDouble(struct.a42);
      oprot.writeDouble(struct.a44);
      oprot.writeDouble(struct.a46);
      oprot.writeDouble(struct.a48);
      oprot.writeDouble(struct.a50);
      oprot.writeDouble(struct.a52);
      oprot.writeDouble(struct.a54);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetA1()) {
        optionals.set(0);
      }
      if (struct.isSetA3()) {
        optionals.set(1);
      }
      if (struct.isSetA5()) {
        optionals.set(2);
      }
      if (struct.isSetA7()) {
        optionals.set(3);
      }
      if (struct.isSetA9()) {
        optionals.set(4);
      }
      if (struct.isSetA11()) {
        optionals.set(5);
      }
      if (struct.isSetA13()) {
        optionals.set(6);
      }
      if (struct.isSetA15()) {
        optionals.set(7);
      }
      if (struct.isSetA17()) {
        optionals.set(8);
      }
      if (struct.isSetA19()) {
        optionals.set(9);
      }
      if (struct.isSetA21()) {
        optionals.set(10);
      }
      if (struct.isSetA23()) {
        optionals.set(11);
      }
      if (struct.isSetA25()) {
        optionals.set(12);
      }
      if (struct.isSetA27()) {
        optionals.set(13);
      }
      if (struct.isSetA29()) {
        optionals.set(14);
      }
      if (struct.isSetA31()) {
        optionals.set(15);
      }
      if (struct.isSetA33()) {
        optionals.set(16);
      }
      if (struct.isSetA35()) {
        optionals.set(17);
      }
      if (struct.isSetA37()) {
        optionals.set(18);
      }
      if (struct.isSetA39()) {
        optionals.set(19);
      }
      if (struct.isSetA41()) {
        optionals.set(20);
      }
      if (struct.isSetA43()) {
        optionals.set(21);
      }
      if (struct.isSetA45()) {
        optionals.set(22);
      }
      if (struct.isSetA47()) {
        optionals.set(23);
      }
      if (struct.isSetA49()) {
        optionals.set(24);
      }
      if (struct.isSetA51()) {
        optionals.set(25);
      }
      if (struct.isSetA53()) {
        optionals.set(26);
      }
      if (struct.isSetA55()) {
        optionals.set(27);
      }
      oprot.writeBitSet(optionals, 28);
      if (struct.isSetA1()) {
        oprot.writeDouble(struct.a1);
      }
      if (struct.isSetA3()) {
        oprot.writeDouble(struct.a3);
      }
      if (struct.isSetA5()) {
        oprot.writeDouble(struct.a5);
      }
      if (struct.isSetA7()) {
        oprot.writeDouble(struct.a7);
      }
      if (struct.isSetA9()) {
        oprot.writeDouble(struct.a9);
      }
      if (struct.isSetA11()) {
        oprot.writeDouble(struct.a11);
      }
      if (struct.isSetA13()) {
        oprot.writeDouble(struct.a13);
      }
      if (struct.isSetA15()) {
        oprot.writeDouble(struct.a15);
      }
      if (struct.isSetA17()) {
        oprot.writeDouble(struct.a17);
      }
      if (struct.isSetA19()) {
        oprot.writeDouble(struct.a19);
      }
      if (struct.isSetA21()) {
        oprot.writeDouble(struct.a21);
      }
      if (struct.isSetA23()) {
        oprot.writeDouble(struct.a23);
      }
      if (struct.isSetA25()) {
        oprot.writeDouble(struct.a25);
      }
      if (struct.isSetA27()) {
        oprot.writeDouble(struct.a27);
      }
      if (struct.isSetA29()) {
        oprot.writeDouble(struct.a29);
      }
      if (struct.isSetA31()) {
        oprot.writeDouble(struct.a31);
      }
      if (struct.isSetA33()) {
        oprot.writeDouble(struct.a33);
      }
      if (struct.isSetA35()) {
        oprot.writeDouble(struct.a35);
      }
      if (struct.isSetA37()) {
        oprot.writeDouble(struct.a37);
      }
      if (struct.isSetA39()) {
        oprot.writeDouble(struct.a39);
      }
      if (struct.isSetA41()) {
        oprot.writeDouble(struct.a41);
      }
      if (struct.isSetA43()) {
        oprot.writeDouble(struct.a43);
      }
      if (struct.isSetA45()) {
        oprot.writeDouble(struct.a45);
      }
      if (struct.isSetA47()) {
        oprot.writeDouble(struct.a47);
      }
      if (struct.isSetA49()) {
        oprot.writeDouble(struct.a49);
      }
      if (struct.isSetA51()) {
        oprot.writeDouble(struct.a51);
      }
      if (struct.isSetA53()) {
        oprot.writeDouble(struct.a53);
      }
      if (struct.isSetA55()) {
        oprot.writeDouble(struct.a55);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ManyFields2 struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.a2 = iprot.readDouble();
      struct.setA2IsSet(true);
      struct.a4 = iprot.readDouble();
      struct.setA4IsSet(true);
      struct.a6 = iprot.readDouble();
      struct.setA6IsSet(true);
      struct.a8 = iprot.readDouble();
      struct.setA8IsSet(true);
      struct.a10 = iprot.readDouble();
      struct.setA10IsSet(true);
      struct.a12 = iprot.readDouble();
      struct.setA12IsSet(true);
      struct.a14 = iprot.readDouble();
      struct.setA14IsSet(true);
      struct.a16 = iprot.readDouble();
      struct.setA16IsSet(true);
      struct.a18 = iprot.readDouble();
      struct.setA18IsSet(true);
      struct.a20 = iprot.readDouble();
      struct.setA20IsSet(true);
      struct.a22 = iprot.readDouble();
      struct.setA22IsSet(true);
      struct.a24 = iprot.readDouble();
      struct.setA24IsSet(true);
      struct.a26 = iprot.readDouble();
      struct.setA26IsSet(true);
      struct.a28 = iprot.readDouble();
      struct.setA28IsSet(true);
      struct.a30 = iprot.readDouble();
      struct.setA30IsSet(true);
      struct.a32 = iprot.readDouble();
      struct.setA32IsSet(true);
      struct.a34 = iprot.readDouble();
      struct.setA34IsSet(true);
      struct.a36 = iprot.readDouble();
      struct.setA36IsSet(true);
      struct.a38 = iprot.readDouble();
      struct.setA38IsSet(true);
      struct.a40 = iprot.readDouble();
      struct.setA40IsSet(true);
      struct.a42 = iprot.readDouble();
      struct.setA42IsSet(true);
      struct.a44 = iprot.readDouble();
      struct.setA44IsSet(true);
      struct.a46 = iprot.readDouble();
      struct.setA46IsSet(true);
      struct.a48 = iprot.readDouble();
      struct.setA48IsSet(true);
      struct.a50 = iprot.readDouble();
      struct.setA50IsSet(true);
      struct.a52 = iprot.readDouble();
      struct.setA52IsSet(true);
      struct.a54 = iprot.readDouble();
      struct.setA54IsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(28);
      if (incoming.get(0)) {
        struct.a1 = iprot.readDouble();
        struct.setA1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.a3 = iprot.readDouble();
        struct.setA3IsSet(true);
      }
      if (incoming.get(2)) {
        struct.a5 = iprot.readDouble();
        struct.setA5IsSet(true);
      }
      if (incoming.get(3)) {
        struct.a7 = iprot.readDouble();
        struct.setA7IsSet(true);
      }
      if (incoming.get(4)) {
        struct.a9 = iprot.readDouble();
        struct.setA9IsSet(true);
      }
      if (incoming.get(5)) {
        struct.a11 = iprot.readDouble();
        struct.setA11IsSet(true);
      }
      if (incoming.get(6)) {
        struct.a13 = iprot.readDouble();
        struct.setA13IsSet(true);
      }
      if (incoming.get(7)) {
        struct.a15 = iprot.readDouble();
        struct.setA15IsSet(true);
      }
      if (incoming.get(8)) {
        struct.a17 = iprot.readDouble();
        struct.setA17IsSet(true);
      }
      if (incoming.get(9)) {
        struct.a19 = iprot.readDouble();
        struct.setA19IsSet(true);
      }
      if (incoming.get(10)) {
        struct.a21 = iprot.readDouble();
        struct.setA21IsSet(true);
      }
      if (incoming.get(11)) {
        struct.a23 = iprot.readDouble();
        struct.setA23IsSet(true);
      }
      if (incoming.get(12)) {
        struct.a25 = iprot.readDouble();
        struct.setA25IsSet(true);
      }
      if (incoming.get(13)) {
        struct.a27 = iprot.readDouble();
        struct.setA27IsSet(true);
      }
      if (incoming.get(14)) {
        struct.a29 = iprot.readDouble();
        struct.setA29IsSet(true);
      }
      if (incoming.get(15)) {
        struct.a31 = iprot.readDouble();
        struct.setA31IsSet(true);
      }
      if (incoming.get(16)) {
        struct.a33 = iprot.readDouble();
        struct.setA33IsSet(true);
      }
      if (incoming.get(17)) {
        struct.a35 = iprot.readDouble();
        struct.setA35IsSet(true);
      }
      if (incoming.get(18)) {
        struct.a37 = iprot.readDouble();
        struct.setA37IsSet(true);
      }
      if (incoming.get(19)) {
        struct.a39 = iprot.readDouble();
        struct.setA39IsSet(true);
      }
      if (incoming.get(20)) {
        struct.a41 = iprot.readDouble();
        struct.setA41IsSet(true);
      }
      if (incoming.get(21)) {
        struct.a43 = iprot.readDouble();
        struct.setA43IsSet(true);
      }
      if (incoming.get(22)) {
        struct.a45 = iprot.readDouble();
        struct.setA45IsSet(true);
      }
      if (incoming.get(23)) {
        struct.a47 = iprot.readDouble();
        struct.setA47IsSet(true);
      }
      if (incoming.get(24)) {
        struct.a49 = iprot.readDouble();
        struct.setA49IsSet(true);
      }
      if (incoming.get(25)) {
        struct.a51 = iprot.readDouble();
        struct.setA51IsSet(true);
      }
      if (incoming.get(26)) {
        struct.a53 = iprot.readDouble();
        struct.setA53IsSet(true);
      }
      if (incoming.get(27)) {
        struct.a55 = iprot.readDouble();
        struct.setA55IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

