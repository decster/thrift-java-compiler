/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TExchangeNode implements org.apache.thrift.TBase<TExchangeNode, TExchangeNode._Fields>, java.io.Serializable, Cloneable, Comparable<TExchangeNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExchangeNode");

  private static final org.apache.thrift.protocol.TField INPUT_ROW_TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("input_row_tuples", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SORT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_info", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ENABLE_PARALLEL_MERGE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_parallel_merge", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField PARALLEL_MERGE_LATE_MATERIALIZE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("parallel_merge_late_materialize_mode", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TExchangeNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TExchangeNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> input_row_tuples; // required
  public @org.apache.thrift.annotation.Nullable TSortInfo sort_info; // optional
  public long offset; // optional
  /**
   * 
   * @see com.starrocks.thrift.TPartitionType
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TPartitionType partition_type; // optional
  public boolean enable_parallel_merge; // optional
  /**
   * 
   * @see TLateMaterializeMode
   */
  public @org.apache.thrift.annotation.Nullable TLateMaterializeMode parallel_merge_late_materialize_mode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INPUT_ROW_TUPLES((short)1, "input_row_tuples"),
    SORT_INFO((short)2, "sort_info"),
    OFFSET((short)3, "offset"),
    /**
     * 
     * @see com.starrocks.thrift.TPartitionType
     */
    PARTITION_TYPE((short)4, "partition_type"),
    ENABLE_PARALLEL_MERGE((short)5, "enable_parallel_merge"),
    /**
     * 
     * @see TLateMaterializeMode
     */
    PARALLEL_MERGE_LATE_MATERIALIZE_MODE((short)6, "parallel_merge_late_materialize_mode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INPUT_ROW_TUPLES
          return INPUT_ROW_TUPLES;
        case 2: // SORT_INFO
          return SORT_INFO;
        case 3: // OFFSET
          return OFFSET;
        case 4: // PARTITION_TYPE
          return PARTITION_TYPE;
        case 5: // ENABLE_PARALLEL_MERGE
          return ENABLE_PARALLEL_MERGE;
        case 6: // PARALLEL_MERGE_LATE_MATERIALIZE_MODE
          return PARALLEL_MERGE_LATE_MATERIALIZE_MODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OFFSET_ISSET_ID = 0;
  private static final int __ENABLE_PARALLEL_MERGE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SORT_INFO,_Fields.OFFSET,_Fields.PARTITION_TYPE,_Fields.ENABLE_PARALLEL_MERGE,_Fields.PARALLEL_MERGE_LATE_MATERIALIZE_MODE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INPUT_ROW_TUPLES, new org.apache.thrift.meta_data.FieldMetaData("input_row_tuples", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TTupleId"))));
    tmpMap.put(_Fields.SORT_INFO, new org.apache.thrift.meta_data.FieldMetaData("sort_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSortInfo.class)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("partition_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TPartitionType.class)));
    tmpMap.put(_Fields.ENABLE_PARALLEL_MERGE, new org.apache.thrift.meta_data.FieldMetaData("enable_parallel_merge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PARALLEL_MERGE_LATE_MATERIALIZE_MODE, new org.apache.thrift.meta_data.FieldMetaData("parallel_merge_late_materialize_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TLateMaterializeMode.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExchangeNode.class, metaDataMap);
  }

  public TExchangeNode() {
  }

  public TExchangeNode(
    java.util.List<java.lang.Integer> input_row_tuples)
  {
    this();
    this.input_row_tuples = input_row_tuples;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExchangeNode(TExchangeNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInput_row_tuples()) {
      java.util.List<java.lang.Integer> __this__input_row_tuples = new java.util.ArrayList<java.lang.Integer>(other.input_row_tuples.size());
      for (java.lang.Integer other_element : other.input_row_tuples) {
        __this__input_row_tuples.add(other_element);
      }
      this.input_row_tuples = __this__input_row_tuples;
    }
    if (other.isSetSort_info()) {
      this.sort_info = new TSortInfo(other.sort_info);
    }
    this.offset = other.offset;
    if (other.isSetPartition_type()) {
      this.partition_type = other.partition_type;
    }
    this.enable_parallel_merge = other.enable_parallel_merge;
    if (other.isSetParallel_merge_late_materialize_mode()) {
      this.parallel_merge_late_materialize_mode = other.parallel_merge_late_materialize_mode;
    }
  }

  @Override
  public TExchangeNode deepCopy() {
    return new TExchangeNode(this);
  }

  @Override
  public void clear() {
    this.input_row_tuples = null;
    this.sort_info = null;
    setOffsetIsSet(false);
    this.offset = 0;
    this.partition_type = null;
    setEnable_parallel_mergeIsSet(false);
    this.enable_parallel_merge = false;
    this.parallel_merge_late_materialize_mode = null;
  }

  public int getInput_row_tuplesSize() {
    return (this.input_row_tuples == null) ? 0 : this.input_row_tuples.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getInput_row_tuplesIterator() {
    return (this.input_row_tuples == null) ? null : this.input_row_tuples.iterator();
  }

  public void addToInput_row_tuples(int elem) {
    if (this.input_row_tuples == null) {
      this.input_row_tuples = new java.util.ArrayList<java.lang.Integer>();
    }
    this.input_row_tuples.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getInput_row_tuples() {
    return this.input_row_tuples;
  }

  public TExchangeNode setInput_row_tuples(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> input_row_tuples) {
    this.input_row_tuples = input_row_tuples;
    return this;
  }

  public void unsetInput_row_tuples() {
    this.input_row_tuples = null;
  }

  /** Returns true if field input_row_tuples is set (has been assigned a value) and false otherwise */
  public boolean isSetInput_row_tuples() {
    return this.input_row_tuples != null;
  }

  public void setInput_row_tuplesIsSet(boolean value) {
    if (!value) {
      this.input_row_tuples = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TSortInfo getSort_info() {
    return this.sort_info;
  }

  public TExchangeNode setSort_info(@org.apache.thrift.annotation.Nullable TSortInfo sort_info) {
    this.sort_info = sort_info;
    return this;
  }

  public void unsetSort_info() {
    this.sort_info = null;
  }

  /** Returns true if field sort_info is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_info() {
    return this.sort_info != null;
  }

  public void setSort_infoIsSet(boolean value) {
    if (!value) {
      this.sort_info = null;
    }
  }

  public long getOffset() {
    return this.offset;
  }

  public TExchangeNode setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  /**
   * 
   * @see com.starrocks.thrift.TPartitionType
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TPartitionType getPartition_type() {
    return this.partition_type;
  }

  /**
   * 
   * @see com.starrocks.thrift.TPartitionType
   */
  public TExchangeNode setPartition_type(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TPartitionType partition_type) {
    this.partition_type = partition_type;
    return this;
  }

  public void unsetPartition_type() {
    this.partition_type = null;
  }

  /** Returns true if field partition_type is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_type() {
    return this.partition_type != null;
  }

  public void setPartition_typeIsSet(boolean value) {
    if (!value) {
      this.partition_type = null;
    }
  }

  public boolean isEnable_parallel_merge() {
    return this.enable_parallel_merge;
  }

  public TExchangeNode setEnable_parallel_merge(boolean enable_parallel_merge) {
    this.enable_parallel_merge = enable_parallel_merge;
    setEnable_parallel_mergeIsSet(true);
    return this;
  }

  public void unsetEnable_parallel_merge() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_PARALLEL_MERGE_ISSET_ID);
  }

  /** Returns true if field enable_parallel_merge is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_parallel_merge() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_PARALLEL_MERGE_ISSET_ID);
  }

  public void setEnable_parallel_mergeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_PARALLEL_MERGE_ISSET_ID, value);
  }

  /**
   * 
   * @see TLateMaterializeMode
   */
  @org.apache.thrift.annotation.Nullable
  public TLateMaterializeMode getParallel_merge_late_materialize_mode() {
    return this.parallel_merge_late_materialize_mode;
  }

  /**
   * 
   * @see TLateMaterializeMode
   */
  public TExchangeNode setParallel_merge_late_materialize_mode(@org.apache.thrift.annotation.Nullable TLateMaterializeMode parallel_merge_late_materialize_mode) {
    this.parallel_merge_late_materialize_mode = parallel_merge_late_materialize_mode;
    return this;
  }

  public void unsetParallel_merge_late_materialize_mode() {
    this.parallel_merge_late_materialize_mode = null;
  }

  /** Returns true if field parallel_merge_late_materialize_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetParallel_merge_late_materialize_mode() {
    return this.parallel_merge_late_materialize_mode != null;
  }

  public void setParallel_merge_late_materialize_modeIsSet(boolean value) {
    if (!value) {
      this.parallel_merge_late_materialize_mode = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case INPUT_ROW_TUPLES:
      if (value == null) {
        unsetInput_row_tuples();
      } else {
        setInput_row_tuples((java.util.List<java.lang.Integer>)value);
      }
      break;

    case SORT_INFO:
      if (value == null) {
        unsetSort_info();
      } else {
        setSort_info((TSortInfo)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((java.lang.Long)value);
      }
      break;

    case PARTITION_TYPE:
      if (value == null) {
        unsetPartition_type();
      } else {
        setPartition_type((com.starrocks.thrift.TPartitionType)value);
      }
      break;

    case ENABLE_PARALLEL_MERGE:
      if (value == null) {
        unsetEnable_parallel_merge();
      } else {
        setEnable_parallel_merge((java.lang.Boolean)value);
      }
      break;

    case PARALLEL_MERGE_LATE_MATERIALIZE_MODE:
      if (value == null) {
        unsetParallel_merge_late_materialize_mode();
      } else {
        setParallel_merge_late_materialize_mode((TLateMaterializeMode)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case INPUT_ROW_TUPLES:
      return getInput_row_tuples();

    case SORT_INFO:
      return getSort_info();

    case OFFSET:
      return getOffset();

    case PARTITION_TYPE:
      return getPartition_type();

    case ENABLE_PARALLEL_MERGE:
      return isEnable_parallel_merge();

    case PARALLEL_MERGE_LATE_MATERIALIZE_MODE:
      return getParallel_merge_late_materialize_mode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case INPUT_ROW_TUPLES:
      return isSetInput_row_tuples();
    case SORT_INFO:
      return isSetSort_info();
    case OFFSET:
      return isSetOffset();
    case PARTITION_TYPE:
      return isSetPartition_type();
    case ENABLE_PARALLEL_MERGE:
      return isSetEnable_parallel_merge();
    case PARALLEL_MERGE_LATE_MATERIALIZE_MODE:
      return isSetParallel_merge_late_materialize_mode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TExchangeNode)
      return this.equals((TExchangeNode)that);
    return false;
  }

  public boolean equals(TExchangeNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_input_row_tuples = true && this.isSetInput_row_tuples();
    boolean that_present_input_row_tuples = true && that.isSetInput_row_tuples();
    if (this_present_input_row_tuples || that_present_input_row_tuples) {
      if (!(this_present_input_row_tuples && that_present_input_row_tuples))
        return false;
      if (!this.input_row_tuples.equals(that.input_row_tuples))
        return false;
    }

    boolean this_present_sort_info = true && this.isSetSort_info();
    boolean that_present_sort_info = true && that.isSetSort_info();
    if (this_present_sort_info || that_present_sort_info) {
      if (!(this_present_sort_info && that_present_sort_info))
        return false;
      if (!this.sort_info.equals(that.sort_info))
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_partition_type = true && this.isSetPartition_type();
    boolean that_present_partition_type = true && that.isSetPartition_type();
    if (this_present_partition_type || that_present_partition_type) {
      if (!(this_present_partition_type && that_present_partition_type))
        return false;
      if (!this.partition_type.equals(that.partition_type))
        return false;
    }

    boolean this_present_enable_parallel_merge = true && this.isSetEnable_parallel_merge();
    boolean that_present_enable_parallel_merge = true && that.isSetEnable_parallel_merge();
    if (this_present_enable_parallel_merge || that_present_enable_parallel_merge) {
      if (!(this_present_enable_parallel_merge && that_present_enable_parallel_merge))
        return false;
      if (this.enable_parallel_merge != that.enable_parallel_merge)
        return false;
    }

    boolean this_present_parallel_merge_late_materialize_mode = true && this.isSetParallel_merge_late_materialize_mode();
    boolean that_present_parallel_merge_late_materialize_mode = true && that.isSetParallel_merge_late_materialize_mode();
    if (this_present_parallel_merge_late_materialize_mode || that_present_parallel_merge_late_materialize_mode) {
      if (!(this_present_parallel_merge_late_materialize_mode && that_present_parallel_merge_late_materialize_mode))
        return false;
      if (!this.parallel_merge_late_materialize_mode.equals(that.parallel_merge_late_materialize_mode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetInput_row_tuples()) ? 131071 : 524287);
    if (isSetInput_row_tuples())
      hashCode = hashCode * 8191 + input_row_tuples.hashCode();

    hashCode = hashCode * 8191 + ((isSetSort_info()) ? 131071 : 524287);
    if (isSetSort_info())
      hashCode = hashCode * 8191 + sort_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetOffset()) ? 131071 : 524287);
    if (isSetOffset())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(offset);

    hashCode = hashCode * 8191 + ((isSetPartition_type()) ? 131071 : 524287);
    if (isSetPartition_type())
      hashCode = hashCode * 8191 + partition_type.getValue();

    hashCode = hashCode * 8191 + ((isSetEnable_parallel_merge()) ? 131071 : 524287);
    if (isSetEnable_parallel_merge())
      hashCode = hashCode * 8191 + ((enable_parallel_merge) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetParallel_merge_late_materialize_mode()) ? 131071 : 524287);
    if (isSetParallel_merge_late_materialize_mode())
      hashCode = hashCode * 8191 + parallel_merge_late_materialize_mode.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TExchangeNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetInput_row_tuples(), other.isSetInput_row_tuples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInput_row_tuples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input_row_tuples, other.input_row_tuples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_info(), other.isSetSort_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_info, other.sort_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOffset(), other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_type(), other.isSetPartition_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_type, other.partition_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_parallel_merge(), other.isSetEnable_parallel_merge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_parallel_merge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_parallel_merge, other.enable_parallel_merge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetParallel_merge_late_materialize_mode(), other.isSetParallel_merge_late_materialize_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParallel_merge_late_materialize_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parallel_merge_late_materialize_mode, other.parallel_merge_late_materialize_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TExchangeNode(");
    boolean first = true;

    sb.append("input_row_tuples:");
    if (this.input_row_tuples == null) {
      sb.append("null");
    } else {
      sb.append(this.input_row_tuples);
    }
    first = false;
    if (isSetSort_info()) {
      if (!first) sb.append(", ");
      sb.append("sort_info:");
      if (this.sort_info == null) {
        sb.append("null");
      } else {
        sb.append(this.sort_info);
      }
      first = false;
    }
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetPartition_type()) {
      if (!first) sb.append(", ");
      sb.append("partition_type:");
      if (this.partition_type == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_type);
      }
      first = false;
    }
    if (isSetEnable_parallel_merge()) {
      if (!first) sb.append(", ");
      sb.append("enable_parallel_merge:");
      sb.append(this.enable_parallel_merge);
      first = false;
    }
    if (isSetParallel_merge_late_materialize_mode()) {
      if (!first) sb.append(", ");
      sb.append("parallel_merge_late_materialize_mode:");
      if (this.parallel_merge_late_materialize_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.parallel_merge_late_materialize_mode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (input_row_tuples == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'input_row_tuples' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (sort_info != null) {
      sort_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExchangeNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExchangeNodeStandardScheme getScheme() {
      return new TExchangeNodeStandardScheme();
    }
  }

  private static class TExchangeNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TExchangeNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TExchangeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INPUT_ROW_TUPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list842 = iprot.readListBegin();
                struct.input_row_tuples = new java.util.ArrayList<java.lang.Integer>(_list842.size);
                int _elem843;
                for (int _i844 = 0; _i844 < _list842.size; ++_i844)
                {
                  _elem843 = iprot.readI32();
                  struct.input_row_tuples.add(_elem843);
                }
                iprot.readListEnd();
              }
              struct.setInput_row_tuplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SORT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sort_info = new TSortInfo();
              struct.sort_info.read(iprot);
              struct.setSort_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partition_type = com.starrocks.thrift.TPartitionType.findByValue(iprot.readI32());
              struct.setPartition_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENABLE_PARALLEL_MERGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_parallel_merge = iprot.readBool();
              struct.setEnable_parallel_mergeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARALLEL_MERGE_LATE_MATERIALIZE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parallel_merge_late_materialize_mode = com.starrocks.thrift.TLateMaterializeMode.findByValue(iprot.readI32());
              struct.setParallel_merge_late_materialize_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TExchangeNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.input_row_tuples != null) {
        oprot.writeFieldBegin(INPUT_ROW_TUPLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.input_row_tuples.size()));
          for (int _iter845 : struct.input_row_tuples)
          {
            oprot.writeI32(_iter845);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sort_info != null) {
        if (struct.isSetSort_info()) {
          oprot.writeFieldBegin(SORT_INFO_FIELD_DESC);
          struct.sort_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI64(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.partition_type != null) {
        if (struct.isSetPartition_type()) {
          oprot.writeFieldBegin(PARTITION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.partition_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_parallel_merge()) {
        oprot.writeFieldBegin(ENABLE_PARALLEL_MERGE_FIELD_DESC);
        oprot.writeBool(struct.enable_parallel_merge);
        oprot.writeFieldEnd();
      }
      if (struct.parallel_merge_late_materialize_mode != null) {
        if (struct.isSetParallel_merge_late_materialize_mode()) {
          oprot.writeFieldBegin(PARALLEL_MERGE_LATE_MATERIALIZE_MODE_FIELD_DESC);
          oprot.writeI32(struct.parallel_merge_late_materialize_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExchangeNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExchangeNodeTupleScheme getScheme() {
      return new TExchangeNodeTupleScheme();
    }
  }

  private static class TExchangeNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TExchangeNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExchangeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.input_row_tuples.size());
        for (int _iter846 : struct.input_row_tuples)
        {
          oprot.writeI32(_iter846);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSort_info()) {
        optionals.set(0);
      }
      if (struct.isSetOffset()) {
        optionals.set(1);
      }
      if (struct.isSetPartition_type()) {
        optionals.set(2);
      }
      if (struct.isSetEnable_parallel_merge()) {
        optionals.set(3);
      }
      if (struct.isSetParallel_merge_late_materialize_mode()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSort_info()) {
        struct.sort_info.write(oprot);
      }
      if (struct.isSetOffset()) {
        oprot.writeI64(struct.offset);
      }
      if (struct.isSetPartition_type()) {
        oprot.writeI32(struct.partition_type.getValue());
      }
      if (struct.isSetEnable_parallel_merge()) {
        oprot.writeBool(struct.enable_parallel_merge);
      }
      if (struct.isSetParallel_merge_late_materialize_mode()) {
        oprot.writeI32(struct.parallel_merge_late_materialize_mode.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExchangeNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list847 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
        struct.input_row_tuples = new java.util.ArrayList<java.lang.Integer>(_list847.size);
        int _elem848;
        for (int _i849 = 0; _i849 < _list847.size; ++_i849)
        {
          _elem848 = iprot.readI32();
          struct.input_row_tuples.add(_elem848);
        }
      }
      struct.setInput_row_tuplesIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.sort_info = new TSortInfo();
        struct.sort_info.read(iprot);
        struct.setSort_infoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.offset = iprot.readI64();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partition_type = com.starrocks.thrift.TPartitionType.findByValue(iprot.readI32());
        struct.setPartition_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.enable_parallel_merge = iprot.readBool();
        struct.setEnable_parallel_mergeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.parallel_merge_late_materialize_mode = com.starrocks.thrift.TLateMaterializeMode.findByValue(iprot.readI32());
        struct.setParallel_merge_late_materialize_modeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

