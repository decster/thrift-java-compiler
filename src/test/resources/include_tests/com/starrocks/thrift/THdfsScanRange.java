/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class THdfsScanRange implements org.apache.thrift.TBase<THdfsScanRange, THdfsScanRange._Fields>, java.io.Serializable, Cloneable, Comparable<THdfsScanRange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THdfsScanRange");

  private static final org.apache.thrift.protocol.TField RELATIVE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("relative_path", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("file_length", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("file_format", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TEXT_FILE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("text_file_desc", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField FULL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("full_path", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField HUDI_LOGS_FIELD_DESC = new org.apache.thrift.protocol.TField("hudi_logs", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField USE_HUDI_JNI_READER_FIELD_DESC = new org.apache.thrift.protocol.TField("use_hudi_jni_reader", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField DELETE_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("delete_files", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField SKIP_HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("skip_header", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField USE_PAIMON_JNI_READER_FIELD_DESC = new org.apache.thrift.protocol.TField("use_paimon_jni_reader", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField PAIMON_SPLIT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("paimon_split_info", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField PAIMON_PREDICATE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("paimon_predicate_info", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField MODIFICATION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("modification_time", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField DATACACHE_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("datacache_options", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField IDENTITY_PARTITION_SLOT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("identity_partition_slot_ids", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField USE_ODPS_JNI_READER_FIELD_DESC = new org.apache.thrift.protocol.TField("use_odps_jni_reader", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField ODPS_SPLIT_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("odps_split_infos", org.apache.thrift.protocol.TType.MAP, (short)20);
  private static final org.apache.thrift.protocol.TField DELETE_COLUMN_SLOT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("delete_column_slot_ids", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField USE_ICEBERG_JNI_METADATA_READER_FIELD_DESC = new org.apache.thrift.protocol.TField("use_iceberg_jni_metadata_reader", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField SERIALIZED_SPLIT_FIELD_DESC = new org.apache.thrift.protocol.TField("serialized_split", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField USE_KUDU_JNI_READER_FIELD_DESC = new org.apache.thrift.protocol.TField("use_kudu_jni_reader", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField KUDU_MASTER_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_master", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField KUDU_SCAN_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("kudu_scan_token", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField PAIMON_DELETION_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("paimon_deletion_file", org.apache.thrift.protocol.TType.STRUCT, (short)27);
  private static final org.apache.thrift.protocol.TField EXTENDED_COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("extended_columns", org.apache.thrift.protocol.TType.MAP, (short)28);
  private static final org.apache.thrift.protocol.TField PARTITION_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_value", org.apache.thrift.protocol.TType.STRUCT, (short)29);
  private static final org.apache.thrift.protocol.TField TABLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("table_id", org.apache.thrift.protocol.TType.I64, (short)30);
  private static final org.apache.thrift.protocol.TField DELETION_VECTOR_DESCRIPTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("deletion_vector_descriptor", org.apache.thrift.protocol.TType.STRUCT, (short)31);
  private static final org.apache.thrift.protocol.TField CANDIDATE_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("candidate_node", org.apache.thrift.protocol.TType.STRING, (short)32);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new THdfsScanRangeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new THdfsScanRangeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String relative_path; // optional
  public long offset; // optional
  public long length; // optional
  public long partition_id; // optional
  public long file_length; // optional
  /**
   * 
   * @see com.starrocks.thrift.THdfsFileFormat
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.THdfsFileFormat file_format; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTextFileDesc text_file_desc; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String full_path; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> hudi_logs; // optional
  public boolean use_hudi_jni_reader; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TIcebergDeleteFile> delete_files; // optional
  public long skip_header; // optional
  public boolean use_paimon_jni_reader; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String paimon_split_info; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String paimon_predicate_info; // optional
  public long modification_time; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TDataCacheOptions datacache_options; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> identity_partition_slot_ids; // optional
  public boolean use_odps_jni_reader; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> odps_split_infos; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> delete_column_slot_ids; // optional
  public boolean use_iceberg_jni_metadata_reader; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String serialized_split; // optional
  public boolean use_kudu_jni_reader; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String kudu_master; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String kudu_scan_token; // optional
  public @org.apache.thrift.annotation.Nullable TPaimonDeletionFile paimon_deletion_file; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> extended_columns; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.THdfsPartition partition_value; // optional
  public long table_id; // optional
  public @org.apache.thrift.annotation.Nullable TDeletionVectorDescriptor deletion_vector_descriptor; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String candidate_node; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RELATIVE_PATH((short)1, "relative_path"),
    OFFSET((short)2, "offset"),
    LENGTH((short)3, "length"),
    PARTITION_ID((short)4, "partition_id"),
    FILE_LENGTH((short)5, "file_length"),
    /**
     * 
     * @see com.starrocks.thrift.THdfsFileFormat
     */
    FILE_FORMAT((short)6, "file_format"),
    TEXT_FILE_DESC((short)7, "text_file_desc"),
    FULL_PATH((short)8, "full_path"),
    HUDI_LOGS((short)9, "hudi_logs"),
    USE_HUDI_JNI_READER((short)10, "use_hudi_jni_reader"),
    DELETE_FILES((short)11, "delete_files"),
    SKIP_HEADER((short)12, "skip_header"),
    USE_PAIMON_JNI_READER((short)13, "use_paimon_jni_reader"),
    PAIMON_SPLIT_INFO((short)14, "paimon_split_info"),
    PAIMON_PREDICATE_INFO((short)15, "paimon_predicate_info"),
    MODIFICATION_TIME((short)16, "modification_time"),
    DATACACHE_OPTIONS((short)17, "datacache_options"),
    IDENTITY_PARTITION_SLOT_IDS((short)18, "identity_partition_slot_ids"),
    USE_ODPS_JNI_READER((short)19, "use_odps_jni_reader"),
    ODPS_SPLIT_INFOS((short)20, "odps_split_infos"),
    DELETE_COLUMN_SLOT_IDS((short)21, "delete_column_slot_ids"),
    USE_ICEBERG_JNI_METADATA_READER((short)22, "use_iceberg_jni_metadata_reader"),
    SERIALIZED_SPLIT((short)23, "serialized_split"),
    USE_KUDU_JNI_READER((short)24, "use_kudu_jni_reader"),
    KUDU_MASTER((short)25, "kudu_master"),
    KUDU_SCAN_TOKEN((short)26, "kudu_scan_token"),
    PAIMON_DELETION_FILE((short)27, "paimon_deletion_file"),
    EXTENDED_COLUMNS((short)28, "extended_columns"),
    PARTITION_VALUE((short)29, "partition_value"),
    TABLE_ID((short)30, "table_id"),
    DELETION_VECTOR_DESCRIPTOR((short)31, "deletion_vector_descriptor"),
    CANDIDATE_NODE((short)32, "candidate_node");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RELATIVE_PATH
          return RELATIVE_PATH;
        case 2: // OFFSET
          return OFFSET;
        case 3: // LENGTH
          return LENGTH;
        case 4: // PARTITION_ID
          return PARTITION_ID;
        case 5: // FILE_LENGTH
          return FILE_LENGTH;
        case 6: // FILE_FORMAT
          return FILE_FORMAT;
        case 7: // TEXT_FILE_DESC
          return TEXT_FILE_DESC;
        case 8: // FULL_PATH
          return FULL_PATH;
        case 9: // HUDI_LOGS
          return HUDI_LOGS;
        case 10: // USE_HUDI_JNI_READER
          return USE_HUDI_JNI_READER;
        case 11: // DELETE_FILES
          return DELETE_FILES;
        case 12: // SKIP_HEADER
          return SKIP_HEADER;
        case 13: // USE_PAIMON_JNI_READER
          return USE_PAIMON_JNI_READER;
        case 14: // PAIMON_SPLIT_INFO
          return PAIMON_SPLIT_INFO;
        case 15: // PAIMON_PREDICATE_INFO
          return PAIMON_PREDICATE_INFO;
        case 16: // MODIFICATION_TIME
          return MODIFICATION_TIME;
        case 17: // DATACACHE_OPTIONS
          return DATACACHE_OPTIONS;
        case 18: // IDENTITY_PARTITION_SLOT_IDS
          return IDENTITY_PARTITION_SLOT_IDS;
        case 19: // USE_ODPS_JNI_READER
          return USE_ODPS_JNI_READER;
        case 20: // ODPS_SPLIT_INFOS
          return ODPS_SPLIT_INFOS;
        case 21: // DELETE_COLUMN_SLOT_IDS
          return DELETE_COLUMN_SLOT_IDS;
        case 22: // USE_ICEBERG_JNI_METADATA_READER
          return USE_ICEBERG_JNI_METADATA_READER;
        case 23: // SERIALIZED_SPLIT
          return SERIALIZED_SPLIT;
        case 24: // USE_KUDU_JNI_READER
          return USE_KUDU_JNI_READER;
        case 25: // KUDU_MASTER
          return KUDU_MASTER;
        case 26: // KUDU_SCAN_TOKEN
          return KUDU_SCAN_TOKEN;
        case 27: // PAIMON_DELETION_FILE
          return PAIMON_DELETION_FILE;
        case 28: // EXTENDED_COLUMNS
          return EXTENDED_COLUMNS;
        case 29: // PARTITION_VALUE
          return PARTITION_VALUE;
        case 30: // TABLE_ID
          return TABLE_ID;
        case 31: // DELETION_VECTOR_DESCRIPTOR
          return DELETION_VECTOR_DESCRIPTOR;
        case 32: // CANDIDATE_NODE
          return CANDIDATE_NODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OFFSET_ISSET_ID = 0;
  private static final int __LENGTH_ISSET_ID = 1;
  private static final int __PARTITION_ID_ISSET_ID = 2;
  private static final int __FILE_LENGTH_ISSET_ID = 3;
  private static final int __USE_HUDI_JNI_READER_ISSET_ID = 4;
  private static final int __SKIP_HEADER_ISSET_ID = 5;
  private static final int __USE_PAIMON_JNI_READER_ISSET_ID = 6;
  private static final int __MODIFICATION_TIME_ISSET_ID = 7;
  private static final int __USE_ODPS_JNI_READER_ISSET_ID = 8;
  private static final int __USE_ICEBERG_JNI_METADATA_READER_ISSET_ID = 9;
  private static final int __USE_KUDU_JNI_READER_ISSET_ID = 10;
  private static final int __TABLE_ID_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RELATIVE_PATH,_Fields.OFFSET,_Fields.LENGTH,_Fields.PARTITION_ID,_Fields.FILE_LENGTH,_Fields.FILE_FORMAT,_Fields.TEXT_FILE_DESC,_Fields.FULL_PATH,_Fields.HUDI_LOGS,_Fields.USE_HUDI_JNI_READER,_Fields.DELETE_FILES,_Fields.SKIP_HEADER,_Fields.USE_PAIMON_JNI_READER,_Fields.PAIMON_SPLIT_INFO,_Fields.PAIMON_PREDICATE_INFO,_Fields.MODIFICATION_TIME,_Fields.DATACACHE_OPTIONS,_Fields.IDENTITY_PARTITION_SLOT_IDS,_Fields.USE_ODPS_JNI_READER,_Fields.ODPS_SPLIT_INFOS,_Fields.DELETE_COLUMN_SLOT_IDS,_Fields.USE_ICEBERG_JNI_METADATA_READER,_Fields.SERIALIZED_SPLIT,_Fields.USE_KUDU_JNI_READER,_Fields.KUDU_MASTER,_Fields.KUDU_SCAN_TOKEN,_Fields.PAIMON_DELETION_FILE,_Fields.EXTENDED_COLUMNS,_Fields.PARTITION_VALUE,_Fields.TABLE_ID,_Fields.DELETION_VECTOR_DESCRIPTOR,_Fields.CANDIDATE_NODE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RELATIVE_PATH, new org.apache.thrift.meta_data.FieldMetaData("relative_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("file_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("file_format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.THdfsFileFormat.class)));
    tmpMap.put(_Fields.TEXT_FILE_DESC, new org.apache.thrift.meta_data.FieldMetaData("text_file_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TTextFileDesc.class)));
    tmpMap.put(_Fields.FULL_PATH, new org.apache.thrift.meta_data.FieldMetaData("full_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HUDI_LOGS, new org.apache.thrift.meta_data.FieldMetaData("hudi_logs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USE_HUDI_JNI_READER, new org.apache.thrift.meta_data.FieldMetaData("use_hudi_jni_reader", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DELETE_FILES, new org.apache.thrift.meta_data.FieldMetaData("delete_files", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TIcebergDeleteFile.class))));
    tmpMap.put(_Fields.SKIP_HEADER, new org.apache.thrift.meta_data.FieldMetaData("skip_header", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USE_PAIMON_JNI_READER, new org.apache.thrift.meta_data.FieldMetaData("use_paimon_jni_reader", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PAIMON_SPLIT_INFO, new org.apache.thrift.meta_data.FieldMetaData("paimon_split_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAIMON_PREDICATE_INFO, new org.apache.thrift.meta_data.FieldMetaData("paimon_predicate_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFICATION_TIME, new org.apache.thrift.meta_data.FieldMetaData("modification_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATACACHE_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("datacache_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TDataCacheOptions.class)));
    tmpMap.put(_Fields.IDENTITY_PARTITION_SLOT_IDS, new org.apache.thrift.meta_data.FieldMetaData("identity_partition_slot_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    tmpMap.put(_Fields.USE_ODPS_JNI_READER, new org.apache.thrift.meta_data.FieldMetaData("use_odps_jni_reader", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ODPS_SPLIT_INFOS, new org.apache.thrift.meta_data.FieldMetaData("odps_split_infos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DELETE_COLUMN_SLOT_IDS, new org.apache.thrift.meta_data.FieldMetaData("delete_column_slot_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    tmpMap.put(_Fields.USE_ICEBERG_JNI_METADATA_READER, new org.apache.thrift.meta_data.FieldMetaData("use_iceberg_jni_metadata_reader", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SERIALIZED_SPLIT, new org.apache.thrift.meta_data.FieldMetaData("serialized_split", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USE_KUDU_JNI_READER, new org.apache.thrift.meta_data.FieldMetaData("use_kudu_jni_reader", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KUDU_MASTER, new org.apache.thrift.meta_data.FieldMetaData("kudu_master", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KUDU_SCAN_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("kudu_scan_token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAIMON_DELETION_FILE, new org.apache.thrift.meta_data.FieldMetaData("paimon_deletion_file", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPaimonDeletionFile.class)));
    tmpMap.put(_Fields.EXTENDED_COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("extended_columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class))));
    tmpMap.put(_Fields.PARTITION_VALUE, new org.apache.thrift.meta_data.FieldMetaData("partition_value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.THdfsPartition.class)));
    tmpMap.put(_Fields.TABLE_ID, new org.apache.thrift.meta_data.FieldMetaData("table_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTableId")));
    tmpMap.put(_Fields.DELETION_VECTOR_DESCRIPTOR, new org.apache.thrift.meta_data.FieldMetaData("deletion_vector_descriptor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDeletionVectorDescriptor.class)));
    tmpMap.put(_Fields.CANDIDATE_NODE, new org.apache.thrift.meta_data.FieldMetaData("candidate_node", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THdfsScanRange.class, metaDataMap);
  }

  public THdfsScanRange() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THdfsScanRange(THdfsScanRange other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRelative_path()) {
      this.relative_path = other.relative_path;
    }
    this.offset = other.offset;
    this.length = other.length;
    this.partition_id = other.partition_id;
    this.file_length = other.file_length;
    if (other.isSetFile_format()) {
      this.file_format = other.file_format;
    }
    if (other.isSetText_file_desc()) {
      this.text_file_desc = new com.starrocks.thrift.TTextFileDesc(other.text_file_desc);
    }
    if (other.isSetFull_path()) {
      this.full_path = other.full_path;
    }
    if (other.isSetHudi_logs()) {
      java.util.List<java.lang.String> __this__hudi_logs = new java.util.ArrayList<java.lang.String>(other.hudi_logs);
      this.hudi_logs = __this__hudi_logs;
    }
    this.use_hudi_jni_reader = other.use_hudi_jni_reader;
    if (other.isSetDelete_files()) {
      java.util.List<TIcebergDeleteFile> __this__delete_files = new java.util.ArrayList<TIcebergDeleteFile>(other.delete_files.size());
      for (TIcebergDeleteFile other_element : other.delete_files) {
        __this__delete_files.add(new TIcebergDeleteFile(other_element));
      }
      this.delete_files = __this__delete_files;
    }
    this.skip_header = other.skip_header;
    this.use_paimon_jni_reader = other.use_paimon_jni_reader;
    if (other.isSetPaimon_split_info()) {
      this.paimon_split_info = other.paimon_split_info;
    }
    if (other.isSetPaimon_predicate_info()) {
      this.paimon_predicate_info = other.paimon_predicate_info;
    }
    this.modification_time = other.modification_time;
    if (other.isSetDatacache_options()) {
      this.datacache_options = new com.starrocks.thrift.TDataCacheOptions(other.datacache_options);
    }
    if (other.isSetIdentity_partition_slot_ids()) {
      java.util.List<java.lang.Integer> __this__identity_partition_slot_ids = new java.util.ArrayList<java.lang.Integer>(other.identity_partition_slot_ids.size());
      for (java.lang.Integer other_element : other.identity_partition_slot_ids) {
        __this__identity_partition_slot_ids.add(other_element);
      }
      this.identity_partition_slot_ids = __this__identity_partition_slot_ids;
    }
    this.use_odps_jni_reader = other.use_odps_jni_reader;
    if (other.isSetOdps_split_infos()) {
      java.util.Map<java.lang.String,java.lang.String> __this__odps_split_infos = new java.util.HashMap<java.lang.String,java.lang.String>(other.odps_split_infos);
      this.odps_split_infos = __this__odps_split_infos;
    }
    if (other.isSetDelete_column_slot_ids()) {
      java.util.List<java.lang.Integer> __this__delete_column_slot_ids = new java.util.ArrayList<java.lang.Integer>(other.delete_column_slot_ids.size());
      for (java.lang.Integer other_element : other.delete_column_slot_ids) {
        __this__delete_column_slot_ids.add(other_element);
      }
      this.delete_column_slot_ids = __this__delete_column_slot_ids;
    }
    this.use_iceberg_jni_metadata_reader = other.use_iceberg_jni_metadata_reader;
    if (other.isSetSerialized_split()) {
      this.serialized_split = other.serialized_split;
    }
    this.use_kudu_jni_reader = other.use_kudu_jni_reader;
    if (other.isSetKudu_master()) {
      this.kudu_master = other.kudu_master;
    }
    if (other.isSetKudu_scan_token()) {
      this.kudu_scan_token = other.kudu_scan_token;
    }
    if (other.isSetPaimon_deletion_file()) {
      this.paimon_deletion_file = new TPaimonDeletionFile(other.paimon_deletion_file);
    }
    if (other.isSetExtended_columns()) {
      java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> __this__extended_columns = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>(other.extended_columns.size());
      for (java.util.Map.Entry<java.lang.Integer, com.starrocks.thrift.TExpr> other_element : other.extended_columns.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        com.starrocks.thrift.TExpr other_element_value = other_element.getValue();

        java.lang.Integer __this__extended_columns_copy_key = other_element_key;

        com.starrocks.thrift.TExpr __this__extended_columns_copy_value = new com.starrocks.thrift.TExpr(other_element_value);

        __this__extended_columns.put(__this__extended_columns_copy_key, __this__extended_columns_copy_value);
      }
      this.extended_columns = __this__extended_columns;
    }
    if (other.isSetPartition_value()) {
      this.partition_value = new com.starrocks.thrift.THdfsPartition(other.partition_value);
    }
    this.table_id = other.table_id;
    if (other.isSetDeletion_vector_descriptor()) {
      this.deletion_vector_descriptor = new TDeletionVectorDescriptor(other.deletion_vector_descriptor);
    }
    if (other.isSetCandidate_node()) {
      this.candidate_node = other.candidate_node;
    }
  }

  @Override
  public THdfsScanRange deepCopy() {
    return new THdfsScanRange(this);
  }

  @Override
  public void clear() {
    this.relative_path = null;
    setOffsetIsSet(false);
    this.offset = 0;
    setLengthIsSet(false);
    this.length = 0;
    setPartition_idIsSet(false);
    this.partition_id = 0;
    setFile_lengthIsSet(false);
    this.file_length = 0;
    this.file_format = null;
    this.text_file_desc = null;
    this.full_path = null;
    this.hudi_logs = null;
    setUse_hudi_jni_readerIsSet(false);
    this.use_hudi_jni_reader = false;
    this.delete_files = null;
    setSkip_headerIsSet(false);
    this.skip_header = 0;
    setUse_paimon_jni_readerIsSet(false);
    this.use_paimon_jni_reader = false;
    this.paimon_split_info = null;
    this.paimon_predicate_info = null;
    setModification_timeIsSet(false);
    this.modification_time = 0;
    this.datacache_options = null;
    this.identity_partition_slot_ids = null;
    setUse_odps_jni_readerIsSet(false);
    this.use_odps_jni_reader = false;
    this.odps_split_infos = null;
    this.delete_column_slot_ids = null;
    setUse_iceberg_jni_metadata_readerIsSet(false);
    this.use_iceberg_jni_metadata_reader = false;
    this.serialized_split = null;
    setUse_kudu_jni_readerIsSet(false);
    this.use_kudu_jni_reader = false;
    this.kudu_master = null;
    this.kudu_scan_token = null;
    this.paimon_deletion_file = null;
    this.extended_columns = null;
    this.partition_value = null;
    setTable_idIsSet(false);
    this.table_id = 0;
    this.deletion_vector_descriptor = null;
    this.candidate_node = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRelative_path() {
    return this.relative_path;
  }

  public THdfsScanRange setRelative_path(@org.apache.thrift.annotation.Nullable java.lang.String relative_path) {
    this.relative_path = relative_path;
    return this;
  }

  public void unsetRelative_path() {
    this.relative_path = null;
  }

  /** Returns true if field relative_path is set (has been assigned a value) and false otherwise */
  public boolean isSetRelative_path() {
    return this.relative_path != null;
  }

  public void setRelative_pathIsSet(boolean value) {
    if (!value) {
      this.relative_path = null;
    }
  }

  public long getOffset() {
    return this.offset;
  }

  public THdfsScanRange setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public long getLength() {
    return this.length;
  }

  public THdfsScanRange setLength(long length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public THdfsScanRange setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  public long getFile_length() {
    return this.file_length;
  }

  public THdfsScanRange setFile_length(long file_length) {
    this.file_length = file_length;
    setFile_lengthIsSet(true);
    return this;
  }

  public void unsetFile_length() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILE_LENGTH_ISSET_ID);
  }

  /** Returns true if field file_length is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_length() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILE_LENGTH_ISSET_ID);
  }

  public void setFile_lengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILE_LENGTH_ISSET_ID, value);
  }

  /**
   * 
   * @see com.starrocks.thrift.THdfsFileFormat
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.THdfsFileFormat getFile_format() {
    return this.file_format;
  }

  /**
   * 
   * @see com.starrocks.thrift.THdfsFileFormat
   */
  public THdfsScanRange setFile_format(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.THdfsFileFormat file_format) {
    this.file_format = file_format;
    return this;
  }

  public void unsetFile_format() {
    this.file_format = null;
  }

  /** Returns true if field file_format is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_format() {
    return this.file_format != null;
  }

  public void setFile_formatIsSet(boolean value) {
    if (!value) {
      this.file_format = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TTextFileDesc getText_file_desc() {
    return this.text_file_desc;
  }

  public THdfsScanRange setText_file_desc(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTextFileDesc text_file_desc) {
    this.text_file_desc = text_file_desc;
    return this;
  }

  public void unsetText_file_desc() {
    this.text_file_desc = null;
  }

  /** Returns true if field text_file_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetText_file_desc() {
    return this.text_file_desc != null;
  }

  public void setText_file_descIsSet(boolean value) {
    if (!value) {
      this.text_file_desc = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFull_path() {
    return this.full_path;
  }

  public THdfsScanRange setFull_path(@org.apache.thrift.annotation.Nullable java.lang.String full_path) {
    this.full_path = full_path;
    return this;
  }

  public void unsetFull_path() {
    this.full_path = null;
  }

  /** Returns true if field full_path is set (has been assigned a value) and false otherwise */
  public boolean isSetFull_path() {
    return this.full_path != null;
  }

  public void setFull_pathIsSet(boolean value) {
    if (!value) {
      this.full_path = null;
    }
  }

  public int getHudi_logsSize() {
    return (this.hudi_logs == null) ? 0 : this.hudi_logs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getHudi_logsIterator() {
    return (this.hudi_logs == null) ? null : this.hudi_logs.iterator();
  }

  public void addToHudi_logs(java.lang.String elem) {
    if (this.hudi_logs == null) {
      this.hudi_logs = new java.util.ArrayList<java.lang.String>();
    }
    this.hudi_logs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getHudi_logs() {
    return this.hudi_logs;
  }

  public THdfsScanRange setHudi_logs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> hudi_logs) {
    this.hudi_logs = hudi_logs;
    return this;
  }

  public void unsetHudi_logs() {
    this.hudi_logs = null;
  }

  /** Returns true if field hudi_logs is set (has been assigned a value) and false otherwise */
  public boolean isSetHudi_logs() {
    return this.hudi_logs != null;
  }

  public void setHudi_logsIsSet(boolean value) {
    if (!value) {
      this.hudi_logs = null;
    }
  }

  public boolean isUse_hudi_jni_reader() {
    return this.use_hudi_jni_reader;
  }

  public THdfsScanRange setUse_hudi_jni_reader(boolean use_hudi_jni_reader) {
    this.use_hudi_jni_reader = use_hudi_jni_reader;
    setUse_hudi_jni_readerIsSet(true);
    return this;
  }

  public void unsetUse_hudi_jni_reader() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_HUDI_JNI_READER_ISSET_ID);
  }

  /** Returns true if field use_hudi_jni_reader is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_hudi_jni_reader() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_HUDI_JNI_READER_ISSET_ID);
  }

  public void setUse_hudi_jni_readerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_HUDI_JNI_READER_ISSET_ID, value);
  }

  public int getDelete_filesSize() {
    return (this.delete_files == null) ? 0 : this.delete_files.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TIcebergDeleteFile> getDelete_filesIterator() {
    return (this.delete_files == null) ? null : this.delete_files.iterator();
  }

  public void addToDelete_files(TIcebergDeleteFile elem) {
    if (this.delete_files == null) {
      this.delete_files = new java.util.ArrayList<TIcebergDeleteFile>();
    }
    this.delete_files.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TIcebergDeleteFile> getDelete_files() {
    return this.delete_files;
  }

  public THdfsScanRange setDelete_files(@org.apache.thrift.annotation.Nullable java.util.List<TIcebergDeleteFile> delete_files) {
    this.delete_files = delete_files;
    return this;
  }

  public void unsetDelete_files() {
    this.delete_files = null;
  }

  /** Returns true if field delete_files is set (has been assigned a value) and false otherwise */
  public boolean isSetDelete_files() {
    return this.delete_files != null;
  }

  public void setDelete_filesIsSet(boolean value) {
    if (!value) {
      this.delete_files = null;
    }
  }

  public long getSkip_header() {
    return this.skip_header;
  }

  public THdfsScanRange setSkip_header(long skip_header) {
    this.skip_header = skip_header;
    setSkip_headerIsSet(true);
    return this;
  }

  public void unsetSkip_header() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SKIP_HEADER_ISSET_ID);
  }

  /** Returns true if field skip_header is set (has been assigned a value) and false otherwise */
  public boolean isSetSkip_header() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SKIP_HEADER_ISSET_ID);
  }

  public void setSkip_headerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SKIP_HEADER_ISSET_ID, value);
  }

  public boolean isUse_paimon_jni_reader() {
    return this.use_paimon_jni_reader;
  }

  public THdfsScanRange setUse_paimon_jni_reader(boolean use_paimon_jni_reader) {
    this.use_paimon_jni_reader = use_paimon_jni_reader;
    setUse_paimon_jni_readerIsSet(true);
    return this;
  }

  public void unsetUse_paimon_jni_reader() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_PAIMON_JNI_READER_ISSET_ID);
  }

  /** Returns true if field use_paimon_jni_reader is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_paimon_jni_reader() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_PAIMON_JNI_READER_ISSET_ID);
  }

  public void setUse_paimon_jni_readerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_PAIMON_JNI_READER_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPaimon_split_info() {
    return this.paimon_split_info;
  }

  public THdfsScanRange setPaimon_split_info(@org.apache.thrift.annotation.Nullable java.lang.String paimon_split_info) {
    this.paimon_split_info = paimon_split_info;
    return this;
  }

  public void unsetPaimon_split_info() {
    this.paimon_split_info = null;
  }

  /** Returns true if field paimon_split_info is set (has been assigned a value) and false otherwise */
  public boolean isSetPaimon_split_info() {
    return this.paimon_split_info != null;
  }

  public void setPaimon_split_infoIsSet(boolean value) {
    if (!value) {
      this.paimon_split_info = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPaimon_predicate_info() {
    return this.paimon_predicate_info;
  }

  public THdfsScanRange setPaimon_predicate_info(@org.apache.thrift.annotation.Nullable java.lang.String paimon_predicate_info) {
    this.paimon_predicate_info = paimon_predicate_info;
    return this;
  }

  public void unsetPaimon_predicate_info() {
    this.paimon_predicate_info = null;
  }

  /** Returns true if field paimon_predicate_info is set (has been assigned a value) and false otherwise */
  public boolean isSetPaimon_predicate_info() {
    return this.paimon_predicate_info != null;
  }

  public void setPaimon_predicate_infoIsSet(boolean value) {
    if (!value) {
      this.paimon_predicate_info = null;
    }
  }

  public long getModification_time() {
    return this.modification_time;
  }

  public THdfsScanRange setModification_time(long modification_time) {
    this.modification_time = modification_time;
    setModification_timeIsSet(true);
    return this;
  }

  public void unsetModification_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MODIFICATION_TIME_ISSET_ID);
  }

  /** Returns true if field modification_time is set (has been assigned a value) and false otherwise */
  public boolean isSetModification_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MODIFICATION_TIME_ISSET_ID);
  }

  public void setModification_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MODIFICATION_TIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TDataCacheOptions getDatacache_options() {
    return this.datacache_options;
  }

  public THdfsScanRange setDatacache_options(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TDataCacheOptions datacache_options) {
    this.datacache_options = datacache_options;
    return this;
  }

  public void unsetDatacache_options() {
    this.datacache_options = null;
  }

  /** Returns true if field datacache_options is set (has been assigned a value) and false otherwise */
  public boolean isSetDatacache_options() {
    return this.datacache_options != null;
  }

  public void setDatacache_optionsIsSet(boolean value) {
    if (!value) {
      this.datacache_options = null;
    }
  }

  public int getIdentity_partition_slot_idsSize() {
    return (this.identity_partition_slot_ids == null) ? 0 : this.identity_partition_slot_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getIdentity_partition_slot_idsIterator() {
    return (this.identity_partition_slot_ids == null) ? null : this.identity_partition_slot_ids.iterator();
  }

  public void addToIdentity_partition_slot_ids(int elem) {
    if (this.identity_partition_slot_ids == null) {
      this.identity_partition_slot_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.identity_partition_slot_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getIdentity_partition_slot_ids() {
    return this.identity_partition_slot_ids;
  }

  public THdfsScanRange setIdentity_partition_slot_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> identity_partition_slot_ids) {
    this.identity_partition_slot_ids = identity_partition_slot_ids;
    return this;
  }

  public void unsetIdentity_partition_slot_ids() {
    this.identity_partition_slot_ids = null;
  }

  /** Returns true if field identity_partition_slot_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentity_partition_slot_ids() {
    return this.identity_partition_slot_ids != null;
  }

  public void setIdentity_partition_slot_idsIsSet(boolean value) {
    if (!value) {
      this.identity_partition_slot_ids = null;
    }
  }

  public boolean isUse_odps_jni_reader() {
    return this.use_odps_jni_reader;
  }

  public THdfsScanRange setUse_odps_jni_reader(boolean use_odps_jni_reader) {
    this.use_odps_jni_reader = use_odps_jni_reader;
    setUse_odps_jni_readerIsSet(true);
    return this;
  }

  public void unsetUse_odps_jni_reader() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_ODPS_JNI_READER_ISSET_ID);
  }

  /** Returns true if field use_odps_jni_reader is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_odps_jni_reader() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_ODPS_JNI_READER_ISSET_ID);
  }

  public void setUse_odps_jni_readerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_ODPS_JNI_READER_ISSET_ID, value);
  }

  public int getOdps_split_infosSize() {
    return (this.odps_split_infos == null) ? 0 : this.odps_split_infos.size();
  }

  public void putToOdps_split_infos(java.lang.String key, java.lang.String val) {
    if (this.odps_split_infos == null) {
      this.odps_split_infos = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.odps_split_infos.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getOdps_split_infos() {
    return this.odps_split_infos;
  }

  public THdfsScanRange setOdps_split_infos(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> odps_split_infos) {
    this.odps_split_infos = odps_split_infos;
    return this;
  }

  public void unsetOdps_split_infos() {
    this.odps_split_infos = null;
  }

  /** Returns true if field odps_split_infos is set (has been assigned a value) and false otherwise */
  public boolean isSetOdps_split_infos() {
    return this.odps_split_infos != null;
  }

  public void setOdps_split_infosIsSet(boolean value) {
    if (!value) {
      this.odps_split_infos = null;
    }
  }

  public int getDelete_column_slot_idsSize() {
    return (this.delete_column_slot_ids == null) ? 0 : this.delete_column_slot_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getDelete_column_slot_idsIterator() {
    return (this.delete_column_slot_ids == null) ? null : this.delete_column_slot_ids.iterator();
  }

  public void addToDelete_column_slot_ids(int elem) {
    if (this.delete_column_slot_ids == null) {
      this.delete_column_slot_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.delete_column_slot_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getDelete_column_slot_ids() {
    return this.delete_column_slot_ids;
  }

  public THdfsScanRange setDelete_column_slot_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> delete_column_slot_ids) {
    this.delete_column_slot_ids = delete_column_slot_ids;
    return this;
  }

  public void unsetDelete_column_slot_ids() {
    this.delete_column_slot_ids = null;
  }

  /** Returns true if field delete_column_slot_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetDelete_column_slot_ids() {
    return this.delete_column_slot_ids != null;
  }

  public void setDelete_column_slot_idsIsSet(boolean value) {
    if (!value) {
      this.delete_column_slot_ids = null;
    }
  }

  public boolean isUse_iceberg_jni_metadata_reader() {
    return this.use_iceberg_jni_metadata_reader;
  }

  public THdfsScanRange setUse_iceberg_jni_metadata_reader(boolean use_iceberg_jni_metadata_reader) {
    this.use_iceberg_jni_metadata_reader = use_iceberg_jni_metadata_reader;
    setUse_iceberg_jni_metadata_readerIsSet(true);
    return this;
  }

  public void unsetUse_iceberg_jni_metadata_reader() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_ICEBERG_JNI_METADATA_READER_ISSET_ID);
  }

  /** Returns true if field use_iceberg_jni_metadata_reader is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_iceberg_jni_metadata_reader() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_ICEBERG_JNI_METADATA_READER_ISSET_ID);
  }

  public void setUse_iceberg_jni_metadata_readerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_ICEBERG_JNI_METADATA_READER_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSerialized_split() {
    return this.serialized_split;
  }

  public THdfsScanRange setSerialized_split(@org.apache.thrift.annotation.Nullable java.lang.String serialized_split) {
    this.serialized_split = serialized_split;
    return this;
  }

  public void unsetSerialized_split() {
    this.serialized_split = null;
  }

  /** Returns true if field serialized_split is set (has been assigned a value) and false otherwise */
  public boolean isSetSerialized_split() {
    return this.serialized_split != null;
  }

  public void setSerialized_splitIsSet(boolean value) {
    if (!value) {
      this.serialized_split = null;
    }
  }

  public boolean isUse_kudu_jni_reader() {
    return this.use_kudu_jni_reader;
  }

  public THdfsScanRange setUse_kudu_jni_reader(boolean use_kudu_jni_reader) {
    this.use_kudu_jni_reader = use_kudu_jni_reader;
    setUse_kudu_jni_readerIsSet(true);
    return this;
  }

  public void unsetUse_kudu_jni_reader() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_KUDU_JNI_READER_ISSET_ID);
  }

  /** Returns true if field use_kudu_jni_reader is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_kudu_jni_reader() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_KUDU_JNI_READER_ISSET_ID);
  }

  public void setUse_kudu_jni_readerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_KUDU_JNI_READER_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getKudu_master() {
    return this.kudu_master;
  }

  public THdfsScanRange setKudu_master(@org.apache.thrift.annotation.Nullable java.lang.String kudu_master) {
    this.kudu_master = kudu_master;
    return this;
  }

  public void unsetKudu_master() {
    this.kudu_master = null;
  }

  /** Returns true if field kudu_master is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_master() {
    return this.kudu_master != null;
  }

  public void setKudu_masterIsSet(boolean value) {
    if (!value) {
      this.kudu_master = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getKudu_scan_token() {
    return this.kudu_scan_token;
  }

  public THdfsScanRange setKudu_scan_token(@org.apache.thrift.annotation.Nullable java.lang.String kudu_scan_token) {
    this.kudu_scan_token = kudu_scan_token;
    return this;
  }

  public void unsetKudu_scan_token() {
    this.kudu_scan_token = null;
  }

  /** Returns true if field kudu_scan_token is set (has been assigned a value) and false otherwise */
  public boolean isSetKudu_scan_token() {
    return this.kudu_scan_token != null;
  }

  public void setKudu_scan_tokenIsSet(boolean value) {
    if (!value) {
      this.kudu_scan_token = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TPaimonDeletionFile getPaimon_deletion_file() {
    return this.paimon_deletion_file;
  }

  public THdfsScanRange setPaimon_deletion_file(@org.apache.thrift.annotation.Nullable TPaimonDeletionFile paimon_deletion_file) {
    this.paimon_deletion_file = paimon_deletion_file;
    return this;
  }

  public void unsetPaimon_deletion_file() {
    this.paimon_deletion_file = null;
  }

  /** Returns true if field paimon_deletion_file is set (has been assigned a value) and false otherwise */
  public boolean isSetPaimon_deletion_file() {
    return this.paimon_deletion_file != null;
  }

  public void setPaimon_deletion_fileIsSet(boolean value) {
    if (!value) {
      this.paimon_deletion_file = null;
    }
  }

  public int getExtended_columnsSize() {
    return (this.extended_columns == null) ? 0 : this.extended_columns.size();
  }

  public void putToExtended_columns(int key, com.starrocks.thrift.TExpr val) {
    if (this.extended_columns == null) {
      this.extended_columns = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>();
    }
    this.extended_columns.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> getExtended_columns() {
    return this.extended_columns;
  }

  public THdfsScanRange setExtended_columns(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> extended_columns) {
    this.extended_columns = extended_columns;
    return this;
  }

  public void unsetExtended_columns() {
    this.extended_columns = null;
  }

  /** Returns true if field extended_columns is set (has been assigned a value) and false otherwise */
  public boolean isSetExtended_columns() {
    return this.extended_columns != null;
  }

  public void setExtended_columnsIsSet(boolean value) {
    if (!value) {
      this.extended_columns = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.THdfsPartition getPartition_value() {
    return this.partition_value;
  }

  public THdfsScanRange setPartition_value(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.THdfsPartition partition_value) {
    this.partition_value = partition_value;
    return this;
  }

  public void unsetPartition_value() {
    this.partition_value = null;
  }

  /** Returns true if field partition_value is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_value() {
    return this.partition_value != null;
  }

  public void setPartition_valueIsSet(boolean value) {
    if (!value) {
      this.partition_value = null;
    }
  }

  public long getTable_id() {
    return this.table_id;
  }

  public THdfsScanRange setTable_id(long table_id) {
    this.table_id = table_id;
    setTable_idIsSet(true);
    return this;
  }

  public void unsetTable_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  /** Returns true if field table_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLE_ID_ISSET_ID);
  }

  public void setTable_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLE_ID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TDeletionVectorDescriptor getDeletion_vector_descriptor() {
    return this.deletion_vector_descriptor;
  }

  public THdfsScanRange setDeletion_vector_descriptor(@org.apache.thrift.annotation.Nullable TDeletionVectorDescriptor deletion_vector_descriptor) {
    this.deletion_vector_descriptor = deletion_vector_descriptor;
    return this;
  }

  public void unsetDeletion_vector_descriptor() {
    this.deletion_vector_descriptor = null;
  }

  /** Returns true if field deletion_vector_descriptor is set (has been assigned a value) and false otherwise */
  public boolean isSetDeletion_vector_descriptor() {
    return this.deletion_vector_descriptor != null;
  }

  public void setDeletion_vector_descriptorIsSet(boolean value) {
    if (!value) {
      this.deletion_vector_descriptor = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCandidate_node() {
    return this.candidate_node;
  }

  public THdfsScanRange setCandidate_node(@org.apache.thrift.annotation.Nullable java.lang.String candidate_node) {
    this.candidate_node = candidate_node;
    return this;
  }

  public void unsetCandidate_node() {
    this.candidate_node = null;
  }

  /** Returns true if field candidate_node is set (has been assigned a value) and false otherwise */
  public boolean isSetCandidate_node() {
    return this.candidate_node != null;
  }

  public void setCandidate_nodeIsSet(boolean value) {
    if (!value) {
      this.candidate_node = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RELATIVE_PATH:
      if (value == null) {
        unsetRelative_path();
      } else {
        setRelative_path((java.lang.String)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((java.lang.Long)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((java.lang.Long)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((java.lang.Long)value);
      }
      break;

    case FILE_LENGTH:
      if (value == null) {
        unsetFile_length();
      } else {
        setFile_length((java.lang.Long)value);
      }
      break;

    case FILE_FORMAT:
      if (value == null) {
        unsetFile_format();
      } else {
        setFile_format((com.starrocks.thrift.THdfsFileFormat)value);
      }
      break;

    case TEXT_FILE_DESC:
      if (value == null) {
        unsetText_file_desc();
      } else {
        setText_file_desc((com.starrocks.thrift.TTextFileDesc)value);
      }
      break;

    case FULL_PATH:
      if (value == null) {
        unsetFull_path();
      } else {
        setFull_path((java.lang.String)value);
      }
      break;

    case HUDI_LOGS:
      if (value == null) {
        unsetHudi_logs();
      } else {
        setHudi_logs((java.util.List<java.lang.String>)value);
      }
      break;

    case USE_HUDI_JNI_READER:
      if (value == null) {
        unsetUse_hudi_jni_reader();
      } else {
        setUse_hudi_jni_reader((java.lang.Boolean)value);
      }
      break;

    case DELETE_FILES:
      if (value == null) {
        unsetDelete_files();
      } else {
        setDelete_files((java.util.List<TIcebergDeleteFile>)value);
      }
      break;

    case SKIP_HEADER:
      if (value == null) {
        unsetSkip_header();
      } else {
        setSkip_header((java.lang.Long)value);
      }
      break;

    case USE_PAIMON_JNI_READER:
      if (value == null) {
        unsetUse_paimon_jni_reader();
      } else {
        setUse_paimon_jni_reader((java.lang.Boolean)value);
      }
      break;

    case PAIMON_SPLIT_INFO:
      if (value == null) {
        unsetPaimon_split_info();
      } else {
        setPaimon_split_info((java.lang.String)value);
      }
      break;

    case PAIMON_PREDICATE_INFO:
      if (value == null) {
        unsetPaimon_predicate_info();
      } else {
        setPaimon_predicate_info((java.lang.String)value);
      }
      break;

    case MODIFICATION_TIME:
      if (value == null) {
        unsetModification_time();
      } else {
        setModification_time((java.lang.Long)value);
      }
      break;

    case DATACACHE_OPTIONS:
      if (value == null) {
        unsetDatacache_options();
      } else {
        setDatacache_options((com.starrocks.thrift.TDataCacheOptions)value);
      }
      break;

    case IDENTITY_PARTITION_SLOT_IDS:
      if (value == null) {
        unsetIdentity_partition_slot_ids();
      } else {
        setIdentity_partition_slot_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    case USE_ODPS_JNI_READER:
      if (value == null) {
        unsetUse_odps_jni_reader();
      } else {
        setUse_odps_jni_reader((java.lang.Boolean)value);
      }
      break;

    case ODPS_SPLIT_INFOS:
      if (value == null) {
        unsetOdps_split_infos();
      } else {
        setOdps_split_infos((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case DELETE_COLUMN_SLOT_IDS:
      if (value == null) {
        unsetDelete_column_slot_ids();
      } else {
        setDelete_column_slot_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    case USE_ICEBERG_JNI_METADATA_READER:
      if (value == null) {
        unsetUse_iceberg_jni_metadata_reader();
      } else {
        setUse_iceberg_jni_metadata_reader((java.lang.Boolean)value);
      }
      break;

    case SERIALIZED_SPLIT:
      if (value == null) {
        unsetSerialized_split();
      } else {
        setSerialized_split((java.lang.String)value);
      }
      break;

    case USE_KUDU_JNI_READER:
      if (value == null) {
        unsetUse_kudu_jni_reader();
      } else {
        setUse_kudu_jni_reader((java.lang.Boolean)value);
      }
      break;

    case KUDU_MASTER:
      if (value == null) {
        unsetKudu_master();
      } else {
        setKudu_master((java.lang.String)value);
      }
      break;

    case KUDU_SCAN_TOKEN:
      if (value == null) {
        unsetKudu_scan_token();
      } else {
        setKudu_scan_token((java.lang.String)value);
      }
      break;

    case PAIMON_DELETION_FILE:
      if (value == null) {
        unsetPaimon_deletion_file();
      } else {
        setPaimon_deletion_file((TPaimonDeletionFile)value);
      }
      break;

    case EXTENDED_COLUMNS:
      if (value == null) {
        unsetExtended_columns();
      } else {
        setExtended_columns((java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr>)value);
      }
      break;

    case PARTITION_VALUE:
      if (value == null) {
        unsetPartition_value();
      } else {
        setPartition_value((com.starrocks.thrift.THdfsPartition)value);
      }
      break;

    case TABLE_ID:
      if (value == null) {
        unsetTable_id();
      } else {
        setTable_id((java.lang.Long)value);
      }
      break;

    case DELETION_VECTOR_DESCRIPTOR:
      if (value == null) {
        unsetDeletion_vector_descriptor();
      } else {
        setDeletion_vector_descriptor((TDeletionVectorDescriptor)value);
      }
      break;

    case CANDIDATE_NODE:
      if (value == null) {
        unsetCandidate_node();
      } else {
        setCandidate_node((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RELATIVE_PATH:
      return getRelative_path();

    case OFFSET:
      return getOffset();

    case LENGTH:
      return getLength();

    case PARTITION_ID:
      return getPartition_id();

    case FILE_LENGTH:
      return getFile_length();

    case FILE_FORMAT:
      return getFile_format();

    case TEXT_FILE_DESC:
      return getText_file_desc();

    case FULL_PATH:
      return getFull_path();

    case HUDI_LOGS:
      return getHudi_logs();

    case USE_HUDI_JNI_READER:
      return isUse_hudi_jni_reader();

    case DELETE_FILES:
      return getDelete_files();

    case SKIP_HEADER:
      return getSkip_header();

    case USE_PAIMON_JNI_READER:
      return isUse_paimon_jni_reader();

    case PAIMON_SPLIT_INFO:
      return getPaimon_split_info();

    case PAIMON_PREDICATE_INFO:
      return getPaimon_predicate_info();

    case MODIFICATION_TIME:
      return getModification_time();

    case DATACACHE_OPTIONS:
      return getDatacache_options();

    case IDENTITY_PARTITION_SLOT_IDS:
      return getIdentity_partition_slot_ids();

    case USE_ODPS_JNI_READER:
      return isUse_odps_jni_reader();

    case ODPS_SPLIT_INFOS:
      return getOdps_split_infos();

    case DELETE_COLUMN_SLOT_IDS:
      return getDelete_column_slot_ids();

    case USE_ICEBERG_JNI_METADATA_READER:
      return isUse_iceberg_jni_metadata_reader();

    case SERIALIZED_SPLIT:
      return getSerialized_split();

    case USE_KUDU_JNI_READER:
      return isUse_kudu_jni_reader();

    case KUDU_MASTER:
      return getKudu_master();

    case KUDU_SCAN_TOKEN:
      return getKudu_scan_token();

    case PAIMON_DELETION_FILE:
      return getPaimon_deletion_file();

    case EXTENDED_COLUMNS:
      return getExtended_columns();

    case PARTITION_VALUE:
      return getPartition_value();

    case TABLE_ID:
      return getTable_id();

    case DELETION_VECTOR_DESCRIPTOR:
      return getDeletion_vector_descriptor();

    case CANDIDATE_NODE:
      return getCandidate_node();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RELATIVE_PATH:
      return isSetRelative_path();
    case OFFSET:
      return isSetOffset();
    case LENGTH:
      return isSetLength();
    case PARTITION_ID:
      return isSetPartition_id();
    case FILE_LENGTH:
      return isSetFile_length();
    case FILE_FORMAT:
      return isSetFile_format();
    case TEXT_FILE_DESC:
      return isSetText_file_desc();
    case FULL_PATH:
      return isSetFull_path();
    case HUDI_LOGS:
      return isSetHudi_logs();
    case USE_HUDI_JNI_READER:
      return isSetUse_hudi_jni_reader();
    case DELETE_FILES:
      return isSetDelete_files();
    case SKIP_HEADER:
      return isSetSkip_header();
    case USE_PAIMON_JNI_READER:
      return isSetUse_paimon_jni_reader();
    case PAIMON_SPLIT_INFO:
      return isSetPaimon_split_info();
    case PAIMON_PREDICATE_INFO:
      return isSetPaimon_predicate_info();
    case MODIFICATION_TIME:
      return isSetModification_time();
    case DATACACHE_OPTIONS:
      return isSetDatacache_options();
    case IDENTITY_PARTITION_SLOT_IDS:
      return isSetIdentity_partition_slot_ids();
    case USE_ODPS_JNI_READER:
      return isSetUse_odps_jni_reader();
    case ODPS_SPLIT_INFOS:
      return isSetOdps_split_infos();
    case DELETE_COLUMN_SLOT_IDS:
      return isSetDelete_column_slot_ids();
    case USE_ICEBERG_JNI_METADATA_READER:
      return isSetUse_iceberg_jni_metadata_reader();
    case SERIALIZED_SPLIT:
      return isSetSerialized_split();
    case USE_KUDU_JNI_READER:
      return isSetUse_kudu_jni_reader();
    case KUDU_MASTER:
      return isSetKudu_master();
    case KUDU_SCAN_TOKEN:
      return isSetKudu_scan_token();
    case PAIMON_DELETION_FILE:
      return isSetPaimon_deletion_file();
    case EXTENDED_COLUMNS:
      return isSetExtended_columns();
    case PARTITION_VALUE:
      return isSetPartition_value();
    case TABLE_ID:
      return isSetTable_id();
    case DELETION_VECTOR_DESCRIPTOR:
      return isSetDeletion_vector_descriptor();
    case CANDIDATE_NODE:
      return isSetCandidate_node();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof THdfsScanRange)
      return this.equals((THdfsScanRange)that);
    return false;
  }

  public boolean equals(THdfsScanRange that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_relative_path = true && this.isSetRelative_path();
    boolean that_present_relative_path = true && that.isSetRelative_path();
    if (this_present_relative_path || that_present_relative_path) {
      if (!(this_present_relative_path && that_present_relative_path))
        return false;
      if (!this.relative_path.equals(that.relative_path))
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_length = true && this.isSetLength();
    boolean that_present_length = true && that.isSetLength();
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_partition_id = true && this.isSetPartition_id();
    boolean that_present_partition_id = true && that.isSetPartition_id();
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_file_length = true && this.isSetFile_length();
    boolean that_present_file_length = true && that.isSetFile_length();
    if (this_present_file_length || that_present_file_length) {
      if (!(this_present_file_length && that_present_file_length))
        return false;
      if (this.file_length != that.file_length)
        return false;
    }

    boolean this_present_file_format = true && this.isSetFile_format();
    boolean that_present_file_format = true && that.isSetFile_format();
    if (this_present_file_format || that_present_file_format) {
      if (!(this_present_file_format && that_present_file_format))
        return false;
      if (!this.file_format.equals(that.file_format))
        return false;
    }

    boolean this_present_text_file_desc = true && this.isSetText_file_desc();
    boolean that_present_text_file_desc = true && that.isSetText_file_desc();
    if (this_present_text_file_desc || that_present_text_file_desc) {
      if (!(this_present_text_file_desc && that_present_text_file_desc))
        return false;
      if (!this.text_file_desc.equals(that.text_file_desc))
        return false;
    }

    boolean this_present_full_path = true && this.isSetFull_path();
    boolean that_present_full_path = true && that.isSetFull_path();
    if (this_present_full_path || that_present_full_path) {
      if (!(this_present_full_path && that_present_full_path))
        return false;
      if (!this.full_path.equals(that.full_path))
        return false;
    }

    boolean this_present_hudi_logs = true && this.isSetHudi_logs();
    boolean that_present_hudi_logs = true && that.isSetHudi_logs();
    if (this_present_hudi_logs || that_present_hudi_logs) {
      if (!(this_present_hudi_logs && that_present_hudi_logs))
        return false;
      if (!this.hudi_logs.equals(that.hudi_logs))
        return false;
    }

    boolean this_present_use_hudi_jni_reader = true && this.isSetUse_hudi_jni_reader();
    boolean that_present_use_hudi_jni_reader = true && that.isSetUse_hudi_jni_reader();
    if (this_present_use_hudi_jni_reader || that_present_use_hudi_jni_reader) {
      if (!(this_present_use_hudi_jni_reader && that_present_use_hudi_jni_reader))
        return false;
      if (this.use_hudi_jni_reader != that.use_hudi_jni_reader)
        return false;
    }

    boolean this_present_delete_files = true && this.isSetDelete_files();
    boolean that_present_delete_files = true && that.isSetDelete_files();
    if (this_present_delete_files || that_present_delete_files) {
      if (!(this_present_delete_files && that_present_delete_files))
        return false;
      if (!this.delete_files.equals(that.delete_files))
        return false;
    }

    boolean this_present_skip_header = true && this.isSetSkip_header();
    boolean that_present_skip_header = true && that.isSetSkip_header();
    if (this_present_skip_header || that_present_skip_header) {
      if (!(this_present_skip_header && that_present_skip_header))
        return false;
      if (this.skip_header != that.skip_header)
        return false;
    }

    boolean this_present_use_paimon_jni_reader = true && this.isSetUse_paimon_jni_reader();
    boolean that_present_use_paimon_jni_reader = true && that.isSetUse_paimon_jni_reader();
    if (this_present_use_paimon_jni_reader || that_present_use_paimon_jni_reader) {
      if (!(this_present_use_paimon_jni_reader && that_present_use_paimon_jni_reader))
        return false;
      if (this.use_paimon_jni_reader != that.use_paimon_jni_reader)
        return false;
    }

    boolean this_present_paimon_split_info = true && this.isSetPaimon_split_info();
    boolean that_present_paimon_split_info = true && that.isSetPaimon_split_info();
    if (this_present_paimon_split_info || that_present_paimon_split_info) {
      if (!(this_present_paimon_split_info && that_present_paimon_split_info))
        return false;
      if (!this.paimon_split_info.equals(that.paimon_split_info))
        return false;
    }

    boolean this_present_paimon_predicate_info = true && this.isSetPaimon_predicate_info();
    boolean that_present_paimon_predicate_info = true && that.isSetPaimon_predicate_info();
    if (this_present_paimon_predicate_info || that_present_paimon_predicate_info) {
      if (!(this_present_paimon_predicate_info && that_present_paimon_predicate_info))
        return false;
      if (!this.paimon_predicate_info.equals(that.paimon_predicate_info))
        return false;
    }

    boolean this_present_modification_time = true && this.isSetModification_time();
    boolean that_present_modification_time = true && that.isSetModification_time();
    if (this_present_modification_time || that_present_modification_time) {
      if (!(this_present_modification_time && that_present_modification_time))
        return false;
      if (this.modification_time != that.modification_time)
        return false;
    }

    boolean this_present_datacache_options = true && this.isSetDatacache_options();
    boolean that_present_datacache_options = true && that.isSetDatacache_options();
    if (this_present_datacache_options || that_present_datacache_options) {
      if (!(this_present_datacache_options && that_present_datacache_options))
        return false;
      if (!this.datacache_options.equals(that.datacache_options))
        return false;
    }

    boolean this_present_identity_partition_slot_ids = true && this.isSetIdentity_partition_slot_ids();
    boolean that_present_identity_partition_slot_ids = true && that.isSetIdentity_partition_slot_ids();
    if (this_present_identity_partition_slot_ids || that_present_identity_partition_slot_ids) {
      if (!(this_present_identity_partition_slot_ids && that_present_identity_partition_slot_ids))
        return false;
      if (!this.identity_partition_slot_ids.equals(that.identity_partition_slot_ids))
        return false;
    }

    boolean this_present_use_odps_jni_reader = true && this.isSetUse_odps_jni_reader();
    boolean that_present_use_odps_jni_reader = true && that.isSetUse_odps_jni_reader();
    if (this_present_use_odps_jni_reader || that_present_use_odps_jni_reader) {
      if (!(this_present_use_odps_jni_reader && that_present_use_odps_jni_reader))
        return false;
      if (this.use_odps_jni_reader != that.use_odps_jni_reader)
        return false;
    }

    boolean this_present_odps_split_infos = true && this.isSetOdps_split_infos();
    boolean that_present_odps_split_infos = true && that.isSetOdps_split_infos();
    if (this_present_odps_split_infos || that_present_odps_split_infos) {
      if (!(this_present_odps_split_infos && that_present_odps_split_infos))
        return false;
      if (!this.odps_split_infos.equals(that.odps_split_infos))
        return false;
    }

    boolean this_present_delete_column_slot_ids = true && this.isSetDelete_column_slot_ids();
    boolean that_present_delete_column_slot_ids = true && that.isSetDelete_column_slot_ids();
    if (this_present_delete_column_slot_ids || that_present_delete_column_slot_ids) {
      if (!(this_present_delete_column_slot_ids && that_present_delete_column_slot_ids))
        return false;
      if (!this.delete_column_slot_ids.equals(that.delete_column_slot_ids))
        return false;
    }

    boolean this_present_use_iceberg_jni_metadata_reader = true && this.isSetUse_iceberg_jni_metadata_reader();
    boolean that_present_use_iceberg_jni_metadata_reader = true && that.isSetUse_iceberg_jni_metadata_reader();
    if (this_present_use_iceberg_jni_metadata_reader || that_present_use_iceberg_jni_metadata_reader) {
      if (!(this_present_use_iceberg_jni_metadata_reader && that_present_use_iceberg_jni_metadata_reader))
        return false;
      if (this.use_iceberg_jni_metadata_reader != that.use_iceberg_jni_metadata_reader)
        return false;
    }

    boolean this_present_serialized_split = true && this.isSetSerialized_split();
    boolean that_present_serialized_split = true && that.isSetSerialized_split();
    if (this_present_serialized_split || that_present_serialized_split) {
      if (!(this_present_serialized_split && that_present_serialized_split))
        return false;
      if (!this.serialized_split.equals(that.serialized_split))
        return false;
    }

    boolean this_present_use_kudu_jni_reader = true && this.isSetUse_kudu_jni_reader();
    boolean that_present_use_kudu_jni_reader = true && that.isSetUse_kudu_jni_reader();
    if (this_present_use_kudu_jni_reader || that_present_use_kudu_jni_reader) {
      if (!(this_present_use_kudu_jni_reader && that_present_use_kudu_jni_reader))
        return false;
      if (this.use_kudu_jni_reader != that.use_kudu_jni_reader)
        return false;
    }

    boolean this_present_kudu_master = true && this.isSetKudu_master();
    boolean that_present_kudu_master = true && that.isSetKudu_master();
    if (this_present_kudu_master || that_present_kudu_master) {
      if (!(this_present_kudu_master && that_present_kudu_master))
        return false;
      if (!this.kudu_master.equals(that.kudu_master))
        return false;
    }

    boolean this_present_kudu_scan_token = true && this.isSetKudu_scan_token();
    boolean that_present_kudu_scan_token = true && that.isSetKudu_scan_token();
    if (this_present_kudu_scan_token || that_present_kudu_scan_token) {
      if (!(this_present_kudu_scan_token && that_present_kudu_scan_token))
        return false;
      if (!this.kudu_scan_token.equals(that.kudu_scan_token))
        return false;
    }

    boolean this_present_paimon_deletion_file = true && this.isSetPaimon_deletion_file();
    boolean that_present_paimon_deletion_file = true && that.isSetPaimon_deletion_file();
    if (this_present_paimon_deletion_file || that_present_paimon_deletion_file) {
      if (!(this_present_paimon_deletion_file && that_present_paimon_deletion_file))
        return false;
      if (!this.paimon_deletion_file.equals(that.paimon_deletion_file))
        return false;
    }

    boolean this_present_extended_columns = true && this.isSetExtended_columns();
    boolean that_present_extended_columns = true && that.isSetExtended_columns();
    if (this_present_extended_columns || that_present_extended_columns) {
      if (!(this_present_extended_columns && that_present_extended_columns))
        return false;
      if (!this.extended_columns.equals(that.extended_columns))
        return false;
    }

    boolean this_present_partition_value = true && this.isSetPartition_value();
    boolean that_present_partition_value = true && that.isSetPartition_value();
    if (this_present_partition_value || that_present_partition_value) {
      if (!(this_present_partition_value && that_present_partition_value))
        return false;
      if (!this.partition_value.equals(that.partition_value))
        return false;
    }

    boolean this_present_table_id = true && this.isSetTable_id();
    boolean that_present_table_id = true && that.isSetTable_id();
    if (this_present_table_id || that_present_table_id) {
      if (!(this_present_table_id && that_present_table_id))
        return false;
      if (this.table_id != that.table_id)
        return false;
    }

    boolean this_present_deletion_vector_descriptor = true && this.isSetDeletion_vector_descriptor();
    boolean that_present_deletion_vector_descriptor = true && that.isSetDeletion_vector_descriptor();
    if (this_present_deletion_vector_descriptor || that_present_deletion_vector_descriptor) {
      if (!(this_present_deletion_vector_descriptor && that_present_deletion_vector_descriptor))
        return false;
      if (!this.deletion_vector_descriptor.equals(that.deletion_vector_descriptor))
        return false;
    }

    boolean this_present_candidate_node = true && this.isSetCandidate_node();
    boolean that_present_candidate_node = true && that.isSetCandidate_node();
    if (this_present_candidate_node || that_present_candidate_node) {
      if (!(this_present_candidate_node && that_present_candidate_node))
        return false;
      if (!this.candidate_node.equals(that.candidate_node))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRelative_path()) ? 131071 : 524287);
    if (isSetRelative_path())
      hashCode = hashCode * 8191 + relative_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetOffset()) ? 131071 : 524287);
    if (isSetOffset())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(offset);

    hashCode = hashCode * 8191 + ((isSetLength()) ? 131071 : 524287);
    if (isSetLength())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(length);

    hashCode = hashCode * 8191 + ((isSetPartition_id()) ? 131071 : 524287);
    if (isSetPartition_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_id);

    hashCode = hashCode * 8191 + ((isSetFile_length()) ? 131071 : 524287);
    if (isSetFile_length())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(file_length);

    hashCode = hashCode * 8191 + ((isSetFile_format()) ? 131071 : 524287);
    if (isSetFile_format())
      hashCode = hashCode * 8191 + file_format.getValue();

    hashCode = hashCode * 8191 + ((isSetText_file_desc()) ? 131071 : 524287);
    if (isSetText_file_desc())
      hashCode = hashCode * 8191 + text_file_desc.hashCode();

    hashCode = hashCode * 8191 + ((isSetFull_path()) ? 131071 : 524287);
    if (isSetFull_path())
      hashCode = hashCode * 8191 + full_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetHudi_logs()) ? 131071 : 524287);
    if (isSetHudi_logs())
      hashCode = hashCode * 8191 + hudi_logs.hashCode();

    hashCode = hashCode * 8191 + ((isSetUse_hudi_jni_reader()) ? 131071 : 524287);
    if (isSetUse_hudi_jni_reader())
      hashCode = hashCode * 8191 + ((use_hudi_jni_reader) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDelete_files()) ? 131071 : 524287);
    if (isSetDelete_files())
      hashCode = hashCode * 8191 + delete_files.hashCode();

    hashCode = hashCode * 8191 + ((isSetSkip_header()) ? 131071 : 524287);
    if (isSetSkip_header())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(skip_header);

    hashCode = hashCode * 8191 + ((isSetUse_paimon_jni_reader()) ? 131071 : 524287);
    if (isSetUse_paimon_jni_reader())
      hashCode = hashCode * 8191 + ((use_paimon_jni_reader) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPaimon_split_info()) ? 131071 : 524287);
    if (isSetPaimon_split_info())
      hashCode = hashCode * 8191 + paimon_split_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetPaimon_predicate_info()) ? 131071 : 524287);
    if (isSetPaimon_predicate_info())
      hashCode = hashCode * 8191 + paimon_predicate_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetModification_time()) ? 131071 : 524287);
    if (isSetModification_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(modification_time);

    hashCode = hashCode * 8191 + ((isSetDatacache_options()) ? 131071 : 524287);
    if (isSetDatacache_options())
      hashCode = hashCode * 8191 + datacache_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetIdentity_partition_slot_ids()) ? 131071 : 524287);
    if (isSetIdentity_partition_slot_ids())
      hashCode = hashCode * 8191 + identity_partition_slot_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetUse_odps_jni_reader()) ? 131071 : 524287);
    if (isSetUse_odps_jni_reader())
      hashCode = hashCode * 8191 + ((use_odps_jni_reader) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetOdps_split_infos()) ? 131071 : 524287);
    if (isSetOdps_split_infos())
      hashCode = hashCode * 8191 + odps_split_infos.hashCode();

    hashCode = hashCode * 8191 + ((isSetDelete_column_slot_ids()) ? 131071 : 524287);
    if (isSetDelete_column_slot_ids())
      hashCode = hashCode * 8191 + delete_column_slot_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetUse_iceberg_jni_metadata_reader()) ? 131071 : 524287);
    if (isSetUse_iceberg_jni_metadata_reader())
      hashCode = hashCode * 8191 + ((use_iceberg_jni_metadata_reader) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSerialized_split()) ? 131071 : 524287);
    if (isSetSerialized_split())
      hashCode = hashCode * 8191 + serialized_split.hashCode();

    hashCode = hashCode * 8191 + ((isSetUse_kudu_jni_reader()) ? 131071 : 524287);
    if (isSetUse_kudu_jni_reader())
      hashCode = hashCode * 8191 + ((use_kudu_jni_reader) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetKudu_master()) ? 131071 : 524287);
    if (isSetKudu_master())
      hashCode = hashCode * 8191 + kudu_master.hashCode();

    hashCode = hashCode * 8191 + ((isSetKudu_scan_token()) ? 131071 : 524287);
    if (isSetKudu_scan_token())
      hashCode = hashCode * 8191 + kudu_scan_token.hashCode();

    hashCode = hashCode * 8191 + ((isSetPaimon_deletion_file()) ? 131071 : 524287);
    if (isSetPaimon_deletion_file())
      hashCode = hashCode * 8191 + paimon_deletion_file.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtended_columns()) ? 131071 : 524287);
    if (isSetExtended_columns())
      hashCode = hashCode * 8191 + extended_columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_value()) ? 131071 : 524287);
    if (isSetPartition_value())
      hashCode = hashCode * 8191 + partition_value.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_id()) ? 131071 : 524287);
    if (isSetTable_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(table_id);

    hashCode = hashCode * 8191 + ((isSetDeletion_vector_descriptor()) ? 131071 : 524287);
    if (isSetDeletion_vector_descriptor())
      hashCode = hashCode * 8191 + deletion_vector_descriptor.hashCode();

    hashCode = hashCode * 8191 + ((isSetCandidate_node()) ? 131071 : 524287);
    if (isSetCandidate_node())
      hashCode = hashCode * 8191 + candidate_node.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(THdfsScanRange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetRelative_path(), other.isSetRelative_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelative_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relative_path, other.relative_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOffset(), other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLength(), other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_id(), other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_length(), other.isSetFile_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_length, other.file_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_format(), other.isSetFile_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_format, other.file_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetText_file_desc(), other.isSetText_file_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText_file_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text_file_desc, other.text_file_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFull_path(), other.isSetFull_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFull_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.full_path, other.full_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHudi_logs(), other.isSetHudi_logs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHudi_logs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hudi_logs, other.hudi_logs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_hudi_jni_reader(), other.isSetUse_hudi_jni_reader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_hudi_jni_reader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_hudi_jni_reader, other.use_hudi_jni_reader);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDelete_files(), other.isSetDelete_files());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelete_files()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delete_files, other.delete_files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSkip_header(), other.isSetSkip_header());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkip_header()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skip_header, other.skip_header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_paimon_jni_reader(), other.isSetUse_paimon_jni_reader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_paimon_jni_reader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_paimon_jni_reader, other.use_paimon_jni_reader);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPaimon_split_info(), other.isSetPaimon_split_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaimon_split_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paimon_split_info, other.paimon_split_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPaimon_predicate_info(), other.isSetPaimon_predicate_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaimon_predicate_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paimon_predicate_info, other.paimon_predicate_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetModification_time(), other.isSetModification_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModification_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modification_time, other.modification_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDatacache_options(), other.isSetDatacache_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatacache_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datacache_options, other.datacache_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIdentity_partition_slot_ids(), other.isSetIdentity_partition_slot_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentity_partition_slot_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identity_partition_slot_ids, other.identity_partition_slot_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_odps_jni_reader(), other.isSetUse_odps_jni_reader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_odps_jni_reader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_odps_jni_reader, other.use_odps_jni_reader);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOdps_split_infos(), other.isSetOdps_split_infos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOdps_split_infos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.odps_split_infos, other.odps_split_infos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDelete_column_slot_ids(), other.isSetDelete_column_slot_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelete_column_slot_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delete_column_slot_ids, other.delete_column_slot_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_iceberg_jni_metadata_reader(), other.isSetUse_iceberg_jni_metadata_reader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_iceberg_jni_metadata_reader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_iceberg_jni_metadata_reader, other.use_iceberg_jni_metadata_reader);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSerialized_split(), other.isSetSerialized_split());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerialized_split()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serialized_split, other.serialized_split);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_kudu_jni_reader(), other.isSetUse_kudu_jni_reader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_kudu_jni_reader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_kudu_jni_reader, other.use_kudu_jni_reader);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKudu_master(), other.isSetKudu_master());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_master()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_master, other.kudu_master);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKudu_scan_token(), other.isSetKudu_scan_token());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKudu_scan_token()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kudu_scan_token, other.kudu_scan_token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPaimon_deletion_file(), other.isSetPaimon_deletion_file());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaimon_deletion_file()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paimon_deletion_file, other.paimon_deletion_file);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtended_columns(), other.isSetExtended_columns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtended_columns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extended_columns, other.extended_columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_value(), other.isSetPartition_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_value, other.partition_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_id(), other.isSetTable_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_id, other.table_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDeletion_vector_descriptor(), other.isSetDeletion_vector_descriptor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeletion_vector_descriptor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deletion_vector_descriptor, other.deletion_vector_descriptor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCandidate_node(), other.isSetCandidate_node());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCandidate_node()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidate_node, other.candidate_node);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("THdfsScanRange(");
    boolean first = true;

    if (isSetRelative_path()) {
      sb.append("relative_path:");
      if (this.relative_path == null) {
        sb.append("null");
      } else {
        sb.append(this.relative_path);
      }
      first = false;
    }
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetLength()) {
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
    }
    if (isSetPartition_id()) {
      if (!first) sb.append(", ");
      sb.append("partition_id:");
      sb.append(this.partition_id);
      first = false;
    }
    if (isSetFile_length()) {
      if (!first) sb.append(", ");
      sb.append("file_length:");
      sb.append(this.file_length);
      first = false;
    }
    if (isSetFile_format()) {
      if (!first) sb.append(", ");
      sb.append("file_format:");
      if (this.file_format == null) {
        sb.append("null");
      } else {
        sb.append(this.file_format);
      }
      first = false;
    }
    if (isSetText_file_desc()) {
      if (!first) sb.append(", ");
      sb.append("text_file_desc:");
      if (this.text_file_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.text_file_desc);
      }
      first = false;
    }
    if (isSetFull_path()) {
      if (!first) sb.append(", ");
      sb.append("full_path:");
      if (this.full_path == null) {
        sb.append("null");
      } else {
        sb.append(this.full_path);
      }
      first = false;
    }
    if (isSetHudi_logs()) {
      if (!first) sb.append(", ");
      sb.append("hudi_logs:");
      if (this.hudi_logs == null) {
        sb.append("null");
      } else {
        sb.append(this.hudi_logs);
      }
      first = false;
    }
    if (isSetUse_hudi_jni_reader()) {
      if (!first) sb.append(", ");
      sb.append("use_hudi_jni_reader:");
      sb.append(this.use_hudi_jni_reader);
      first = false;
    }
    if (isSetDelete_files()) {
      if (!first) sb.append(", ");
      sb.append("delete_files:");
      if (this.delete_files == null) {
        sb.append("null");
      } else {
        sb.append(this.delete_files);
      }
      first = false;
    }
    if (isSetSkip_header()) {
      if (!first) sb.append(", ");
      sb.append("skip_header:");
      sb.append(this.skip_header);
      first = false;
    }
    if (isSetUse_paimon_jni_reader()) {
      if (!first) sb.append(", ");
      sb.append("use_paimon_jni_reader:");
      sb.append(this.use_paimon_jni_reader);
      first = false;
    }
    if (isSetPaimon_split_info()) {
      if (!first) sb.append(", ");
      sb.append("paimon_split_info:");
      if (this.paimon_split_info == null) {
        sb.append("null");
      } else {
        sb.append(this.paimon_split_info);
      }
      first = false;
    }
    if (isSetPaimon_predicate_info()) {
      if (!first) sb.append(", ");
      sb.append("paimon_predicate_info:");
      if (this.paimon_predicate_info == null) {
        sb.append("null");
      } else {
        sb.append(this.paimon_predicate_info);
      }
      first = false;
    }
    if (isSetModification_time()) {
      if (!first) sb.append(", ");
      sb.append("modification_time:");
      sb.append(this.modification_time);
      first = false;
    }
    if (isSetDatacache_options()) {
      if (!first) sb.append(", ");
      sb.append("datacache_options:");
      if (this.datacache_options == null) {
        sb.append("null");
      } else {
        sb.append(this.datacache_options);
      }
      first = false;
    }
    if (isSetIdentity_partition_slot_ids()) {
      if (!first) sb.append(", ");
      sb.append("identity_partition_slot_ids:");
      if (this.identity_partition_slot_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.identity_partition_slot_ids);
      }
      first = false;
    }
    if (isSetUse_odps_jni_reader()) {
      if (!first) sb.append(", ");
      sb.append("use_odps_jni_reader:");
      sb.append(this.use_odps_jni_reader);
      first = false;
    }
    if (isSetOdps_split_infos()) {
      if (!first) sb.append(", ");
      sb.append("odps_split_infos:");
      if (this.odps_split_infos == null) {
        sb.append("null");
      } else {
        sb.append(this.odps_split_infos);
      }
      first = false;
    }
    if (isSetDelete_column_slot_ids()) {
      if (!first) sb.append(", ");
      sb.append("delete_column_slot_ids:");
      if (this.delete_column_slot_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.delete_column_slot_ids);
      }
      first = false;
    }
    if (isSetUse_iceberg_jni_metadata_reader()) {
      if (!first) sb.append(", ");
      sb.append("use_iceberg_jni_metadata_reader:");
      sb.append(this.use_iceberg_jni_metadata_reader);
      first = false;
    }
    if (isSetSerialized_split()) {
      if (!first) sb.append(", ");
      sb.append("serialized_split:");
      if (this.serialized_split == null) {
        sb.append("null");
      } else {
        sb.append(this.serialized_split);
      }
      first = false;
    }
    if (isSetUse_kudu_jni_reader()) {
      if (!first) sb.append(", ");
      sb.append("use_kudu_jni_reader:");
      sb.append(this.use_kudu_jni_reader);
      first = false;
    }
    if (isSetKudu_master()) {
      if (!first) sb.append(", ");
      sb.append("kudu_master:");
      if (this.kudu_master == null) {
        sb.append("null");
      } else {
        sb.append(this.kudu_master);
      }
      first = false;
    }
    if (isSetKudu_scan_token()) {
      if (!first) sb.append(", ");
      sb.append("kudu_scan_token:");
      if (this.kudu_scan_token == null) {
        sb.append("null");
      } else {
        sb.append(this.kudu_scan_token);
      }
      first = false;
    }
    if (isSetPaimon_deletion_file()) {
      if (!first) sb.append(", ");
      sb.append("paimon_deletion_file:");
      if (this.paimon_deletion_file == null) {
        sb.append("null");
      } else {
        sb.append(this.paimon_deletion_file);
      }
      first = false;
    }
    if (isSetExtended_columns()) {
      if (!first) sb.append(", ");
      sb.append("extended_columns:");
      if (this.extended_columns == null) {
        sb.append("null");
      } else {
        sb.append(this.extended_columns);
      }
      first = false;
    }
    if (isSetPartition_value()) {
      if (!first) sb.append(", ");
      sb.append("partition_value:");
      if (this.partition_value == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_value);
      }
      first = false;
    }
    if (isSetTable_id()) {
      if (!first) sb.append(", ");
      sb.append("table_id:");
      sb.append(this.table_id);
      first = false;
    }
    if (isSetDeletion_vector_descriptor()) {
      if (!first) sb.append(", ");
      sb.append("deletion_vector_descriptor:");
      if (this.deletion_vector_descriptor == null) {
        sb.append("null");
      } else {
        sb.append(this.deletion_vector_descriptor);
      }
      first = false;
    }
    if (isSetCandidate_node()) {
      if (!first) sb.append(", ");
      sb.append("candidate_node:");
      if (this.candidate_node == null) {
        sb.append("null");
      } else {
        sb.append(this.candidate_node);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (text_file_desc != null) {
      text_file_desc.validate();
    }
    if (datacache_options != null) {
      datacache_options.validate();
    }
    if (paimon_deletion_file != null) {
      paimon_deletion_file.validate();
    }
    if (partition_value != null) {
      partition_value.validate();
    }
    if (deletion_vector_descriptor != null) {
      deletion_vector_descriptor.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THdfsScanRangeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THdfsScanRangeStandardScheme getScheme() {
      return new THdfsScanRangeStandardScheme();
    }
  }

  private static class THdfsScanRangeStandardScheme extends org.apache.thrift.scheme.StandardScheme<THdfsScanRange> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, THdfsScanRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RELATIVE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.relative_path = iprot.readString();
              struct.setRelative_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.length = iprot.readI64();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILE_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.file_length = iprot.readI64();
              struct.setFile_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.file_format = com.starrocks.thrift.THdfsFileFormat.findByValue(iprot.readI32());
              struct.setFile_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TEXT_FILE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.text_file_desc = new com.starrocks.thrift.TTextFileDesc();
              struct.text_file_desc.read(iprot);
              struct.setText_file_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FULL_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.full_path = iprot.readString();
              struct.setFull_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HUDI_LOGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.hudi_logs = new java.util.ArrayList<java.lang.String>(_list112.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem113;
                for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                {
                  _elem113 = iprot.readString();
                  struct.hudi_logs.add(_elem113);
                }
                iprot.readListEnd();
              }
              struct.setHudi_logsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USE_HUDI_JNI_READER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_hudi_jni_reader = iprot.readBool();
              struct.setUse_hudi_jni_readerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DELETE_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list115 = iprot.readListBegin();
                struct.delete_files = new java.util.ArrayList<TIcebergDeleteFile>(_list115.size);
                @org.apache.thrift.annotation.Nullable TIcebergDeleteFile _elem116;
                for (int _i117 = 0; _i117 < _list115.size; ++_i117)
                {
                  _elem116 = new TIcebergDeleteFile();
                  _elem116.read(iprot);
                  struct.delete_files.add(_elem116);
                }
                iprot.readListEnd();
              }
              struct.setDelete_filesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SKIP_HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.skip_header = iprot.readI64();
              struct.setSkip_headerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USE_PAIMON_JNI_READER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_paimon_jni_reader = iprot.readBool();
              struct.setUse_paimon_jni_readerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PAIMON_SPLIT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paimon_split_info = iprot.readString();
              struct.setPaimon_split_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PAIMON_PREDICATE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paimon_predicate_info = iprot.readString();
              struct.setPaimon_predicate_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MODIFICATION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.modification_time = iprot.readI64();
              struct.setModification_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // DATACACHE_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.datacache_options = new com.starrocks.thrift.TDataCacheOptions();
              struct.datacache_options.read(iprot);
              struct.setDatacache_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // IDENTITY_PARTITION_SLOT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list118 = iprot.readListBegin();
                struct.identity_partition_slot_ids = new java.util.ArrayList<java.lang.Integer>(_list118.size);
                int _elem119;
                for (int _i120 = 0; _i120 < _list118.size; ++_i120)
                {
                  _elem119 = iprot.readI32();
                  struct.identity_partition_slot_ids.add(_elem119);
                }
                iprot.readListEnd();
              }
              struct.setIdentity_partition_slot_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // USE_ODPS_JNI_READER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_odps_jni_reader = iprot.readBool();
              struct.setUse_odps_jni_readerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ODPS_SPLIT_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map121 = iprot.readMapBegin();
                struct.odps_split_infos = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map121.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key122;
                @org.apache.thrift.annotation.Nullable java.lang.String _val123;
                for (int _i124 = 0; _i124 < _map121.size; ++_i124)
                {
                  _key122 = iprot.readString();
                  _val123 = iprot.readString();
                  struct.odps_split_infos.put(_key122, _val123);
                }
                iprot.readMapEnd();
              }
              struct.setOdps_split_infosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // DELETE_COLUMN_SLOT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list125 = iprot.readListBegin();
                struct.delete_column_slot_ids = new java.util.ArrayList<java.lang.Integer>(_list125.size);
                int _elem126;
                for (int _i127 = 0; _i127 < _list125.size; ++_i127)
                {
                  _elem126 = iprot.readI32();
                  struct.delete_column_slot_ids.add(_elem126);
                }
                iprot.readListEnd();
              }
              struct.setDelete_column_slot_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // USE_ICEBERG_JNI_METADATA_READER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_iceberg_jni_metadata_reader = iprot.readBool();
              struct.setUse_iceberg_jni_metadata_readerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SERIALIZED_SPLIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serialized_split = iprot.readString();
              struct.setSerialized_splitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // USE_KUDU_JNI_READER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_kudu_jni_reader = iprot.readBool();
              struct.setUse_kudu_jni_readerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // KUDU_MASTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kudu_master = iprot.readString();
              struct.setKudu_masterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // KUDU_SCAN_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kudu_scan_token = iprot.readString();
              struct.setKudu_scan_tokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // PAIMON_DELETION_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.paimon_deletion_file = new TPaimonDeletionFile();
              struct.paimon_deletion_file.read(iprot);
              struct.setPaimon_deletion_fileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // EXTENDED_COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map128 = iprot.readMapBegin();
                struct.extended_columns = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>(2*_map128.size);
                int _key129;
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _val130;
                for (int _i131 = 0; _i131 < _map128.size; ++_i131)
                {
                  _key129 = iprot.readI32();
                  _val130 = new com.starrocks.thrift.TExpr();
                  _val130.read(iprot);
                  struct.extended_columns.put(_key129, _val130);
                }
                iprot.readMapEnd();
              }
              struct.setExtended_columnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PARTITION_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.partition_value = new com.starrocks.thrift.THdfsPartition();
              struct.partition_value.read(iprot);
              struct.setPartition_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // TABLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.table_id = iprot.readI64();
              struct.setTable_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // DELETION_VECTOR_DESCRIPTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deletion_vector_descriptor = new TDeletionVectorDescriptor();
              struct.deletion_vector_descriptor.read(iprot);
              struct.setDeletion_vector_descriptorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // CANDIDATE_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.candidate_node = iprot.readString();
              struct.setCandidate_nodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, THdfsScanRange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.relative_path != null) {
        if (struct.isSetRelative_path()) {
          oprot.writeFieldBegin(RELATIVE_PATH_FIELD_DESC);
          oprot.writeString(struct.relative_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI64(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLength()) {
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI64(struct.length);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartition_id()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partition_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFile_length()) {
        oprot.writeFieldBegin(FILE_LENGTH_FIELD_DESC);
        oprot.writeI64(struct.file_length);
        oprot.writeFieldEnd();
      }
      if (struct.file_format != null) {
        if (struct.isSetFile_format()) {
          oprot.writeFieldBegin(FILE_FORMAT_FIELD_DESC);
          oprot.writeI32(struct.file_format.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.text_file_desc != null) {
        if (struct.isSetText_file_desc()) {
          oprot.writeFieldBegin(TEXT_FILE_DESC_FIELD_DESC);
          struct.text_file_desc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.full_path != null) {
        if (struct.isSetFull_path()) {
          oprot.writeFieldBegin(FULL_PATH_FIELD_DESC);
          oprot.writeString(struct.full_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hudi_logs != null) {
        if (struct.isSetHudi_logs()) {
          oprot.writeFieldBegin(HUDI_LOGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.hudi_logs.size()));
            for (java.lang.String _iter132 : struct.hudi_logs)
            {
              oprot.writeString(_iter132);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUse_hudi_jni_reader()) {
        oprot.writeFieldBegin(USE_HUDI_JNI_READER_FIELD_DESC);
        oprot.writeBool(struct.use_hudi_jni_reader);
        oprot.writeFieldEnd();
      }
      if (struct.delete_files != null) {
        if (struct.isSetDelete_files()) {
          oprot.writeFieldBegin(DELETE_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.delete_files.size()));
            for (TIcebergDeleteFile _iter133 : struct.delete_files)
            {
              _iter133.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSkip_header()) {
        oprot.writeFieldBegin(SKIP_HEADER_FIELD_DESC);
        oprot.writeI64(struct.skip_header);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUse_paimon_jni_reader()) {
        oprot.writeFieldBegin(USE_PAIMON_JNI_READER_FIELD_DESC);
        oprot.writeBool(struct.use_paimon_jni_reader);
        oprot.writeFieldEnd();
      }
      if (struct.paimon_split_info != null) {
        if (struct.isSetPaimon_split_info()) {
          oprot.writeFieldBegin(PAIMON_SPLIT_INFO_FIELD_DESC);
          oprot.writeString(struct.paimon_split_info);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paimon_predicate_info != null) {
        if (struct.isSetPaimon_predicate_info()) {
          oprot.writeFieldBegin(PAIMON_PREDICATE_INFO_FIELD_DESC);
          oprot.writeString(struct.paimon_predicate_info);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetModification_time()) {
        oprot.writeFieldBegin(MODIFICATION_TIME_FIELD_DESC);
        oprot.writeI64(struct.modification_time);
        oprot.writeFieldEnd();
      }
      if (struct.datacache_options != null) {
        if (struct.isSetDatacache_options()) {
          oprot.writeFieldBegin(DATACACHE_OPTIONS_FIELD_DESC);
          struct.datacache_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.identity_partition_slot_ids != null) {
        if (struct.isSetIdentity_partition_slot_ids()) {
          oprot.writeFieldBegin(IDENTITY_PARTITION_SLOT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.identity_partition_slot_ids.size()));
            for (int _iter134 : struct.identity_partition_slot_ids)
            {
              oprot.writeI32(_iter134);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUse_odps_jni_reader()) {
        oprot.writeFieldBegin(USE_ODPS_JNI_READER_FIELD_DESC);
        oprot.writeBool(struct.use_odps_jni_reader);
        oprot.writeFieldEnd();
      }
      if (struct.odps_split_infos != null) {
        if (struct.isSetOdps_split_infos()) {
          oprot.writeFieldBegin(ODPS_SPLIT_INFOS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.odps_split_infos.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter135 : struct.odps_split_infos.entrySet())
            {
              oprot.writeString(_iter135.getKey());
              oprot.writeString(_iter135.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.delete_column_slot_ids != null) {
        if (struct.isSetDelete_column_slot_ids()) {
          oprot.writeFieldBegin(DELETE_COLUMN_SLOT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.delete_column_slot_ids.size()));
            for (int _iter136 : struct.delete_column_slot_ids)
            {
              oprot.writeI32(_iter136);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUse_iceberg_jni_metadata_reader()) {
        oprot.writeFieldBegin(USE_ICEBERG_JNI_METADATA_READER_FIELD_DESC);
        oprot.writeBool(struct.use_iceberg_jni_metadata_reader);
        oprot.writeFieldEnd();
      }
      if (struct.serialized_split != null) {
        if (struct.isSetSerialized_split()) {
          oprot.writeFieldBegin(SERIALIZED_SPLIT_FIELD_DESC);
          oprot.writeString(struct.serialized_split);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUse_kudu_jni_reader()) {
        oprot.writeFieldBegin(USE_KUDU_JNI_READER_FIELD_DESC);
        oprot.writeBool(struct.use_kudu_jni_reader);
        oprot.writeFieldEnd();
      }
      if (struct.kudu_master != null) {
        if (struct.isSetKudu_master()) {
          oprot.writeFieldBegin(KUDU_MASTER_FIELD_DESC);
          oprot.writeString(struct.kudu_master);
          oprot.writeFieldEnd();
        }
      }
      if (struct.kudu_scan_token != null) {
        if (struct.isSetKudu_scan_token()) {
          oprot.writeFieldBegin(KUDU_SCAN_TOKEN_FIELD_DESC);
          oprot.writeString(struct.kudu_scan_token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.paimon_deletion_file != null) {
        if (struct.isSetPaimon_deletion_file()) {
          oprot.writeFieldBegin(PAIMON_DELETION_FILE_FIELD_DESC);
          struct.paimon_deletion_file.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extended_columns != null) {
        if (struct.isSetExtended_columns()) {
          oprot.writeFieldBegin(EXTENDED_COLUMNS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.extended_columns.size()));
            for (java.util.Map.Entry<java.lang.Integer, com.starrocks.thrift.TExpr> _iter137 : struct.extended_columns.entrySet())
            {
              oprot.writeI32(_iter137.getKey());
              _iter137.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_value != null) {
        if (struct.isSetPartition_value()) {
          oprot.writeFieldBegin(PARTITION_VALUE_FIELD_DESC);
          struct.partition_value.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTable_id()) {
        oprot.writeFieldBegin(TABLE_ID_FIELD_DESC);
        oprot.writeI64(struct.table_id);
        oprot.writeFieldEnd();
      }
      if (struct.deletion_vector_descriptor != null) {
        if (struct.isSetDeletion_vector_descriptor()) {
          oprot.writeFieldBegin(DELETION_VECTOR_DESCRIPTOR_FIELD_DESC);
          struct.deletion_vector_descriptor.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.candidate_node != null) {
        if (struct.isSetCandidate_node()) {
          oprot.writeFieldBegin(CANDIDATE_NODE_FIELD_DESC);
          oprot.writeString(struct.candidate_node);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THdfsScanRangeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THdfsScanRangeTupleScheme getScheme() {
      return new THdfsScanRangeTupleScheme();
    }
  }

  private static class THdfsScanRangeTupleScheme extends org.apache.thrift.scheme.TupleScheme<THdfsScanRange> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THdfsScanRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRelative_path()) {
        optionals.set(0);
      }
      if (struct.isSetOffset()) {
        optionals.set(1);
      }
      if (struct.isSetLength()) {
        optionals.set(2);
      }
      if (struct.isSetPartition_id()) {
        optionals.set(3);
      }
      if (struct.isSetFile_length()) {
        optionals.set(4);
      }
      if (struct.isSetFile_format()) {
        optionals.set(5);
      }
      if (struct.isSetText_file_desc()) {
        optionals.set(6);
      }
      if (struct.isSetFull_path()) {
        optionals.set(7);
      }
      if (struct.isSetHudi_logs()) {
        optionals.set(8);
      }
      if (struct.isSetUse_hudi_jni_reader()) {
        optionals.set(9);
      }
      if (struct.isSetDelete_files()) {
        optionals.set(10);
      }
      if (struct.isSetSkip_header()) {
        optionals.set(11);
      }
      if (struct.isSetUse_paimon_jni_reader()) {
        optionals.set(12);
      }
      if (struct.isSetPaimon_split_info()) {
        optionals.set(13);
      }
      if (struct.isSetPaimon_predicate_info()) {
        optionals.set(14);
      }
      if (struct.isSetModification_time()) {
        optionals.set(15);
      }
      if (struct.isSetDatacache_options()) {
        optionals.set(16);
      }
      if (struct.isSetIdentity_partition_slot_ids()) {
        optionals.set(17);
      }
      if (struct.isSetUse_odps_jni_reader()) {
        optionals.set(18);
      }
      if (struct.isSetOdps_split_infos()) {
        optionals.set(19);
      }
      if (struct.isSetDelete_column_slot_ids()) {
        optionals.set(20);
      }
      if (struct.isSetUse_iceberg_jni_metadata_reader()) {
        optionals.set(21);
      }
      if (struct.isSetSerialized_split()) {
        optionals.set(22);
      }
      if (struct.isSetUse_kudu_jni_reader()) {
        optionals.set(23);
      }
      if (struct.isSetKudu_master()) {
        optionals.set(24);
      }
      if (struct.isSetKudu_scan_token()) {
        optionals.set(25);
      }
      if (struct.isSetPaimon_deletion_file()) {
        optionals.set(26);
      }
      if (struct.isSetExtended_columns()) {
        optionals.set(27);
      }
      if (struct.isSetPartition_value()) {
        optionals.set(28);
      }
      if (struct.isSetTable_id()) {
        optionals.set(29);
      }
      if (struct.isSetDeletion_vector_descriptor()) {
        optionals.set(30);
      }
      if (struct.isSetCandidate_node()) {
        optionals.set(31);
      }
      oprot.writeBitSet(optionals, 32);
      if (struct.isSetRelative_path()) {
        oprot.writeString(struct.relative_path);
      }
      if (struct.isSetOffset()) {
        oprot.writeI64(struct.offset);
      }
      if (struct.isSetLength()) {
        oprot.writeI64(struct.length);
      }
      if (struct.isSetPartition_id()) {
        oprot.writeI64(struct.partition_id);
      }
      if (struct.isSetFile_length()) {
        oprot.writeI64(struct.file_length);
      }
      if (struct.isSetFile_format()) {
        oprot.writeI32(struct.file_format.getValue());
      }
      if (struct.isSetText_file_desc()) {
        struct.text_file_desc.write(oprot);
      }
      if (struct.isSetFull_path()) {
        oprot.writeString(struct.full_path);
      }
      if (struct.isSetHudi_logs()) {
        {
          oprot.writeI32(struct.hudi_logs.size());
          for (java.lang.String _iter138 : struct.hudi_logs)
          {
            oprot.writeString(_iter138);
          }
        }
      }
      if (struct.isSetUse_hudi_jni_reader()) {
        oprot.writeBool(struct.use_hudi_jni_reader);
      }
      if (struct.isSetDelete_files()) {
        {
          oprot.writeI32(struct.delete_files.size());
          for (TIcebergDeleteFile _iter139 : struct.delete_files)
          {
            _iter139.write(oprot);
          }
        }
      }
      if (struct.isSetSkip_header()) {
        oprot.writeI64(struct.skip_header);
      }
      if (struct.isSetUse_paimon_jni_reader()) {
        oprot.writeBool(struct.use_paimon_jni_reader);
      }
      if (struct.isSetPaimon_split_info()) {
        oprot.writeString(struct.paimon_split_info);
      }
      if (struct.isSetPaimon_predicate_info()) {
        oprot.writeString(struct.paimon_predicate_info);
      }
      if (struct.isSetModification_time()) {
        oprot.writeI64(struct.modification_time);
      }
      if (struct.isSetDatacache_options()) {
        struct.datacache_options.write(oprot);
      }
      if (struct.isSetIdentity_partition_slot_ids()) {
        {
          oprot.writeI32(struct.identity_partition_slot_ids.size());
          for (int _iter140 : struct.identity_partition_slot_ids)
          {
            oprot.writeI32(_iter140);
          }
        }
      }
      if (struct.isSetUse_odps_jni_reader()) {
        oprot.writeBool(struct.use_odps_jni_reader);
      }
      if (struct.isSetOdps_split_infos()) {
        {
          oprot.writeI32(struct.odps_split_infos.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter141 : struct.odps_split_infos.entrySet())
          {
            oprot.writeString(_iter141.getKey());
            oprot.writeString(_iter141.getValue());
          }
        }
      }
      if (struct.isSetDelete_column_slot_ids()) {
        {
          oprot.writeI32(struct.delete_column_slot_ids.size());
          for (int _iter142 : struct.delete_column_slot_ids)
          {
            oprot.writeI32(_iter142);
          }
        }
      }
      if (struct.isSetUse_iceberg_jni_metadata_reader()) {
        oprot.writeBool(struct.use_iceberg_jni_metadata_reader);
      }
      if (struct.isSetSerialized_split()) {
        oprot.writeString(struct.serialized_split);
      }
      if (struct.isSetUse_kudu_jni_reader()) {
        oprot.writeBool(struct.use_kudu_jni_reader);
      }
      if (struct.isSetKudu_master()) {
        oprot.writeString(struct.kudu_master);
      }
      if (struct.isSetKudu_scan_token()) {
        oprot.writeString(struct.kudu_scan_token);
      }
      if (struct.isSetPaimon_deletion_file()) {
        struct.paimon_deletion_file.write(oprot);
      }
      if (struct.isSetExtended_columns()) {
        {
          oprot.writeI32(struct.extended_columns.size());
          for (java.util.Map.Entry<java.lang.Integer, com.starrocks.thrift.TExpr> _iter143 : struct.extended_columns.entrySet())
          {
            oprot.writeI32(_iter143.getKey());
            _iter143.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetPartition_value()) {
        struct.partition_value.write(oprot);
      }
      if (struct.isSetTable_id()) {
        oprot.writeI64(struct.table_id);
      }
      if (struct.isSetDeletion_vector_descriptor()) {
        struct.deletion_vector_descriptor.write(oprot);
      }
      if (struct.isSetCandidate_node()) {
        oprot.writeString(struct.candidate_node);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THdfsScanRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(32);
      if (incoming.get(0)) {
        struct.relative_path = iprot.readString();
        struct.setRelative_pathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.offset = iprot.readI64();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(2)) {
        struct.length = iprot.readI64();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(3)) {
        struct.partition_id = iprot.readI64();
        struct.setPartition_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.file_length = iprot.readI64();
        struct.setFile_lengthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.file_format = com.starrocks.thrift.THdfsFileFormat.findByValue(iprot.readI32());
        struct.setFile_formatIsSet(true);
      }
      if (incoming.get(6)) {
        struct.text_file_desc = new com.starrocks.thrift.TTextFileDesc();
        struct.text_file_desc.read(iprot);
        struct.setText_file_descIsSet(true);
      }
      if (incoming.get(7)) {
        struct.full_path = iprot.readString();
        struct.setFull_pathIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list144 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.hudi_logs = new java.util.ArrayList<java.lang.String>(_list144.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem145;
          for (int _i146 = 0; _i146 < _list144.size; ++_i146)
          {
            _elem145 = iprot.readString();
            struct.hudi_logs.add(_elem145);
          }
        }
        struct.setHudi_logsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.use_hudi_jni_reader = iprot.readBool();
        struct.setUse_hudi_jni_readerIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list147 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.delete_files = new java.util.ArrayList<TIcebergDeleteFile>(_list147.size);
          @org.apache.thrift.annotation.Nullable TIcebergDeleteFile _elem148;
          for (int _i149 = 0; _i149 < _list147.size; ++_i149)
          {
            _elem148 = new TIcebergDeleteFile();
            _elem148.read(iprot);
            struct.delete_files.add(_elem148);
          }
        }
        struct.setDelete_filesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.skip_header = iprot.readI64();
        struct.setSkip_headerIsSet(true);
      }
      if (incoming.get(12)) {
        struct.use_paimon_jni_reader = iprot.readBool();
        struct.setUse_paimon_jni_readerIsSet(true);
      }
      if (incoming.get(13)) {
        struct.paimon_split_info = iprot.readString();
        struct.setPaimon_split_infoIsSet(true);
      }
      if (incoming.get(14)) {
        struct.paimon_predicate_info = iprot.readString();
        struct.setPaimon_predicate_infoIsSet(true);
      }
      if (incoming.get(15)) {
        struct.modification_time = iprot.readI64();
        struct.setModification_timeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.datacache_options = new com.starrocks.thrift.TDataCacheOptions();
        struct.datacache_options.read(iprot);
        struct.setDatacache_optionsIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list150 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.identity_partition_slot_ids = new java.util.ArrayList<java.lang.Integer>(_list150.size);
          int _elem151;
          for (int _i152 = 0; _i152 < _list150.size; ++_i152)
          {
            _elem151 = iprot.readI32();
            struct.identity_partition_slot_ids.add(_elem151);
          }
        }
        struct.setIdentity_partition_slot_idsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.use_odps_jni_reader = iprot.readBool();
        struct.setUse_odps_jni_readerIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TMap _map153 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.odps_split_infos = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map153.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key154;
          @org.apache.thrift.annotation.Nullable java.lang.String _val155;
          for (int _i156 = 0; _i156 < _map153.size; ++_i156)
          {
            _key154 = iprot.readString();
            _val155 = iprot.readString();
            struct.odps_split_infos.put(_key154, _val155);
          }
        }
        struct.setOdps_split_infosIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list157 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.delete_column_slot_ids = new java.util.ArrayList<java.lang.Integer>(_list157.size);
          int _elem158;
          for (int _i159 = 0; _i159 < _list157.size; ++_i159)
          {
            _elem158 = iprot.readI32();
            struct.delete_column_slot_ids.add(_elem158);
          }
        }
        struct.setDelete_column_slot_idsIsSet(true);
      }
      if (incoming.get(21)) {
        struct.use_iceberg_jni_metadata_reader = iprot.readBool();
        struct.setUse_iceberg_jni_metadata_readerIsSet(true);
      }
      if (incoming.get(22)) {
        struct.serialized_split = iprot.readString();
        struct.setSerialized_splitIsSet(true);
      }
      if (incoming.get(23)) {
        struct.use_kudu_jni_reader = iprot.readBool();
        struct.setUse_kudu_jni_readerIsSet(true);
      }
      if (incoming.get(24)) {
        struct.kudu_master = iprot.readString();
        struct.setKudu_masterIsSet(true);
      }
      if (incoming.get(25)) {
        struct.kudu_scan_token = iprot.readString();
        struct.setKudu_scan_tokenIsSet(true);
      }
      if (incoming.get(26)) {
        struct.paimon_deletion_file = new TPaimonDeletionFile();
        struct.paimon_deletion_file.read(iprot);
        struct.setPaimon_deletion_fileIsSet(true);
      }
      if (incoming.get(27)) {
        {
          org.apache.thrift.protocol.TMap _map160 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT); 
          struct.extended_columns = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>(2*_map160.size);
          int _key161;
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _val162;
          for (int _i163 = 0; _i163 < _map160.size; ++_i163)
          {
            _key161 = iprot.readI32();
            _val162 = new com.starrocks.thrift.TExpr();
            _val162.read(iprot);
            struct.extended_columns.put(_key161, _val162);
          }
        }
        struct.setExtended_columnsIsSet(true);
      }
      if (incoming.get(28)) {
        struct.partition_value = new com.starrocks.thrift.THdfsPartition();
        struct.partition_value.read(iprot);
        struct.setPartition_valueIsSet(true);
      }
      if (incoming.get(29)) {
        struct.table_id = iprot.readI64();
        struct.setTable_idIsSet(true);
      }
      if (incoming.get(30)) {
        struct.deletion_vector_descriptor = new TDeletionVectorDescriptor();
        struct.deletion_vector_descriptor.read(iprot);
        struct.setDeletion_vector_descriptorIsSet(true);
      }
      if (incoming.get(31)) {
        struct.candidate_node = iprot.readString();
        struct.setCandidate_nodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

