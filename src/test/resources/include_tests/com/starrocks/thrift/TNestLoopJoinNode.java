/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TNestLoopJoinNode implements org.apache.thrift.TBase<TNestLoopJoinNode, TNestLoopJoinNode._Fields>, java.io.Serializable, Cloneable, Comparable<TNestLoopJoinNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNestLoopJoinNode");

  private static final org.apache.thrift.protocol.TField JOIN_OP_FIELD_DESC = new org.apache.thrift.protocol.TField("join_op", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BUILD_RUNTIME_FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("build_runtime_filters", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField JOIN_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("join_conjuncts", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SQL_JOIN_CONJUNCTS_FIELD_DESC = new org.apache.thrift.protocol.TField("sql_join_conjuncts", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INTERPOLATE_PASSTHROUGH_FIELD_DESC = new org.apache.thrift.protocol.TField("interpolate_passthrough", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TNestLoopJoinNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TNestLoopJoinNodeTupleSchemeFactory();

  /**
   * 
   * @see TJoinOp
   */
  public @org.apache.thrift.annotation.Nullable TJoinOp join_op; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TRuntimeFilterDescription> build_runtime_filters; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> join_conjuncts; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sql_join_conjuncts; // optional
  public boolean interpolate_passthrough; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TJoinOp
     */
    JOIN_OP((short)1, "join_op"),
    BUILD_RUNTIME_FILTERS((short)2, "build_runtime_filters"),
    JOIN_CONJUNCTS((short)3, "join_conjuncts"),
    SQL_JOIN_CONJUNCTS((short)4, "sql_join_conjuncts"),
    INTERPOLATE_PASSTHROUGH((short)5, "interpolate_passthrough");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOIN_OP
          return JOIN_OP;
        case 2: // BUILD_RUNTIME_FILTERS
          return BUILD_RUNTIME_FILTERS;
        case 3: // JOIN_CONJUNCTS
          return JOIN_CONJUNCTS;
        case 4: // SQL_JOIN_CONJUNCTS
          return SQL_JOIN_CONJUNCTS;
        case 5: // INTERPOLATE_PASSTHROUGH
          return INTERPOLATE_PASSTHROUGH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INTERPOLATE_PASSTHROUGH_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.JOIN_OP,_Fields.BUILD_RUNTIME_FILTERS,_Fields.JOIN_CONJUNCTS,_Fields.SQL_JOIN_CONJUNCTS,_Fields.INTERPOLATE_PASSTHROUGH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOIN_OP, new org.apache.thrift.meta_data.FieldMetaData("join_op", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TJoinOp.class)));
    tmpMap.put(_Fields.BUILD_RUNTIME_FILTERS, new org.apache.thrift.meta_data.FieldMetaData("build_runtime_filters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TRuntimeFilterDescription.class))));
    tmpMap.put(_Fields.JOIN_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("join_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class))));
    tmpMap.put(_Fields.SQL_JOIN_CONJUNCTS, new org.apache.thrift.meta_data.FieldMetaData("sql_join_conjuncts", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERPOLATE_PASSTHROUGH, new org.apache.thrift.meta_data.FieldMetaData("interpolate_passthrough", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNestLoopJoinNode.class, metaDataMap);
  }

  public TNestLoopJoinNode() {
    this.interpolate_passthrough = false;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNestLoopJoinNode(TNestLoopJoinNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetJoin_op()) {
      this.join_op = other.join_op;
    }
    if (other.isSetBuild_runtime_filters()) {
      java.util.List<com.starrocks.thrift.TRuntimeFilterDescription> __this__build_runtime_filters = new java.util.ArrayList<com.starrocks.thrift.TRuntimeFilterDescription>(other.build_runtime_filters.size());
      for (com.starrocks.thrift.TRuntimeFilterDescription other_element : other.build_runtime_filters) {
        __this__build_runtime_filters.add(new com.starrocks.thrift.TRuntimeFilterDescription(other_element));
      }
      this.build_runtime_filters = __this__build_runtime_filters;
    }
    if (other.isSetJoin_conjuncts()) {
      java.util.List<com.starrocks.thrift.TExpr> __this__join_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(other.join_conjuncts.size());
      for (com.starrocks.thrift.TExpr other_element : other.join_conjuncts) {
        __this__join_conjuncts.add(new com.starrocks.thrift.TExpr(other_element));
      }
      this.join_conjuncts = __this__join_conjuncts;
    }
    if (other.isSetSql_join_conjuncts()) {
      this.sql_join_conjuncts = other.sql_join_conjuncts;
    }
    this.interpolate_passthrough = other.interpolate_passthrough;
  }

  @Override
  public TNestLoopJoinNode deepCopy() {
    return new TNestLoopJoinNode(this);
  }

  @Override
  public void clear() {
    this.join_op = null;
    this.build_runtime_filters = null;
    this.join_conjuncts = null;
    this.sql_join_conjuncts = null;
    this.interpolate_passthrough = false;

  }

  /**
   * 
   * @see TJoinOp
   */
  @org.apache.thrift.annotation.Nullable
  public TJoinOp getJoin_op() {
    return this.join_op;
  }

  /**
   * 
   * @see TJoinOp
   */
  public TNestLoopJoinNode setJoin_op(@org.apache.thrift.annotation.Nullable TJoinOp join_op) {
    this.join_op = join_op;
    return this;
  }

  public void unsetJoin_op() {
    this.join_op = null;
  }

  /** Returns true if field join_op is set (has been assigned a value) and false otherwise */
  public boolean isSetJoin_op() {
    return this.join_op != null;
  }

  public void setJoin_opIsSet(boolean value) {
    if (!value) {
      this.join_op = null;
    }
  }

  public int getBuild_runtime_filtersSize() {
    return (this.build_runtime_filters == null) ? 0 : this.build_runtime_filters.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TRuntimeFilterDescription> getBuild_runtime_filtersIterator() {
    return (this.build_runtime_filters == null) ? null : this.build_runtime_filters.iterator();
  }

  public void addToBuild_runtime_filters(com.starrocks.thrift.TRuntimeFilterDescription elem) {
    if (this.build_runtime_filters == null) {
      this.build_runtime_filters = new java.util.ArrayList<com.starrocks.thrift.TRuntimeFilterDescription>();
    }
    this.build_runtime_filters.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TRuntimeFilterDescription> getBuild_runtime_filters() {
    return this.build_runtime_filters;
  }

  public TNestLoopJoinNode setBuild_runtime_filters(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TRuntimeFilterDescription> build_runtime_filters) {
    this.build_runtime_filters = build_runtime_filters;
    return this;
  }

  public void unsetBuild_runtime_filters() {
    this.build_runtime_filters = null;
  }

  /** Returns true if field build_runtime_filters is set (has been assigned a value) and false otherwise */
  public boolean isSetBuild_runtime_filters() {
    return this.build_runtime_filters != null;
  }

  public void setBuild_runtime_filtersIsSet(boolean value) {
    if (!value) {
      this.build_runtime_filters = null;
    }
  }

  public int getJoin_conjunctsSize() {
    return (this.join_conjuncts == null) ? 0 : this.join_conjuncts.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TExpr> getJoin_conjunctsIterator() {
    return (this.join_conjuncts == null) ? null : this.join_conjuncts.iterator();
  }

  public void addToJoin_conjuncts(com.starrocks.thrift.TExpr elem) {
    if (this.join_conjuncts == null) {
      this.join_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>();
    }
    this.join_conjuncts.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TExpr> getJoin_conjuncts() {
    return this.join_conjuncts;
  }

  public TNestLoopJoinNode setJoin_conjuncts(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TExpr> join_conjuncts) {
    this.join_conjuncts = join_conjuncts;
    return this;
  }

  public void unsetJoin_conjuncts() {
    this.join_conjuncts = null;
  }

  /** Returns true if field join_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetJoin_conjuncts() {
    return this.join_conjuncts != null;
  }

  public void setJoin_conjunctsIsSet(boolean value) {
    if (!value) {
      this.join_conjuncts = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSql_join_conjuncts() {
    return this.sql_join_conjuncts;
  }

  public TNestLoopJoinNode setSql_join_conjuncts(@org.apache.thrift.annotation.Nullable java.lang.String sql_join_conjuncts) {
    this.sql_join_conjuncts = sql_join_conjuncts;
    return this;
  }

  public void unsetSql_join_conjuncts() {
    this.sql_join_conjuncts = null;
  }

  /** Returns true if field sql_join_conjuncts is set (has been assigned a value) and false otherwise */
  public boolean isSetSql_join_conjuncts() {
    return this.sql_join_conjuncts != null;
  }

  public void setSql_join_conjunctsIsSet(boolean value) {
    if (!value) {
      this.sql_join_conjuncts = null;
    }
  }

  public boolean isInterpolate_passthrough() {
    return this.interpolate_passthrough;
  }

  public TNestLoopJoinNode setInterpolate_passthrough(boolean interpolate_passthrough) {
    this.interpolate_passthrough = interpolate_passthrough;
    setInterpolate_passthroughIsSet(true);
    return this;
  }

  public void unsetInterpolate_passthrough() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INTERPOLATE_PASSTHROUGH_ISSET_ID);
  }

  /** Returns true if field interpolate_passthrough is set (has been assigned a value) and false otherwise */
  public boolean isSetInterpolate_passthrough() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INTERPOLATE_PASSTHROUGH_ISSET_ID);
  }

  public void setInterpolate_passthroughIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INTERPOLATE_PASSTHROUGH_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case JOIN_OP:
      if (value == null) {
        unsetJoin_op();
      } else {
        setJoin_op((TJoinOp)value);
      }
      break;

    case BUILD_RUNTIME_FILTERS:
      if (value == null) {
        unsetBuild_runtime_filters();
      } else {
        setBuild_runtime_filters((java.util.List<com.starrocks.thrift.TRuntimeFilterDescription>)value);
      }
      break;

    case JOIN_CONJUNCTS:
      if (value == null) {
        unsetJoin_conjuncts();
      } else {
        setJoin_conjuncts((java.util.List<com.starrocks.thrift.TExpr>)value);
      }
      break;

    case SQL_JOIN_CONJUNCTS:
      if (value == null) {
        unsetSql_join_conjuncts();
      } else {
        setSql_join_conjuncts((java.lang.String)value);
      }
      break;

    case INTERPOLATE_PASSTHROUGH:
      if (value == null) {
        unsetInterpolate_passthrough();
      } else {
        setInterpolate_passthrough((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case JOIN_OP:
      return getJoin_op();

    case BUILD_RUNTIME_FILTERS:
      return getBuild_runtime_filters();

    case JOIN_CONJUNCTS:
      return getJoin_conjuncts();

    case SQL_JOIN_CONJUNCTS:
      return getSql_join_conjuncts();

    case INTERPOLATE_PASSTHROUGH:
      return isInterpolate_passthrough();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case JOIN_OP:
      return isSetJoin_op();
    case BUILD_RUNTIME_FILTERS:
      return isSetBuild_runtime_filters();
    case JOIN_CONJUNCTS:
      return isSetJoin_conjuncts();
    case SQL_JOIN_CONJUNCTS:
      return isSetSql_join_conjuncts();
    case INTERPOLATE_PASSTHROUGH:
      return isSetInterpolate_passthrough();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TNestLoopJoinNode)
      return this.equals((TNestLoopJoinNode)that);
    return false;
  }

  public boolean equals(TNestLoopJoinNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_join_op = true && this.isSetJoin_op();
    boolean that_present_join_op = true && that.isSetJoin_op();
    if (this_present_join_op || that_present_join_op) {
      if (!(this_present_join_op && that_present_join_op))
        return false;
      if (!this.join_op.equals(that.join_op))
        return false;
    }

    boolean this_present_build_runtime_filters = true && this.isSetBuild_runtime_filters();
    boolean that_present_build_runtime_filters = true && that.isSetBuild_runtime_filters();
    if (this_present_build_runtime_filters || that_present_build_runtime_filters) {
      if (!(this_present_build_runtime_filters && that_present_build_runtime_filters))
        return false;
      if (!this.build_runtime_filters.equals(that.build_runtime_filters))
        return false;
    }

    boolean this_present_join_conjuncts = true && this.isSetJoin_conjuncts();
    boolean that_present_join_conjuncts = true && that.isSetJoin_conjuncts();
    if (this_present_join_conjuncts || that_present_join_conjuncts) {
      if (!(this_present_join_conjuncts && that_present_join_conjuncts))
        return false;
      if (!this.join_conjuncts.equals(that.join_conjuncts))
        return false;
    }

    boolean this_present_sql_join_conjuncts = true && this.isSetSql_join_conjuncts();
    boolean that_present_sql_join_conjuncts = true && that.isSetSql_join_conjuncts();
    if (this_present_sql_join_conjuncts || that_present_sql_join_conjuncts) {
      if (!(this_present_sql_join_conjuncts && that_present_sql_join_conjuncts))
        return false;
      if (!this.sql_join_conjuncts.equals(that.sql_join_conjuncts))
        return false;
    }

    boolean this_present_interpolate_passthrough = true && this.isSetInterpolate_passthrough();
    boolean that_present_interpolate_passthrough = true && that.isSetInterpolate_passthrough();
    if (this_present_interpolate_passthrough || that_present_interpolate_passthrough) {
      if (!(this_present_interpolate_passthrough && that_present_interpolate_passthrough))
        return false;
      if (this.interpolate_passthrough != that.interpolate_passthrough)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetJoin_op()) ? 131071 : 524287);
    if (isSetJoin_op())
      hashCode = hashCode * 8191 + join_op.getValue();

    hashCode = hashCode * 8191 + ((isSetBuild_runtime_filters()) ? 131071 : 524287);
    if (isSetBuild_runtime_filters())
      hashCode = hashCode * 8191 + build_runtime_filters.hashCode();

    hashCode = hashCode * 8191 + ((isSetJoin_conjuncts()) ? 131071 : 524287);
    if (isSetJoin_conjuncts())
      hashCode = hashCode * 8191 + join_conjuncts.hashCode();

    hashCode = hashCode * 8191 + ((isSetSql_join_conjuncts()) ? 131071 : 524287);
    if (isSetSql_join_conjuncts())
      hashCode = hashCode * 8191 + sql_join_conjuncts.hashCode();

    hashCode = hashCode * 8191 + ((isSetInterpolate_passthrough()) ? 131071 : 524287);
    if (isSetInterpolate_passthrough())
      hashCode = hashCode * 8191 + ((interpolate_passthrough) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TNestLoopJoinNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetJoin_op(), other.isSetJoin_op());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoin_op()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join_op, other.join_op);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBuild_runtime_filters(), other.isSetBuild_runtime_filters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuild_runtime_filters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.build_runtime_filters, other.build_runtime_filters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJoin_conjuncts(), other.isSetJoin_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoin_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.join_conjuncts, other.join_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSql_join_conjuncts(), other.isSetSql_join_conjuncts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSql_join_conjuncts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql_join_conjuncts, other.sql_join_conjuncts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInterpolate_passthrough(), other.isSetInterpolate_passthrough());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterpolate_passthrough()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interpolate_passthrough, other.interpolate_passthrough);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TNestLoopJoinNode(");
    boolean first = true;

    if (isSetJoin_op()) {
      sb.append("join_op:");
      if (this.join_op == null) {
        sb.append("null");
      } else {
        sb.append(this.join_op);
      }
      first = false;
    }
    if (isSetBuild_runtime_filters()) {
      if (!first) sb.append(", ");
      sb.append("build_runtime_filters:");
      if (this.build_runtime_filters == null) {
        sb.append("null");
      } else {
        sb.append(this.build_runtime_filters);
      }
      first = false;
    }
    if (isSetJoin_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("join_conjuncts:");
      if (this.join_conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.join_conjuncts);
      }
      first = false;
    }
    if (isSetSql_join_conjuncts()) {
      if (!first) sb.append(", ");
      sb.append("sql_join_conjuncts:");
      if (this.sql_join_conjuncts == null) {
        sb.append("null");
      } else {
        sb.append(this.sql_join_conjuncts);
      }
      first = false;
    }
    if (isSetInterpolate_passthrough()) {
      if (!first) sb.append(", ");
      sb.append("interpolate_passthrough:");
      sb.append(this.interpolate_passthrough);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNestLoopJoinNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNestLoopJoinNodeStandardScheme getScheme() {
      return new TNestLoopJoinNodeStandardScheme();
    }
  }

  private static class TNestLoopJoinNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TNestLoopJoinNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TNestLoopJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOIN_OP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.join_op = com.starrocks.thrift.TJoinOp.findByValue(iprot.readI32());
              struct.setJoin_opIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUILD_RUNTIME_FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list480 = iprot.readListBegin();
                struct.build_runtime_filters = new java.util.ArrayList<com.starrocks.thrift.TRuntimeFilterDescription>(_list480.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TRuntimeFilterDescription _elem481;
                for (int _i482 = 0; _i482 < _list480.size; ++_i482)
                {
                  _elem481 = new com.starrocks.thrift.TRuntimeFilterDescription();
                  _elem481.read(iprot);
                  struct.build_runtime_filters.add(_elem481);
                }
                iprot.readListEnd();
              }
              struct.setBuild_runtime_filtersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // JOIN_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list483 = iprot.readListBegin();
                struct.join_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list483.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem484;
                for (int _i485 = 0; _i485 < _list483.size; ++_i485)
                {
                  _elem484 = new com.starrocks.thrift.TExpr();
                  _elem484.read(iprot);
                  struct.join_conjuncts.add(_elem484);
                }
                iprot.readListEnd();
              }
              struct.setJoin_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SQL_JOIN_CONJUNCTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sql_join_conjuncts = iprot.readString();
              struct.setSql_join_conjunctsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INTERPOLATE_PASSTHROUGH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.interpolate_passthrough = iprot.readBool();
              struct.setInterpolate_passthroughIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TNestLoopJoinNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.join_op != null) {
        if (struct.isSetJoin_op()) {
          oprot.writeFieldBegin(JOIN_OP_FIELD_DESC);
          oprot.writeI32(struct.join_op.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.build_runtime_filters != null) {
        if (struct.isSetBuild_runtime_filters()) {
          oprot.writeFieldBegin(BUILD_RUNTIME_FILTERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.build_runtime_filters.size()));
            for (com.starrocks.thrift.TRuntimeFilterDescription _iter486 : struct.build_runtime_filters)
            {
              _iter486.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.join_conjuncts != null) {
        if (struct.isSetJoin_conjuncts()) {
          oprot.writeFieldBegin(JOIN_CONJUNCTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.join_conjuncts.size()));
            for (com.starrocks.thrift.TExpr _iter487 : struct.join_conjuncts)
            {
              _iter487.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sql_join_conjuncts != null) {
        if (struct.isSetSql_join_conjuncts()) {
          oprot.writeFieldBegin(SQL_JOIN_CONJUNCTS_FIELD_DESC);
          oprot.writeString(struct.sql_join_conjuncts);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInterpolate_passthrough()) {
        oprot.writeFieldBegin(INTERPOLATE_PASSTHROUGH_FIELD_DESC);
        oprot.writeBool(struct.interpolate_passthrough);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNestLoopJoinNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNestLoopJoinNodeTupleScheme getScheme() {
      return new TNestLoopJoinNodeTupleScheme();
    }
  }

  private static class TNestLoopJoinNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TNestLoopJoinNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNestLoopJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetJoin_op()) {
        optionals.set(0);
      }
      if (struct.isSetBuild_runtime_filters()) {
        optionals.set(1);
      }
      if (struct.isSetJoin_conjuncts()) {
        optionals.set(2);
      }
      if (struct.isSetSql_join_conjuncts()) {
        optionals.set(3);
      }
      if (struct.isSetInterpolate_passthrough()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetJoin_op()) {
        oprot.writeI32(struct.join_op.getValue());
      }
      if (struct.isSetBuild_runtime_filters()) {
        {
          oprot.writeI32(struct.build_runtime_filters.size());
          for (com.starrocks.thrift.TRuntimeFilterDescription _iter488 : struct.build_runtime_filters)
          {
            _iter488.write(oprot);
          }
        }
      }
      if (struct.isSetJoin_conjuncts()) {
        {
          oprot.writeI32(struct.join_conjuncts.size());
          for (com.starrocks.thrift.TExpr _iter489 : struct.join_conjuncts)
          {
            _iter489.write(oprot);
          }
        }
      }
      if (struct.isSetSql_join_conjuncts()) {
        oprot.writeString(struct.sql_join_conjuncts);
      }
      if (struct.isSetInterpolate_passthrough()) {
        oprot.writeBool(struct.interpolate_passthrough);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNestLoopJoinNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.join_op = com.starrocks.thrift.TJoinOp.findByValue(iprot.readI32());
        struct.setJoin_opIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list490 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.build_runtime_filters = new java.util.ArrayList<com.starrocks.thrift.TRuntimeFilterDescription>(_list490.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TRuntimeFilterDescription _elem491;
          for (int _i492 = 0; _i492 < _list490.size; ++_i492)
          {
            _elem491 = new com.starrocks.thrift.TRuntimeFilterDescription();
            _elem491.read(iprot);
            struct.build_runtime_filters.add(_elem491);
          }
        }
        struct.setBuild_runtime_filtersIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list493 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.join_conjuncts = new java.util.ArrayList<com.starrocks.thrift.TExpr>(_list493.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _elem494;
          for (int _i495 = 0; _i495 < _list493.size; ++_i495)
          {
            _elem494 = new com.starrocks.thrift.TExpr();
            _elem494.read(iprot);
            struct.join_conjuncts.add(_elem494);
          }
        }
        struct.setJoin_conjunctsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sql_join_conjuncts = iprot.readString();
        struct.setSql_join_conjunctsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.interpolate_passthrough = iprot.readBool();
        struct.setInterpolate_passthroughIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

