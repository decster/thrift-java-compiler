/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TIcebergMetadata implements org.apache.thrift.TBase<TIcebergMetadata, TIcebergMetadata._Fields>, java.io.Serializable, Cloneable, Comparable<TIcebergMetadata> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TIcebergMetadata");

  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("file_path", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("file_format", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SPEC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("spec_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PARTITION_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_data", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RECORD_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("record_count", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_IN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("file_size_in_bytes", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SPLIT_OFFSETS_FIELD_DESC = new org.apache.thrift.protocol.TField("split_offsets", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField SORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sort_id", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField EQUALITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("equality_ids", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField FILE_SEQUENCE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("file_sequence_number", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField DATA_SEQUENCE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("data_sequence_number", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField COLUMN_STATS_FIELD_DESC = new org.apache.thrift.protocol.TField("column_stats", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField KEY_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("key_metadata", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TIcebergMetadataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TIcebergMetadataTupleSchemeFactory();

  public int content; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String file_path; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String file_format; // optional
  public int spec_id; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer partition_data; // optional
  public long record_count; // optional
  public long file_size_in_bytes; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> split_offsets; // optional
  public int sort_id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> equality_ids; // optional
  public long file_sequence_number; // optional
  public long data_sequence_number; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer column_stats; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer key_metadata; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTENT((short)1, "content"),
    FILE_PATH((short)2, "file_path"),
    FILE_FORMAT((short)3, "file_format"),
    SPEC_ID((short)4, "spec_id"),
    PARTITION_DATA((short)5, "partition_data"),
    RECORD_COUNT((short)6, "record_count"),
    FILE_SIZE_IN_BYTES((short)7, "file_size_in_bytes"),
    SPLIT_OFFSETS((short)8, "split_offsets"),
    SORT_ID((short)9, "sort_id"),
    EQUALITY_IDS((short)10, "equality_ids"),
    FILE_SEQUENCE_NUMBER((short)11, "file_sequence_number"),
    DATA_SEQUENCE_NUMBER((short)12, "data_sequence_number"),
    COLUMN_STATS((short)13, "column_stats"),
    KEY_METADATA((short)14, "key_metadata");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTENT
          return CONTENT;
        case 2: // FILE_PATH
          return FILE_PATH;
        case 3: // FILE_FORMAT
          return FILE_FORMAT;
        case 4: // SPEC_ID
          return SPEC_ID;
        case 5: // PARTITION_DATA
          return PARTITION_DATA;
        case 6: // RECORD_COUNT
          return RECORD_COUNT;
        case 7: // FILE_SIZE_IN_BYTES
          return FILE_SIZE_IN_BYTES;
        case 8: // SPLIT_OFFSETS
          return SPLIT_OFFSETS;
        case 9: // SORT_ID
          return SORT_ID;
        case 10: // EQUALITY_IDS
          return EQUALITY_IDS;
        case 11: // FILE_SEQUENCE_NUMBER
          return FILE_SEQUENCE_NUMBER;
        case 12: // DATA_SEQUENCE_NUMBER
          return DATA_SEQUENCE_NUMBER;
        case 13: // COLUMN_STATS
          return COLUMN_STATS;
        case 14: // KEY_METADATA
          return KEY_METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONTENT_ISSET_ID = 0;
  private static final int __SPEC_ID_ISSET_ID = 1;
  private static final int __RECORD_COUNT_ISSET_ID = 2;
  private static final int __FILE_SIZE_IN_BYTES_ISSET_ID = 3;
  private static final int __SORT_ID_ISSET_ID = 4;
  private static final int __FILE_SEQUENCE_NUMBER_ISSET_ID = 5;
  private static final int __DATA_SEQUENCE_NUMBER_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CONTENT,_Fields.FILE_PATH,_Fields.FILE_FORMAT,_Fields.SPEC_ID,_Fields.PARTITION_DATA,_Fields.RECORD_COUNT,_Fields.FILE_SIZE_IN_BYTES,_Fields.SPLIT_OFFSETS,_Fields.SORT_ID,_Fields.EQUALITY_IDS,_Fields.FILE_SEQUENCE_NUMBER,_Fields.DATA_SEQUENCE_NUMBER,_Fields.COLUMN_STATS,_Fields.KEY_METADATA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("file_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("file_format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPEC_ID, new org.apache.thrift.meta_data.FieldMetaData("spec_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTITION_DATA, new org.apache.thrift.meta_data.FieldMetaData("partition_data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.RECORD_COUNT, new org.apache.thrift.meta_data.FieldMetaData("record_count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILE_SIZE_IN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("file_size_in_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPLIT_OFFSETS, new org.apache.thrift.meta_data.FieldMetaData("split_offsets", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.SORT_ID, new org.apache.thrift.meta_data.FieldMetaData("sort_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EQUALITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("equality_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.FILE_SEQUENCE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("file_sequence_number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_SEQUENCE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("data_sequence_number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COLUMN_STATS, new org.apache.thrift.meta_data.FieldMetaData("column_stats", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.KEY_METADATA, new org.apache.thrift.meta_data.FieldMetaData("key_metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TIcebergMetadata.class, metaDataMap);
  }

  public TIcebergMetadata() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TIcebergMetadata(TIcebergMetadata other) {
    __isset_bitfield = other.__isset_bitfield;
    this.content = other.content;
    if (other.isSetFile_path()) {
      this.file_path = other.file_path;
    }
    if (other.isSetFile_format()) {
      this.file_format = other.file_format;
    }
    this.spec_id = other.spec_id;
    if (other.isSetPartition_data()) {
      this.partition_data = org.apache.thrift.TBaseHelper.copyBinary(other.partition_data);
    }
    this.record_count = other.record_count;
    this.file_size_in_bytes = other.file_size_in_bytes;
    if (other.isSetSplit_offsets()) {
      java.util.List<java.lang.Long> __this__split_offsets = new java.util.ArrayList<java.lang.Long>(other.split_offsets);
      this.split_offsets = __this__split_offsets;
    }
    this.sort_id = other.sort_id;
    if (other.isSetEquality_ids()) {
      java.util.List<java.lang.Integer> __this__equality_ids = new java.util.ArrayList<java.lang.Integer>(other.equality_ids);
      this.equality_ids = __this__equality_ids;
    }
    this.file_sequence_number = other.file_sequence_number;
    this.data_sequence_number = other.data_sequence_number;
    if (other.isSetColumn_stats()) {
      this.column_stats = org.apache.thrift.TBaseHelper.copyBinary(other.column_stats);
    }
    if (other.isSetKey_metadata()) {
      this.key_metadata = org.apache.thrift.TBaseHelper.copyBinary(other.key_metadata);
    }
  }

  @Override
  public TIcebergMetadata deepCopy() {
    return new TIcebergMetadata(this);
  }

  @Override
  public void clear() {
    setContentIsSet(false);
    this.content = 0;
    this.file_path = null;
    this.file_format = null;
    setSpec_idIsSet(false);
    this.spec_id = 0;
    this.partition_data = null;
    setRecord_countIsSet(false);
    this.record_count = 0;
    setFile_size_in_bytesIsSet(false);
    this.file_size_in_bytes = 0;
    this.split_offsets = null;
    setSort_idIsSet(false);
    this.sort_id = 0;
    this.equality_ids = null;
    setFile_sequence_numberIsSet(false);
    this.file_sequence_number = 0;
    setData_sequence_numberIsSet(false);
    this.data_sequence_number = 0;
    this.column_stats = null;
    this.key_metadata = null;
  }

  public int getContent() {
    return this.content;
  }

  public TIcebergMetadata setContent(int content) {
    this.content = content;
    setContentIsSet(true);
    return this;
  }

  public void unsetContent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CONTENT_ISSET_ID);
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CONTENT_ISSET_ID);
  }

  public void setContentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CONTENT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFile_path() {
    return this.file_path;
  }

  public TIcebergMetadata setFile_path(@org.apache.thrift.annotation.Nullable java.lang.String file_path) {
    this.file_path = file_path;
    return this;
  }

  public void unsetFile_path() {
    this.file_path = null;
  }

  /** Returns true if field file_path is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_path() {
    return this.file_path != null;
  }

  public void setFile_pathIsSet(boolean value) {
    if (!value) {
      this.file_path = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFile_format() {
    return this.file_format;
  }

  public TIcebergMetadata setFile_format(@org.apache.thrift.annotation.Nullable java.lang.String file_format) {
    this.file_format = file_format;
    return this;
  }

  public void unsetFile_format() {
    this.file_format = null;
  }

  /** Returns true if field file_format is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_format() {
    return this.file_format != null;
  }

  public void setFile_formatIsSet(boolean value) {
    if (!value) {
      this.file_format = null;
    }
  }

  public int getSpec_id() {
    return this.spec_id;
  }

  public TIcebergMetadata setSpec_id(int spec_id) {
    this.spec_id = spec_id;
    setSpec_idIsSet(true);
    return this;
  }

  public void unsetSpec_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPEC_ID_ISSET_ID);
  }

  /** Returns true if field spec_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSpec_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPEC_ID_ISSET_ID);
  }

  public void setSpec_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPEC_ID_ISSET_ID, value);
  }

  public byte[] getPartition_data() {
    setPartition_data(org.apache.thrift.TBaseHelper.rightSize(partition_data));
    return partition_data == null ? null : partition_data.array();
  }

  public java.nio.ByteBuffer bufferForPartition_data() {
    return org.apache.thrift.TBaseHelper.copyBinary(partition_data);
  }

  public TIcebergMetadata setPartition_data(byte[] partition_data) {
    this.partition_data = partition_data == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(partition_data.clone());
    return this;
  }

  public TIcebergMetadata setPartition_data(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer partition_data) {
    this.partition_data = org.apache.thrift.TBaseHelper.copyBinary(partition_data);
    return this;
  }

  public void unsetPartition_data() {
    this.partition_data = null;
  }

  /** Returns true if field partition_data is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_data() {
    return this.partition_data != null;
  }

  public void setPartition_dataIsSet(boolean value) {
    if (!value) {
      this.partition_data = null;
    }
  }

  public long getRecord_count() {
    return this.record_count;
  }

  public TIcebergMetadata setRecord_count(long record_count) {
    this.record_count = record_count;
    setRecord_countIsSet(true);
    return this;
  }

  public void unsetRecord_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECORD_COUNT_ISSET_ID);
  }

  /** Returns true if field record_count is set (has been assigned a value) and false otherwise */
  public boolean isSetRecord_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECORD_COUNT_ISSET_ID);
  }

  public void setRecord_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECORD_COUNT_ISSET_ID, value);
  }

  public long getFile_size_in_bytes() {
    return this.file_size_in_bytes;
  }

  public TIcebergMetadata setFile_size_in_bytes(long file_size_in_bytes) {
    this.file_size_in_bytes = file_size_in_bytes;
    setFile_size_in_bytesIsSet(true);
    return this;
  }

  public void unsetFile_size_in_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILE_SIZE_IN_BYTES_ISSET_ID);
  }

  /** Returns true if field file_size_in_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_size_in_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILE_SIZE_IN_BYTES_ISSET_ID);
  }

  public void setFile_size_in_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILE_SIZE_IN_BYTES_ISSET_ID, value);
  }

  public int getSplit_offsetsSize() {
    return (this.split_offsets == null) ? 0 : this.split_offsets.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getSplit_offsetsIterator() {
    return (this.split_offsets == null) ? null : this.split_offsets.iterator();
  }

  public void addToSplit_offsets(long elem) {
    if (this.split_offsets == null) {
      this.split_offsets = new java.util.ArrayList<java.lang.Long>();
    }
    this.split_offsets.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getSplit_offsets() {
    return this.split_offsets;
  }

  public TIcebergMetadata setSplit_offsets(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> split_offsets) {
    this.split_offsets = split_offsets;
    return this;
  }

  public void unsetSplit_offsets() {
    this.split_offsets = null;
  }

  /** Returns true if field split_offsets is set (has been assigned a value) and false otherwise */
  public boolean isSetSplit_offsets() {
    return this.split_offsets != null;
  }

  public void setSplit_offsetsIsSet(boolean value) {
    if (!value) {
      this.split_offsets = null;
    }
  }

  public int getSort_id() {
    return this.sort_id;
  }

  public TIcebergMetadata setSort_id(int sort_id) {
    this.sort_id = sort_id;
    setSort_idIsSet(true);
    return this;
  }

  public void unsetSort_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SORT_ID_ISSET_ID);
  }

  /** Returns true if field sort_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSort_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SORT_ID_ISSET_ID);
  }

  public void setSort_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SORT_ID_ISSET_ID, value);
  }

  public int getEquality_idsSize() {
    return (this.equality_ids == null) ? 0 : this.equality_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getEquality_idsIterator() {
    return (this.equality_ids == null) ? null : this.equality_ids.iterator();
  }

  public void addToEquality_ids(int elem) {
    if (this.equality_ids == null) {
      this.equality_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.equality_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getEquality_ids() {
    return this.equality_ids;
  }

  public TIcebergMetadata setEquality_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> equality_ids) {
    this.equality_ids = equality_ids;
    return this;
  }

  public void unsetEquality_ids() {
    this.equality_ids = null;
  }

  /** Returns true if field equality_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetEquality_ids() {
    return this.equality_ids != null;
  }

  public void setEquality_idsIsSet(boolean value) {
    if (!value) {
      this.equality_ids = null;
    }
  }

  public long getFile_sequence_number() {
    return this.file_sequence_number;
  }

  public TIcebergMetadata setFile_sequence_number(long file_sequence_number) {
    this.file_sequence_number = file_sequence_number;
    setFile_sequence_numberIsSet(true);
    return this;
  }

  public void unsetFile_sequence_number() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILE_SEQUENCE_NUMBER_ISSET_ID);
  }

  /** Returns true if field file_sequence_number is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_sequence_number() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILE_SEQUENCE_NUMBER_ISSET_ID);
  }

  public void setFile_sequence_numberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILE_SEQUENCE_NUMBER_ISSET_ID, value);
  }

  public long getData_sequence_number() {
    return this.data_sequence_number;
  }

  public TIcebergMetadata setData_sequence_number(long data_sequence_number) {
    this.data_sequence_number = data_sequence_number;
    setData_sequence_numberIsSet(true);
    return this;
  }

  public void unsetData_sequence_number() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATA_SEQUENCE_NUMBER_ISSET_ID);
  }

  /** Returns true if field data_sequence_number is set (has been assigned a value) and false otherwise */
  public boolean isSetData_sequence_number() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATA_SEQUENCE_NUMBER_ISSET_ID);
  }

  public void setData_sequence_numberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATA_SEQUENCE_NUMBER_ISSET_ID, value);
  }

  public byte[] getColumn_stats() {
    setColumn_stats(org.apache.thrift.TBaseHelper.rightSize(column_stats));
    return column_stats == null ? null : column_stats.array();
  }

  public java.nio.ByteBuffer bufferForColumn_stats() {
    return org.apache.thrift.TBaseHelper.copyBinary(column_stats);
  }

  public TIcebergMetadata setColumn_stats(byte[] column_stats) {
    this.column_stats = column_stats == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(column_stats.clone());
    return this;
  }

  public TIcebergMetadata setColumn_stats(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer column_stats) {
    this.column_stats = org.apache.thrift.TBaseHelper.copyBinary(column_stats);
    return this;
  }

  public void unsetColumn_stats() {
    this.column_stats = null;
  }

  /** Returns true if field column_stats is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_stats() {
    return this.column_stats != null;
  }

  public void setColumn_statsIsSet(boolean value) {
    if (!value) {
      this.column_stats = null;
    }
  }

  public byte[] getKey_metadata() {
    setKey_metadata(org.apache.thrift.TBaseHelper.rightSize(key_metadata));
    return key_metadata == null ? null : key_metadata.array();
  }

  public java.nio.ByteBuffer bufferForKey_metadata() {
    return org.apache.thrift.TBaseHelper.copyBinary(key_metadata);
  }

  public TIcebergMetadata setKey_metadata(byte[] key_metadata) {
    this.key_metadata = key_metadata == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(key_metadata.clone());
    return this;
  }

  public TIcebergMetadata setKey_metadata(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer key_metadata) {
    this.key_metadata = org.apache.thrift.TBaseHelper.copyBinary(key_metadata);
    return this;
  }

  public void unsetKey_metadata() {
    this.key_metadata = null;
  }

  /** Returns true if field key_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_metadata() {
    return this.key_metadata != null;
  }

  public void setKey_metadataIsSet(boolean value) {
    if (!value) {
      this.key_metadata = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((java.lang.Integer)value);
      }
      break;

    case FILE_PATH:
      if (value == null) {
        unsetFile_path();
      } else {
        setFile_path((java.lang.String)value);
      }
      break;

    case FILE_FORMAT:
      if (value == null) {
        unsetFile_format();
      } else {
        setFile_format((java.lang.String)value);
      }
      break;

    case SPEC_ID:
      if (value == null) {
        unsetSpec_id();
      } else {
        setSpec_id((java.lang.Integer)value);
      }
      break;

    case PARTITION_DATA:
      if (value == null) {
        unsetPartition_data();
      } else {
        if (value instanceof byte[]) {
          setPartition_data((byte[])value);
        } else {
          setPartition_data((java.nio.ByteBuffer)value);
        }
      }
      break;

    case RECORD_COUNT:
      if (value == null) {
        unsetRecord_count();
      } else {
        setRecord_count((java.lang.Long)value);
      }
      break;

    case FILE_SIZE_IN_BYTES:
      if (value == null) {
        unsetFile_size_in_bytes();
      } else {
        setFile_size_in_bytes((java.lang.Long)value);
      }
      break;

    case SPLIT_OFFSETS:
      if (value == null) {
        unsetSplit_offsets();
      } else {
        setSplit_offsets((java.util.List<java.lang.Long>)value);
      }
      break;

    case SORT_ID:
      if (value == null) {
        unsetSort_id();
      } else {
        setSort_id((java.lang.Integer)value);
      }
      break;

    case EQUALITY_IDS:
      if (value == null) {
        unsetEquality_ids();
      } else {
        setEquality_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    case FILE_SEQUENCE_NUMBER:
      if (value == null) {
        unsetFile_sequence_number();
      } else {
        setFile_sequence_number((java.lang.Long)value);
      }
      break;

    case DATA_SEQUENCE_NUMBER:
      if (value == null) {
        unsetData_sequence_number();
      } else {
        setData_sequence_number((java.lang.Long)value);
      }
      break;

    case COLUMN_STATS:
      if (value == null) {
        unsetColumn_stats();
      } else {
        if (value instanceof byte[]) {
          setColumn_stats((byte[])value);
        } else {
          setColumn_stats((java.nio.ByteBuffer)value);
        }
      }
      break;

    case KEY_METADATA:
      if (value == null) {
        unsetKey_metadata();
      } else {
        if (value instanceof byte[]) {
          setKey_metadata((byte[])value);
        } else {
          setKey_metadata((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTENT:
      return getContent();

    case FILE_PATH:
      return getFile_path();

    case FILE_FORMAT:
      return getFile_format();

    case SPEC_ID:
      return getSpec_id();

    case PARTITION_DATA:
      return getPartition_data();

    case RECORD_COUNT:
      return getRecord_count();

    case FILE_SIZE_IN_BYTES:
      return getFile_size_in_bytes();

    case SPLIT_OFFSETS:
      return getSplit_offsets();

    case SORT_ID:
      return getSort_id();

    case EQUALITY_IDS:
      return getEquality_ids();

    case FILE_SEQUENCE_NUMBER:
      return getFile_sequence_number();

    case DATA_SEQUENCE_NUMBER:
      return getData_sequence_number();

    case COLUMN_STATS:
      return getColumn_stats();

    case KEY_METADATA:
      return getKey_metadata();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CONTENT:
      return isSetContent();
    case FILE_PATH:
      return isSetFile_path();
    case FILE_FORMAT:
      return isSetFile_format();
    case SPEC_ID:
      return isSetSpec_id();
    case PARTITION_DATA:
      return isSetPartition_data();
    case RECORD_COUNT:
      return isSetRecord_count();
    case FILE_SIZE_IN_BYTES:
      return isSetFile_size_in_bytes();
    case SPLIT_OFFSETS:
      return isSetSplit_offsets();
    case SORT_ID:
      return isSetSort_id();
    case EQUALITY_IDS:
      return isSetEquality_ids();
    case FILE_SEQUENCE_NUMBER:
      return isSetFile_sequence_number();
    case DATA_SEQUENCE_NUMBER:
      return isSetData_sequence_number();
    case COLUMN_STATS:
      return isSetColumn_stats();
    case KEY_METADATA:
      return isSetKey_metadata();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TIcebergMetadata)
      return this.equals((TIcebergMetadata)that);
    return false;
  }

  public boolean equals(TIcebergMetadata that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (this.content != that.content)
        return false;
    }

    boolean this_present_file_path = true && this.isSetFile_path();
    boolean that_present_file_path = true && that.isSetFile_path();
    if (this_present_file_path || that_present_file_path) {
      if (!(this_present_file_path && that_present_file_path))
        return false;
      if (!this.file_path.equals(that.file_path))
        return false;
    }

    boolean this_present_file_format = true && this.isSetFile_format();
    boolean that_present_file_format = true && that.isSetFile_format();
    if (this_present_file_format || that_present_file_format) {
      if (!(this_present_file_format && that_present_file_format))
        return false;
      if (!this.file_format.equals(that.file_format))
        return false;
    }

    boolean this_present_spec_id = true && this.isSetSpec_id();
    boolean that_present_spec_id = true && that.isSetSpec_id();
    if (this_present_spec_id || that_present_spec_id) {
      if (!(this_present_spec_id && that_present_spec_id))
        return false;
      if (this.spec_id != that.spec_id)
        return false;
    }

    boolean this_present_partition_data = true && this.isSetPartition_data();
    boolean that_present_partition_data = true && that.isSetPartition_data();
    if (this_present_partition_data || that_present_partition_data) {
      if (!(this_present_partition_data && that_present_partition_data))
        return false;
      if (!this.partition_data.equals(that.partition_data))
        return false;
    }

    boolean this_present_record_count = true && this.isSetRecord_count();
    boolean that_present_record_count = true && that.isSetRecord_count();
    if (this_present_record_count || that_present_record_count) {
      if (!(this_present_record_count && that_present_record_count))
        return false;
      if (this.record_count != that.record_count)
        return false;
    }

    boolean this_present_file_size_in_bytes = true && this.isSetFile_size_in_bytes();
    boolean that_present_file_size_in_bytes = true && that.isSetFile_size_in_bytes();
    if (this_present_file_size_in_bytes || that_present_file_size_in_bytes) {
      if (!(this_present_file_size_in_bytes && that_present_file_size_in_bytes))
        return false;
      if (this.file_size_in_bytes != that.file_size_in_bytes)
        return false;
    }

    boolean this_present_split_offsets = true && this.isSetSplit_offsets();
    boolean that_present_split_offsets = true && that.isSetSplit_offsets();
    if (this_present_split_offsets || that_present_split_offsets) {
      if (!(this_present_split_offsets && that_present_split_offsets))
        return false;
      if (!this.split_offsets.equals(that.split_offsets))
        return false;
    }

    boolean this_present_sort_id = true && this.isSetSort_id();
    boolean that_present_sort_id = true && that.isSetSort_id();
    if (this_present_sort_id || that_present_sort_id) {
      if (!(this_present_sort_id && that_present_sort_id))
        return false;
      if (this.sort_id != that.sort_id)
        return false;
    }

    boolean this_present_equality_ids = true && this.isSetEquality_ids();
    boolean that_present_equality_ids = true && that.isSetEquality_ids();
    if (this_present_equality_ids || that_present_equality_ids) {
      if (!(this_present_equality_ids && that_present_equality_ids))
        return false;
      if (!this.equality_ids.equals(that.equality_ids))
        return false;
    }

    boolean this_present_file_sequence_number = true && this.isSetFile_sequence_number();
    boolean that_present_file_sequence_number = true && that.isSetFile_sequence_number();
    if (this_present_file_sequence_number || that_present_file_sequence_number) {
      if (!(this_present_file_sequence_number && that_present_file_sequence_number))
        return false;
      if (this.file_sequence_number != that.file_sequence_number)
        return false;
    }

    boolean this_present_data_sequence_number = true && this.isSetData_sequence_number();
    boolean that_present_data_sequence_number = true && that.isSetData_sequence_number();
    if (this_present_data_sequence_number || that_present_data_sequence_number) {
      if (!(this_present_data_sequence_number && that_present_data_sequence_number))
        return false;
      if (this.data_sequence_number != that.data_sequence_number)
        return false;
    }

    boolean this_present_column_stats = true && this.isSetColumn_stats();
    boolean that_present_column_stats = true && that.isSetColumn_stats();
    if (this_present_column_stats || that_present_column_stats) {
      if (!(this_present_column_stats && that_present_column_stats))
        return false;
      if (!this.column_stats.equals(that.column_stats))
        return false;
    }

    boolean this_present_key_metadata = true && this.isSetKey_metadata();
    boolean that_present_key_metadata = true && that.isSetKey_metadata();
    if (this_present_key_metadata || that_present_key_metadata) {
      if (!(this_present_key_metadata && that_present_key_metadata))
        return false;
      if (!this.key_metadata.equals(that.key_metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
    if (isSetContent())
      hashCode = hashCode * 8191 + content;

    hashCode = hashCode * 8191 + ((isSetFile_path()) ? 131071 : 524287);
    if (isSetFile_path())
      hashCode = hashCode * 8191 + file_path.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile_format()) ? 131071 : 524287);
    if (isSetFile_format())
      hashCode = hashCode * 8191 + file_format.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpec_id()) ? 131071 : 524287);
    if (isSetSpec_id())
      hashCode = hashCode * 8191 + spec_id;

    hashCode = hashCode * 8191 + ((isSetPartition_data()) ? 131071 : 524287);
    if (isSetPartition_data())
      hashCode = hashCode * 8191 + partition_data.hashCode();

    hashCode = hashCode * 8191 + ((isSetRecord_count()) ? 131071 : 524287);
    if (isSetRecord_count())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(record_count);

    hashCode = hashCode * 8191 + ((isSetFile_size_in_bytes()) ? 131071 : 524287);
    if (isSetFile_size_in_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(file_size_in_bytes);

    hashCode = hashCode * 8191 + ((isSetSplit_offsets()) ? 131071 : 524287);
    if (isSetSplit_offsets())
      hashCode = hashCode * 8191 + split_offsets.hashCode();

    hashCode = hashCode * 8191 + ((isSetSort_id()) ? 131071 : 524287);
    if (isSetSort_id())
      hashCode = hashCode * 8191 + sort_id;

    hashCode = hashCode * 8191 + ((isSetEquality_ids()) ? 131071 : 524287);
    if (isSetEquality_ids())
      hashCode = hashCode * 8191 + equality_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile_sequence_number()) ? 131071 : 524287);
    if (isSetFile_sequence_number())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(file_sequence_number);

    hashCode = hashCode * 8191 + ((isSetData_sequence_number()) ? 131071 : 524287);
    if (isSetData_sequence_number())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(data_sequence_number);

    hashCode = hashCode * 8191 + ((isSetColumn_stats()) ? 131071 : 524287);
    if (isSetColumn_stats())
      hashCode = hashCode * 8191 + column_stats.hashCode();

    hashCode = hashCode * 8191 + ((isSetKey_metadata()) ? 131071 : 524287);
    if (isSetKey_metadata())
      hashCode = hashCode * 8191 + key_metadata.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TIcebergMetadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetContent(), other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_path(), other.isSetFile_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_path, other.file_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_format(), other.isSetFile_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_format, other.file_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpec_id(), other.isSetSpec_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpec_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spec_id, other.spec_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_data(), other.isSetPartition_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_data, other.partition_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRecord_count(), other.isSetRecord_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecord_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.record_count, other.record_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_size_in_bytes(), other.isSetFile_size_in_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_size_in_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_size_in_bytes, other.file_size_in_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSplit_offsets(), other.isSetSplit_offsets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSplit_offsets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.split_offsets, other.split_offsets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSort_id(), other.isSetSort_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSort_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sort_id, other.sort_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEquality_ids(), other.isSetEquality_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEquality_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.equality_ids, other.equality_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_sequence_number(), other.isSetFile_sequence_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_sequence_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_sequence_number, other.file_sequence_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData_sequence_number(), other.isSetData_sequence_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_sequence_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_sequence_number, other.data_sequence_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumn_stats(), other.isSetColumn_stats());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_stats()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_stats, other.column_stats);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKey_metadata(), other.isSetKey_metadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_metadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_metadata, other.key_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TIcebergMetadata(");
    boolean first = true;

    if (isSetContent()) {
      sb.append("content:");
      sb.append(this.content);
      first = false;
    }
    if (isSetFile_path()) {
      if (!first) sb.append(", ");
      sb.append("file_path:");
      if (this.file_path == null) {
        sb.append("null");
      } else {
        sb.append(this.file_path);
      }
      first = false;
    }
    if (isSetFile_format()) {
      if (!first) sb.append(", ");
      sb.append("file_format:");
      if (this.file_format == null) {
        sb.append("null");
      } else {
        sb.append(this.file_format);
      }
      first = false;
    }
    if (isSetSpec_id()) {
      if (!first) sb.append(", ");
      sb.append("spec_id:");
      sb.append(this.spec_id);
      first = false;
    }
    if (isSetPartition_data()) {
      if (!first) sb.append(", ");
      sb.append("partition_data:");
      if (this.partition_data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.partition_data, sb);
      }
      first = false;
    }
    if (isSetRecord_count()) {
      if (!first) sb.append(", ");
      sb.append("record_count:");
      sb.append(this.record_count);
      first = false;
    }
    if (isSetFile_size_in_bytes()) {
      if (!first) sb.append(", ");
      sb.append("file_size_in_bytes:");
      sb.append(this.file_size_in_bytes);
      first = false;
    }
    if (isSetSplit_offsets()) {
      if (!first) sb.append(", ");
      sb.append("split_offsets:");
      if (this.split_offsets == null) {
        sb.append("null");
      } else {
        sb.append(this.split_offsets);
      }
      first = false;
    }
    if (isSetSort_id()) {
      if (!first) sb.append(", ");
      sb.append("sort_id:");
      sb.append(this.sort_id);
      first = false;
    }
    if (isSetEquality_ids()) {
      if (!first) sb.append(", ");
      sb.append("equality_ids:");
      if (this.equality_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.equality_ids);
      }
      first = false;
    }
    if (isSetFile_sequence_number()) {
      if (!first) sb.append(", ");
      sb.append("file_sequence_number:");
      sb.append(this.file_sequence_number);
      first = false;
    }
    if (isSetData_sequence_number()) {
      if (!first) sb.append(", ");
      sb.append("data_sequence_number:");
      sb.append(this.data_sequence_number);
      first = false;
    }
    if (isSetColumn_stats()) {
      if (!first) sb.append(", ");
      sb.append("column_stats:");
      if (this.column_stats == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.column_stats, sb);
      }
      first = false;
    }
    if (isSetKey_metadata()) {
      if (!first) sb.append(", ");
      sb.append("key_metadata:");
      if (this.key_metadata == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.key_metadata, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TIcebergMetadataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIcebergMetadataStandardScheme getScheme() {
      return new TIcebergMetadataStandardScheme();
    }
  }

  private static class TIcebergMetadataStandardScheme extends org.apache.thrift.scheme.StandardScheme<TIcebergMetadata> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TIcebergMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.content = iprot.readI32();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_path = iprot.readString();
              struct.setFile_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_format = iprot.readString();
              struct.setFile_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPEC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spec_id = iprot.readI32();
              struct.setSpec_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PARTITION_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partition_data = iprot.readBinary();
              struct.setPartition_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECORD_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.record_count = iprot.readI64();
              struct.setRecord_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FILE_SIZE_IN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.file_size_in_bytes = iprot.readI64();
              struct.setFile_size_in_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SPLIT_OFFSETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.split_offsets = new java.util.ArrayList<java.lang.Long>(_list48.size);
                long _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = iprot.readI64();
                  struct.split_offsets.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setSplit_offsetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SORT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sort_id = iprot.readI32();
              struct.setSort_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EQUALITY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.equality_ids = new java.util.ArrayList<java.lang.Integer>(_list51.size);
                int _elem52;
                for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                {
                  _elem52 = iprot.readI32();
                  struct.equality_ids.add(_elem52);
                }
                iprot.readListEnd();
              }
              struct.setEquality_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FILE_SEQUENCE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.file_sequence_number = iprot.readI64();
              struct.setFile_sequence_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DATA_SEQUENCE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.data_sequence_number = iprot.readI64();
              struct.setData_sequence_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COLUMN_STATS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_stats = iprot.readBinary();
              struct.setColumn_statsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // KEY_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key_metadata = iprot.readBinary();
              struct.setKey_metadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TIcebergMetadata struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetContent()) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeI32(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.file_path != null) {
        if (struct.isSetFile_path()) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.file_path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.file_format != null) {
        if (struct.isSetFile_format()) {
          oprot.writeFieldBegin(FILE_FORMAT_FIELD_DESC);
          oprot.writeString(struct.file_format);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSpec_id()) {
        oprot.writeFieldBegin(SPEC_ID_FIELD_DESC);
        oprot.writeI32(struct.spec_id);
        oprot.writeFieldEnd();
      }
      if (struct.partition_data != null) {
        if (struct.isSetPartition_data()) {
          oprot.writeFieldBegin(PARTITION_DATA_FIELD_DESC);
          oprot.writeBinary(struct.partition_data);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRecord_count()) {
        oprot.writeFieldBegin(RECORD_COUNT_FIELD_DESC);
        oprot.writeI64(struct.record_count);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFile_size_in_bytes()) {
        oprot.writeFieldBegin(FILE_SIZE_IN_BYTES_FIELD_DESC);
        oprot.writeI64(struct.file_size_in_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.split_offsets != null) {
        if (struct.isSetSplit_offsets()) {
          oprot.writeFieldBegin(SPLIT_OFFSETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.split_offsets.size()));
            for (long _iter54 : struct.split_offsets)
            {
              oprot.writeI64(_iter54);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSort_id()) {
        oprot.writeFieldBegin(SORT_ID_FIELD_DESC);
        oprot.writeI32(struct.sort_id);
        oprot.writeFieldEnd();
      }
      if (struct.equality_ids != null) {
        if (struct.isSetEquality_ids()) {
          oprot.writeFieldBegin(EQUALITY_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.equality_ids.size()));
            for (int _iter55 : struct.equality_ids)
            {
              oprot.writeI32(_iter55);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFile_sequence_number()) {
        oprot.writeFieldBegin(FILE_SEQUENCE_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.file_sequence_number);
        oprot.writeFieldEnd();
      }
      if (struct.isSetData_sequence_number()) {
        oprot.writeFieldBegin(DATA_SEQUENCE_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.data_sequence_number);
        oprot.writeFieldEnd();
      }
      if (struct.column_stats != null) {
        if (struct.isSetColumn_stats()) {
          oprot.writeFieldBegin(COLUMN_STATS_FIELD_DESC);
          oprot.writeBinary(struct.column_stats);
          oprot.writeFieldEnd();
        }
      }
      if (struct.key_metadata != null) {
        if (struct.isSetKey_metadata()) {
          oprot.writeFieldBegin(KEY_METADATA_FIELD_DESC);
          oprot.writeBinary(struct.key_metadata);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TIcebergMetadataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TIcebergMetadataTupleScheme getScheme() {
      return new TIcebergMetadataTupleScheme();
    }
  }

  private static class TIcebergMetadataTupleScheme extends org.apache.thrift.scheme.TupleScheme<TIcebergMetadata> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TIcebergMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetContent()) {
        optionals.set(0);
      }
      if (struct.isSetFile_path()) {
        optionals.set(1);
      }
      if (struct.isSetFile_format()) {
        optionals.set(2);
      }
      if (struct.isSetSpec_id()) {
        optionals.set(3);
      }
      if (struct.isSetPartition_data()) {
        optionals.set(4);
      }
      if (struct.isSetRecord_count()) {
        optionals.set(5);
      }
      if (struct.isSetFile_size_in_bytes()) {
        optionals.set(6);
      }
      if (struct.isSetSplit_offsets()) {
        optionals.set(7);
      }
      if (struct.isSetSort_id()) {
        optionals.set(8);
      }
      if (struct.isSetEquality_ids()) {
        optionals.set(9);
      }
      if (struct.isSetFile_sequence_number()) {
        optionals.set(10);
      }
      if (struct.isSetData_sequence_number()) {
        optionals.set(11);
      }
      if (struct.isSetColumn_stats()) {
        optionals.set(12);
      }
      if (struct.isSetKey_metadata()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetContent()) {
        oprot.writeI32(struct.content);
      }
      if (struct.isSetFile_path()) {
        oprot.writeString(struct.file_path);
      }
      if (struct.isSetFile_format()) {
        oprot.writeString(struct.file_format);
      }
      if (struct.isSetSpec_id()) {
        oprot.writeI32(struct.spec_id);
      }
      if (struct.isSetPartition_data()) {
        oprot.writeBinary(struct.partition_data);
      }
      if (struct.isSetRecord_count()) {
        oprot.writeI64(struct.record_count);
      }
      if (struct.isSetFile_size_in_bytes()) {
        oprot.writeI64(struct.file_size_in_bytes);
      }
      if (struct.isSetSplit_offsets()) {
        {
          oprot.writeI32(struct.split_offsets.size());
          for (long _iter56 : struct.split_offsets)
          {
            oprot.writeI64(_iter56);
          }
        }
      }
      if (struct.isSetSort_id()) {
        oprot.writeI32(struct.sort_id);
      }
      if (struct.isSetEquality_ids()) {
        {
          oprot.writeI32(struct.equality_ids.size());
          for (int _iter57 : struct.equality_ids)
          {
            oprot.writeI32(_iter57);
          }
        }
      }
      if (struct.isSetFile_sequence_number()) {
        oprot.writeI64(struct.file_sequence_number);
      }
      if (struct.isSetData_sequence_number()) {
        oprot.writeI64(struct.data_sequence_number);
      }
      if (struct.isSetColumn_stats()) {
        oprot.writeBinary(struct.column_stats);
      }
      if (struct.isSetKey_metadata()) {
        oprot.writeBinary(struct.key_metadata);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TIcebergMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.content = iprot.readI32();
        struct.setContentIsSet(true);
      }
      if (incoming.get(1)) {
        struct.file_path = iprot.readString();
        struct.setFile_pathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.file_format = iprot.readString();
        struct.setFile_formatIsSet(true);
      }
      if (incoming.get(3)) {
        struct.spec_id = iprot.readI32();
        struct.setSpec_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.partition_data = iprot.readBinary();
        struct.setPartition_dataIsSet(true);
      }
      if (incoming.get(5)) {
        struct.record_count = iprot.readI64();
        struct.setRecord_countIsSet(true);
      }
      if (incoming.get(6)) {
        struct.file_size_in_bytes = iprot.readI64();
        struct.setFile_size_in_bytesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list58 = iprot.readListBegin(org.apache.thrift.protocol.TType.I64);
          struct.split_offsets = new java.util.ArrayList<java.lang.Long>(_list58.size);
          long _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = iprot.readI64();
            struct.split_offsets.add(_elem59);
          }
        }
        struct.setSplit_offsetsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sort_id = iprot.readI32();
        struct.setSort_idIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list61 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.equality_ids = new java.util.ArrayList<java.lang.Integer>(_list61.size);
          int _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = iprot.readI32();
            struct.equality_ids.add(_elem62);
          }
        }
        struct.setEquality_idsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.file_sequence_number = iprot.readI64();
        struct.setFile_sequence_numberIsSet(true);
      }
      if (incoming.get(11)) {
        struct.data_sequence_number = iprot.readI64();
        struct.setData_sequence_numberIsSet(true);
      }
      if (incoming.get(12)) {
        struct.column_stats = iprot.readBinary();
        struct.setColumn_statsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.key_metadata = iprot.readBinary();
        struct.setKey_metadataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

