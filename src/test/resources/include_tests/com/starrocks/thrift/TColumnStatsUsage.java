/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TColumnStatsUsage implements org.apache.thrift.TBase<TColumnStatsUsage, TColumnStatsUsage._Fields>, java.io.Serializable, Cloneable, Comparable<TColumnStatsUsage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TColumnStatsUsage");

  private static final org.apache.thrift.protocol.TField TABLE_CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("table_catalog", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("table_database", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("column_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("usage", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_USED_FIELD_DESC = new org.apache.thrift.protocol.TField("last_used", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("created", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TColumnStatsUsageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TColumnStatsUsageTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String table_catalog; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_database; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String column_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String usage; // optional
  public long last_used; // optional
  public long created; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLE_CATALOG((short)1, "table_catalog"),
    TABLE_DATABASE((short)2, "table_database"),
    TABLE_NAME((short)3, "table_name"),
    COLUMN_NAME((short)4, "column_name"),
    USAGE((short)5, "usage"),
    LAST_USED((short)6, "last_used"),
    CREATED((short)7, "created");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLE_CATALOG
          return TABLE_CATALOG;
        case 2: // TABLE_DATABASE
          return TABLE_DATABASE;
        case 3: // TABLE_NAME
          return TABLE_NAME;
        case 4: // COLUMN_NAME
          return COLUMN_NAME;
        case 5: // USAGE
          return USAGE;
        case 6: // LAST_USED
          return LAST_USED;
        case 7: // CREATED
          return CREATED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LAST_USED_ISSET_ID = 0;
  private static final int __CREATED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TABLE_CATALOG,_Fields.TABLE_DATABASE,_Fields.TABLE_NAME,_Fields.COLUMN_NAME,_Fields.USAGE,_Fields.LAST_USED,_Fields.CREATED};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLE_CATALOG, new org.apache.thrift.meta_data.FieldMetaData("table_catalog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_DATABASE, new org.apache.thrift.meta_data.FieldMetaData("table_database", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("column_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USAGE, new org.apache.thrift.meta_data.FieldMetaData("usage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_USED, new org.apache.thrift.meta_data.FieldMetaData("last_used", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATED, new org.apache.thrift.meta_data.FieldMetaData("created", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TColumnStatsUsage.class, metaDataMap);
  }

  public TColumnStatsUsage() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TColumnStatsUsage(TColumnStatsUsage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTable_catalog()) {
      this.table_catalog = other.table_catalog;
    }
    if (other.isSetTable_database()) {
      this.table_database = other.table_database;
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
    if (other.isSetColumn_name()) {
      this.column_name = other.column_name;
    }
    if (other.isSetUsage()) {
      this.usage = other.usage;
    }
    this.last_used = other.last_used;
    this.created = other.created;
  }

  @Override
  public TColumnStatsUsage deepCopy() {
    return new TColumnStatsUsage(this);
  }

  @Override
  public void clear() {
    this.table_catalog = null;
    this.table_database = null;
    this.table_name = null;
    this.column_name = null;
    this.usage = null;
    setLast_usedIsSet(false);
    this.last_used = 0;
    setCreatedIsSet(false);
    this.created = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_catalog() {
    return this.table_catalog;
  }

  public TColumnStatsUsage setTable_catalog(@org.apache.thrift.annotation.Nullable java.lang.String table_catalog) {
    this.table_catalog = table_catalog;
    return this;
  }

  public void unsetTable_catalog() {
    this.table_catalog = null;
  }

  /** Returns true if field table_catalog is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_catalog() {
    return this.table_catalog != null;
  }

  public void setTable_catalogIsSet(boolean value) {
    if (!value) {
      this.table_catalog = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_database() {
    return this.table_database;
  }

  public TColumnStatsUsage setTable_database(@org.apache.thrift.annotation.Nullable java.lang.String table_database) {
    this.table_database = table_database;
    return this;
  }

  public void unsetTable_database() {
    this.table_database = null;
  }

  /** Returns true if field table_database is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_database() {
    return this.table_database != null;
  }

  public void setTable_databaseIsSet(boolean value) {
    if (!value) {
      this.table_database = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public TColumnStatsUsage setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getColumn_name() {
    return this.column_name;
  }

  public TColumnStatsUsage setColumn_name(@org.apache.thrift.annotation.Nullable java.lang.String column_name) {
    this.column_name = column_name;
    return this;
  }

  public void unsetColumn_name() {
    this.column_name = null;
  }

  /** Returns true if field column_name is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_name() {
    return this.column_name != null;
  }

  public void setColumn_nameIsSet(boolean value) {
    if (!value) {
      this.column_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUsage() {
    return this.usage;
  }

  public TColumnStatsUsage setUsage(@org.apache.thrift.annotation.Nullable java.lang.String usage) {
    this.usage = usage;
    return this;
  }

  public void unsetUsage() {
    this.usage = null;
  }

  /** Returns true if field usage is set (has been assigned a value) and false otherwise */
  public boolean isSetUsage() {
    return this.usage != null;
  }

  public void setUsageIsSet(boolean value) {
    if (!value) {
      this.usage = null;
    }
  }

  public long getLast_used() {
    return this.last_used;
  }

  public TColumnStatsUsage setLast_used(long last_used) {
    this.last_used = last_used;
    setLast_usedIsSet(true);
    return this;
  }

  public void unsetLast_used() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAST_USED_ISSET_ID);
  }

  /** Returns true if field last_used is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_used() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAST_USED_ISSET_ID);
  }

  public void setLast_usedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAST_USED_ISSET_ID, value);
  }

  public long getCreated() {
    return this.created;
  }

  public TColumnStatsUsage setCreated(long created) {
    this.created = created;
    setCreatedIsSet(true);
    return this;
  }

  public void unsetCreated() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  /** Returns true if field created is set (has been assigned a value) and false otherwise */
  public boolean isSetCreated() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATED_ISSET_ID);
  }

  public void setCreatedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATED_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLE_CATALOG:
      if (value == null) {
        unsetTable_catalog();
      } else {
        setTable_catalog((java.lang.String)value);
      }
      break;

    case TABLE_DATABASE:
      if (value == null) {
        unsetTable_database();
      } else {
        setTable_database((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    case COLUMN_NAME:
      if (value == null) {
        unsetColumn_name();
      } else {
        setColumn_name((java.lang.String)value);
      }
      break;

    case USAGE:
      if (value == null) {
        unsetUsage();
      } else {
        setUsage((java.lang.String)value);
      }
      break;

    case LAST_USED:
      if (value == null) {
        unsetLast_used();
      } else {
        setLast_used((java.lang.Long)value);
      }
      break;

    case CREATED:
      if (value == null) {
        unsetCreated();
      } else {
        setCreated((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLE_CATALOG:
      return getTable_catalog();

    case TABLE_DATABASE:
      return getTable_database();

    case TABLE_NAME:
      return getTable_name();

    case COLUMN_NAME:
      return getColumn_name();

    case USAGE:
      return getUsage();

    case LAST_USED:
      return getLast_used();

    case CREATED:
      return getCreated();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLE_CATALOG:
      return isSetTable_catalog();
    case TABLE_DATABASE:
      return isSetTable_database();
    case TABLE_NAME:
      return isSetTable_name();
    case COLUMN_NAME:
      return isSetColumn_name();
    case USAGE:
      return isSetUsage();
    case LAST_USED:
      return isSetLast_used();
    case CREATED:
      return isSetCreated();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TColumnStatsUsage)
      return this.equals((TColumnStatsUsage)that);
    return false;
  }

  public boolean equals(TColumnStatsUsage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_table_catalog = true && this.isSetTable_catalog();
    boolean that_present_table_catalog = true && that.isSetTable_catalog();
    if (this_present_table_catalog || that_present_table_catalog) {
      if (!(this_present_table_catalog && that_present_table_catalog))
        return false;
      if (!this.table_catalog.equals(that.table_catalog))
        return false;
    }

    boolean this_present_table_database = true && this.isSetTable_database();
    boolean that_present_table_database = true && that.isSetTable_database();
    if (this_present_table_database || that_present_table_database) {
      if (!(this_present_table_database && that_present_table_database))
        return false;
      if (!this.table_database.equals(that.table_database))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    boolean this_present_column_name = true && this.isSetColumn_name();
    boolean that_present_column_name = true && that.isSetColumn_name();
    if (this_present_column_name || that_present_column_name) {
      if (!(this_present_column_name && that_present_column_name))
        return false;
      if (!this.column_name.equals(that.column_name))
        return false;
    }

    boolean this_present_usage = true && this.isSetUsage();
    boolean that_present_usage = true && that.isSetUsage();
    if (this_present_usage || that_present_usage) {
      if (!(this_present_usage && that_present_usage))
        return false;
      if (!this.usage.equals(that.usage))
        return false;
    }

    boolean this_present_last_used = true && this.isSetLast_used();
    boolean that_present_last_used = true && that.isSetLast_used();
    if (this_present_last_used || that_present_last_used) {
      if (!(this_present_last_used && that_present_last_used))
        return false;
      if (this.last_used != that.last_used)
        return false;
    }

    boolean this_present_created = true && this.isSetCreated();
    boolean that_present_created = true && that.isSetCreated();
    if (this_present_created || that_present_created) {
      if (!(this_present_created && that_present_created))
        return false;
      if (this.created != that.created)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTable_catalog()) ? 131071 : 524287);
    if (isSetTable_catalog())
      hashCode = hashCode * 8191 + table_catalog.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_database()) ? 131071 : 524287);
    if (isSetTable_database())
      hashCode = hashCode * 8191 + table_database.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumn_name()) ? 131071 : 524287);
    if (isSetColumn_name())
      hashCode = hashCode * 8191 + column_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsage()) ? 131071 : 524287);
    if (isSetUsage())
      hashCode = hashCode * 8191 + usage.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_used()) ? 131071 : 524287);
    if (isSetLast_used())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(last_used);

    hashCode = hashCode * 8191 + ((isSetCreated()) ? 131071 : 524287);
    if (isSetCreated())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(created);

    return hashCode;
  }

  @Override
  public int compareTo(TColumnStatsUsage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTable_catalog(), other.isSetTable_catalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_catalog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_catalog, other.table_catalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_database(), other.isSetTable_database());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_database()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_database, other.table_database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumn_name(), other.isSetColumn_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_name, other.column_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUsage(), other.isSetUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usage, other.usage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLast_used(), other.isSetLast_used());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_used()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_used, other.last_used);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreated(), other.isSetCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.created, other.created);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TColumnStatsUsage(");
    boolean first = true;

    if (isSetTable_catalog()) {
      sb.append("table_catalog:");
      if (this.table_catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.table_catalog);
      }
      first = false;
    }
    if (isSetTable_database()) {
      if (!first) sb.append(", ");
      sb.append("table_database:");
      if (this.table_database == null) {
        sb.append("null");
      } else {
        sb.append(this.table_database);
      }
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    if (isSetColumn_name()) {
      if (!first) sb.append(", ");
      sb.append("column_name:");
      if (this.column_name == null) {
        sb.append("null");
      } else {
        sb.append(this.column_name);
      }
      first = false;
    }
    if (isSetUsage()) {
      if (!first) sb.append(", ");
      sb.append("usage:");
      if (this.usage == null) {
        sb.append("null");
      } else {
        sb.append(this.usage);
      }
      first = false;
    }
    if (isSetLast_used()) {
      if (!first) sb.append(", ");
      sb.append("last_used:");
      sb.append(this.last_used);
      first = false;
    }
    if (isSetCreated()) {
      if (!first) sb.append(", ");
      sb.append("created:");
      sb.append(this.created);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TColumnStatsUsageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TColumnStatsUsageStandardScheme getScheme() {
      return new TColumnStatsUsageStandardScheme();
    }
  }

  private static class TColumnStatsUsageStandardScheme extends org.apache.thrift.scheme.StandardScheme<TColumnStatsUsage> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TColumnStatsUsage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLE_CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_catalog = iprot.readString();
              struct.setTable_catalogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_database = iprot.readString();
              struct.setTable_databaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.column_name = iprot.readString();
              struct.setColumn_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.usage = iprot.readString();
              struct.setUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_USED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.last_used = iprot.readI64();
              struct.setLast_usedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.created = iprot.readI64();
              struct.setCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TColumnStatsUsage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.table_catalog != null) {
        if (struct.isSetTable_catalog()) {
          oprot.writeFieldBegin(TABLE_CATALOG_FIELD_DESC);
          oprot.writeString(struct.table_catalog);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_database != null) {
        if (struct.isSetTable_database()) {
          oprot.writeFieldBegin(TABLE_DATABASE_FIELD_DESC);
          oprot.writeString(struct.table_database);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_name != null) {
        if (struct.isSetColumn_name()) {
          oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
          oprot.writeString(struct.column_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.usage != null) {
        if (struct.isSetUsage()) {
          oprot.writeFieldBegin(USAGE_FIELD_DESC);
          oprot.writeString(struct.usage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLast_used()) {
        oprot.writeFieldBegin(LAST_USED_FIELD_DESC);
        oprot.writeI64(struct.last_used);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreated()) {
        oprot.writeFieldBegin(CREATED_FIELD_DESC);
        oprot.writeI64(struct.created);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TColumnStatsUsageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TColumnStatsUsageTupleScheme getScheme() {
      return new TColumnStatsUsageTupleScheme();
    }
  }

  private static class TColumnStatsUsageTupleScheme extends org.apache.thrift.scheme.TupleScheme<TColumnStatsUsage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TColumnStatsUsage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTable_catalog()) {
        optionals.set(0);
      }
      if (struct.isSetTable_database()) {
        optionals.set(1);
      }
      if (struct.isSetTable_name()) {
        optionals.set(2);
      }
      if (struct.isSetColumn_name()) {
        optionals.set(3);
      }
      if (struct.isSetUsage()) {
        optionals.set(4);
      }
      if (struct.isSetLast_used()) {
        optionals.set(5);
      }
      if (struct.isSetCreated()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetTable_catalog()) {
        oprot.writeString(struct.table_catalog);
      }
      if (struct.isSetTable_database()) {
        oprot.writeString(struct.table_database);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
      if (struct.isSetColumn_name()) {
        oprot.writeString(struct.column_name);
      }
      if (struct.isSetUsage()) {
        oprot.writeString(struct.usage);
      }
      if (struct.isSetLast_used()) {
        oprot.writeI64(struct.last_used);
      }
      if (struct.isSetCreated()) {
        oprot.writeI64(struct.created);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TColumnStatsUsage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.table_catalog = iprot.readString();
        struct.setTable_catalogIsSet(true);
      }
      if (incoming.get(1)) {
        struct.table_database = iprot.readString();
        struct.setTable_databaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.column_name = iprot.readString();
        struct.setColumn_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.usage = iprot.readString();
        struct.setUsageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.last_used = iprot.readI64();
        struct.setLast_usedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.created = iprot.readI64();
        struct.setCreatedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

