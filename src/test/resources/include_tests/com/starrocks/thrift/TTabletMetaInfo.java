/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TTabletMetaInfo implements org.apache.thrift.TBase<TTabletMetaInfo, TTabletMetaInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TTabletMetaInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTabletMetaInfo");

  private static final org.apache.thrift.protocol.TField TABLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SCHEMA_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("schema_hash", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PARTITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField META_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("meta_type", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_IN_MEMORY_FIELD_DESC = new org.apache.thrift.protocol.TField("is_in_memory", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField ENABLE_PERSISTENT_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_persistent_index", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField BINLOG_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("binlog_config", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField PRIMARY_INDEX_CACHE_EXPIRE_SEC_FIELD_DESC = new org.apache.thrift.protocol.TField("primary_index_cache_expire_sec", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TABLET_SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("tablet_schema", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_SCHEMA_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("create_schema_file", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField PERSISTENT_INDEX_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("persistent_index_type", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField FLAT_JSON_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("flat_json_config", org.apache.thrift.protocol.TType.STRUCT, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTabletMetaInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTabletMetaInfoTupleSchemeFactory();

  public long tablet_id; // optional
  public int schema_hash; // optional
  public long partition_id; // optional
  /**
   * 
   * @see TTabletMetaType
   */
  public @org.apache.thrift.annotation.Nullable TTabletMetaType meta_type; // optional
  public boolean is_in_memory; // optional
  public boolean enable_persistent_index; // optional
  public @org.apache.thrift.annotation.Nullable TBinlogConfig binlog_config; // optional
  public int primary_index_cache_expire_sec; // optional
  public @org.apache.thrift.annotation.Nullable TTabletSchema tablet_schema; // optional
  public boolean create_schema_file; // optional
  /**
   * 
   * @see TPersistentIndexType
   */
  public @org.apache.thrift.annotation.Nullable TPersistentIndexType persistent_index_type; // optional
  public @org.apache.thrift.annotation.Nullable TFlatJsonConfig flat_json_config; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLET_ID((short)1, "tablet_id"),
    SCHEMA_HASH((short)2, "schema_hash"),
    PARTITION_ID((short)3, "partition_id"),
    /**
     * 
     * @see TTabletMetaType
     */
    META_TYPE((short)4, "meta_type"),
    IS_IN_MEMORY((short)5, "is_in_memory"),
    ENABLE_PERSISTENT_INDEX((short)6, "enable_persistent_index"),
    BINLOG_CONFIG((short)7, "binlog_config"),
    PRIMARY_INDEX_CACHE_EXPIRE_SEC((short)8, "primary_index_cache_expire_sec"),
    TABLET_SCHEMA((short)9, "tablet_schema"),
    CREATE_SCHEMA_FILE((short)10, "create_schema_file"),
    /**
     * 
     * @see TPersistentIndexType
     */
    PERSISTENT_INDEX_TYPE((short)11, "persistent_index_type"),
    FLAT_JSON_CONFIG((short)12, "flat_json_config");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLET_ID
          return TABLET_ID;
        case 2: // SCHEMA_HASH
          return SCHEMA_HASH;
        case 3: // PARTITION_ID
          return PARTITION_ID;
        case 4: // META_TYPE
          return META_TYPE;
        case 5: // IS_IN_MEMORY
          return IS_IN_MEMORY;
        case 6: // ENABLE_PERSISTENT_INDEX
          return ENABLE_PERSISTENT_INDEX;
        case 7: // BINLOG_CONFIG
          return BINLOG_CONFIG;
        case 8: // PRIMARY_INDEX_CACHE_EXPIRE_SEC
          return PRIMARY_INDEX_CACHE_EXPIRE_SEC;
        case 9: // TABLET_SCHEMA
          return TABLET_SCHEMA;
        case 10: // CREATE_SCHEMA_FILE
          return CREATE_SCHEMA_FILE;
        case 11: // PERSISTENT_INDEX_TYPE
          return PERSISTENT_INDEX_TYPE;
        case 12: // FLAT_JSON_CONFIG
          return FLAT_JSON_CONFIG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TABLET_ID_ISSET_ID = 0;
  private static final int __SCHEMA_HASH_ISSET_ID = 1;
  private static final int __PARTITION_ID_ISSET_ID = 2;
  private static final int __IS_IN_MEMORY_ISSET_ID = 3;
  private static final int __ENABLE_PERSISTENT_INDEX_ISSET_ID = 4;
  private static final int __PRIMARY_INDEX_CACHE_EXPIRE_SEC_ISSET_ID = 5;
  private static final int __CREATE_SCHEMA_FILE_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TABLET_ID,_Fields.SCHEMA_HASH,_Fields.PARTITION_ID,_Fields.META_TYPE,_Fields.IS_IN_MEMORY,_Fields.ENABLE_PERSISTENT_INDEX,_Fields.BINLOG_CONFIG,_Fields.PRIMARY_INDEX_CACHE_EXPIRE_SEC,_Fields.TABLET_SCHEMA,_Fields.CREATE_SCHEMA_FILE,_Fields.PERSISTENT_INDEX_TYPE,_Fields.FLAT_JSON_CONFIG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLET_ID, new org.apache.thrift.meta_data.FieldMetaData("tablet_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TTabletId")));
    tmpMap.put(_Fields.SCHEMA_HASH, new org.apache.thrift.meta_data.FieldMetaData("schema_hash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "TSchemaHash")));
    tmpMap.put(_Fields.PARTITION_ID, new org.apache.thrift.meta_data.FieldMetaData("partition_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "TPartitionId")));
    tmpMap.put(_Fields.META_TYPE, new org.apache.thrift.meta_data.FieldMetaData("meta_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTabletMetaType.class)));
    tmpMap.put(_Fields.IS_IN_MEMORY, new org.apache.thrift.meta_data.FieldMetaData("is_in_memory", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_PERSISTENT_INDEX, new org.apache.thrift.meta_data.FieldMetaData("enable_persistent_index", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BINLOG_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("binlog_config", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TBinlogConfig.class)));
    tmpMap.put(_Fields.PRIMARY_INDEX_CACHE_EXPIRE_SEC, new org.apache.thrift.meta_data.FieldMetaData("primary_index_cache_expire_sec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TABLET_SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("tablet_schema", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTabletSchema.class)));
    tmpMap.put(_Fields.CREATE_SCHEMA_FILE, new org.apache.thrift.meta_data.FieldMetaData("create_schema_file", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PERSISTENT_INDEX_TYPE, new org.apache.thrift.meta_data.FieldMetaData("persistent_index_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPersistentIndexType.class)));
    tmpMap.put(_Fields.FLAT_JSON_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("flat_json_config", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TFlatJsonConfig.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTabletMetaInfo.class, metaDataMap);
  }

  public TTabletMetaInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTabletMetaInfo(TTabletMetaInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tablet_id = other.tablet_id;
    this.schema_hash = other.schema_hash;
    this.partition_id = other.partition_id;
    if (other.isSetMeta_type()) {
      this.meta_type = other.meta_type;
    }
    this.is_in_memory = other.is_in_memory;
    this.enable_persistent_index = other.enable_persistent_index;
    if (other.isSetBinlog_config()) {
      this.binlog_config = new TBinlogConfig(other.binlog_config);
    }
    this.primary_index_cache_expire_sec = other.primary_index_cache_expire_sec;
    if (other.isSetTablet_schema()) {
      this.tablet_schema = new TTabletSchema(other.tablet_schema);
    }
    this.create_schema_file = other.create_schema_file;
    if (other.isSetPersistent_index_type()) {
      this.persistent_index_type = other.persistent_index_type;
    }
    if (other.isSetFlat_json_config()) {
      this.flat_json_config = new TFlatJsonConfig(other.flat_json_config);
    }
  }

  @Override
  public TTabletMetaInfo deepCopy() {
    return new TTabletMetaInfo(this);
  }

  @Override
  public void clear() {
    setTablet_idIsSet(false);
    this.tablet_id = 0;
    setSchema_hashIsSet(false);
    this.schema_hash = 0;
    setPartition_idIsSet(false);
    this.partition_id = 0;
    this.meta_type = null;
    setIs_in_memoryIsSet(false);
    this.is_in_memory = false;
    setEnable_persistent_indexIsSet(false);
    this.enable_persistent_index = false;
    this.binlog_config = null;
    setPrimary_index_cache_expire_secIsSet(false);
    this.primary_index_cache_expire_sec = 0;
    this.tablet_schema = null;
    setCreate_schema_fileIsSet(false);
    this.create_schema_file = false;
    this.persistent_index_type = null;
    this.flat_json_config = null;
  }

  public long getTablet_id() {
    return this.tablet_id;
  }

  public TTabletMetaInfo setTablet_id(long tablet_id) {
    this.tablet_id = tablet_id;
    setTablet_idIsSet(true);
    return this;
  }

  public void unsetTablet_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  /** Returns true if field tablet_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TABLET_ID_ISSET_ID);
  }

  public void setTablet_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TABLET_ID_ISSET_ID, value);
  }

  public int getSchema_hash() {
    return this.schema_hash;
  }

  public TTabletMetaInfo setSchema_hash(int schema_hash) {
    this.schema_hash = schema_hash;
    setSchema_hashIsSet(true);
    return this;
  }

  public void unsetSchema_hash() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  /** Returns true if field schema_hash is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema_hash() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID);
  }

  public void setSchema_hashIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCHEMA_HASH_ISSET_ID, value);
  }

  public long getPartition_id() {
    return this.partition_id;
  }

  public TTabletMetaInfo setPartition_id(long partition_id) {
    this.partition_id = partition_id;
    setPartition_idIsSet(true);
    return this;
  }

  public void unsetPartition_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  /** Returns true if field partition_id is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID_ISSET_ID);
  }

  public void setPartition_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID_ISSET_ID, value);
  }

  /**
   * 
   * @see TTabletMetaType
   */
  @org.apache.thrift.annotation.Nullable
  public TTabletMetaType getMeta_type() {
    return this.meta_type;
  }

  /**
   * 
   * @see TTabletMetaType
   */
  public TTabletMetaInfo setMeta_type(@org.apache.thrift.annotation.Nullable TTabletMetaType meta_type) {
    this.meta_type = meta_type;
    return this;
  }

  public void unsetMeta_type() {
    this.meta_type = null;
  }

  /** Returns true if field meta_type is set (has been assigned a value) and false otherwise */
  public boolean isSetMeta_type() {
    return this.meta_type != null;
  }

  public void setMeta_typeIsSet(boolean value) {
    if (!value) {
      this.meta_type = null;
    }
  }

  public boolean isIs_in_memory() {
    return this.is_in_memory;
  }

  public TTabletMetaInfo setIs_in_memory(boolean is_in_memory) {
    this.is_in_memory = is_in_memory;
    setIs_in_memoryIsSet(true);
    return this;
  }

  public void unsetIs_in_memory() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_IN_MEMORY_ISSET_ID);
  }

  /** Returns true if field is_in_memory is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_in_memory() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_IN_MEMORY_ISSET_ID);
  }

  public void setIs_in_memoryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_IN_MEMORY_ISSET_ID, value);
  }

  public boolean isEnable_persistent_index() {
    return this.enable_persistent_index;
  }

  public TTabletMetaInfo setEnable_persistent_index(boolean enable_persistent_index) {
    this.enable_persistent_index = enable_persistent_index;
    setEnable_persistent_indexIsSet(true);
    return this;
  }

  public void unsetEnable_persistent_index() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_PERSISTENT_INDEX_ISSET_ID);
  }

  /** Returns true if field enable_persistent_index is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_persistent_index() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_PERSISTENT_INDEX_ISSET_ID);
  }

  public void setEnable_persistent_indexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_PERSISTENT_INDEX_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TBinlogConfig getBinlog_config() {
    return this.binlog_config;
  }

  public TTabletMetaInfo setBinlog_config(@org.apache.thrift.annotation.Nullable TBinlogConfig binlog_config) {
    this.binlog_config = binlog_config;
    return this;
  }

  public void unsetBinlog_config() {
    this.binlog_config = null;
  }

  /** Returns true if field binlog_config is set (has been assigned a value) and false otherwise */
  public boolean isSetBinlog_config() {
    return this.binlog_config != null;
  }

  public void setBinlog_configIsSet(boolean value) {
    if (!value) {
      this.binlog_config = null;
    }
  }

  public int getPrimary_index_cache_expire_sec() {
    return this.primary_index_cache_expire_sec;
  }

  public TTabletMetaInfo setPrimary_index_cache_expire_sec(int primary_index_cache_expire_sec) {
    this.primary_index_cache_expire_sec = primary_index_cache_expire_sec;
    setPrimary_index_cache_expire_secIsSet(true);
    return this;
  }

  public void unsetPrimary_index_cache_expire_sec() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIMARY_INDEX_CACHE_EXPIRE_SEC_ISSET_ID);
  }

  /** Returns true if field primary_index_cache_expire_sec is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimary_index_cache_expire_sec() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIMARY_INDEX_CACHE_EXPIRE_SEC_ISSET_ID);
  }

  public void setPrimary_index_cache_expire_secIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIMARY_INDEX_CACHE_EXPIRE_SEC_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TTabletSchema getTablet_schema() {
    return this.tablet_schema;
  }

  public TTabletMetaInfo setTablet_schema(@org.apache.thrift.annotation.Nullable TTabletSchema tablet_schema) {
    this.tablet_schema = tablet_schema;
    return this;
  }

  public void unsetTablet_schema() {
    this.tablet_schema = null;
  }

  /** Returns true if field tablet_schema is set (has been assigned a value) and false otherwise */
  public boolean isSetTablet_schema() {
    return this.tablet_schema != null;
  }

  public void setTablet_schemaIsSet(boolean value) {
    if (!value) {
      this.tablet_schema = null;
    }
  }

  public boolean isCreate_schema_file() {
    return this.create_schema_file;
  }

  public TTabletMetaInfo setCreate_schema_file(boolean create_schema_file) {
    this.create_schema_file = create_schema_file;
    setCreate_schema_fileIsSet(true);
    return this;
  }

  public void unsetCreate_schema_file() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATE_SCHEMA_FILE_ISSET_ID);
  }

  /** Returns true if field create_schema_file is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_schema_file() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATE_SCHEMA_FILE_ISSET_ID);
  }

  public void setCreate_schema_fileIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATE_SCHEMA_FILE_ISSET_ID, value);
  }

  /**
   * 
   * @see TPersistentIndexType
   */
  @org.apache.thrift.annotation.Nullable
  public TPersistentIndexType getPersistent_index_type() {
    return this.persistent_index_type;
  }

  /**
   * 
   * @see TPersistentIndexType
   */
  public TTabletMetaInfo setPersistent_index_type(@org.apache.thrift.annotation.Nullable TPersistentIndexType persistent_index_type) {
    this.persistent_index_type = persistent_index_type;
    return this;
  }

  public void unsetPersistent_index_type() {
    this.persistent_index_type = null;
  }

  /** Returns true if field persistent_index_type is set (has been assigned a value) and false otherwise */
  public boolean isSetPersistent_index_type() {
    return this.persistent_index_type != null;
  }

  public void setPersistent_index_typeIsSet(boolean value) {
    if (!value) {
      this.persistent_index_type = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TFlatJsonConfig getFlat_json_config() {
    return this.flat_json_config;
  }

  public TTabletMetaInfo setFlat_json_config(@org.apache.thrift.annotation.Nullable TFlatJsonConfig flat_json_config) {
    this.flat_json_config = flat_json_config;
    return this;
  }

  public void unsetFlat_json_config() {
    this.flat_json_config = null;
  }

  /** Returns true if field flat_json_config is set (has been assigned a value) and false otherwise */
  public boolean isSetFlat_json_config() {
    return this.flat_json_config != null;
  }

  public void setFlat_json_configIsSet(boolean value) {
    if (!value) {
      this.flat_json_config = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TABLET_ID:
      if (value == null) {
        unsetTablet_id();
      } else {
        setTablet_id((java.lang.Long)value);
      }
      break;

    case SCHEMA_HASH:
      if (value == null) {
        unsetSchema_hash();
      } else {
        setSchema_hash((java.lang.Integer)value);
      }
      break;

    case PARTITION_ID:
      if (value == null) {
        unsetPartition_id();
      } else {
        setPartition_id((java.lang.Long)value);
      }
      break;

    case META_TYPE:
      if (value == null) {
        unsetMeta_type();
      } else {
        setMeta_type((TTabletMetaType)value);
      }
      break;

    case IS_IN_MEMORY:
      if (value == null) {
        unsetIs_in_memory();
      } else {
        setIs_in_memory((java.lang.Boolean)value);
      }
      break;

    case ENABLE_PERSISTENT_INDEX:
      if (value == null) {
        unsetEnable_persistent_index();
      } else {
        setEnable_persistent_index((java.lang.Boolean)value);
      }
      break;

    case BINLOG_CONFIG:
      if (value == null) {
        unsetBinlog_config();
      } else {
        setBinlog_config((TBinlogConfig)value);
      }
      break;

    case PRIMARY_INDEX_CACHE_EXPIRE_SEC:
      if (value == null) {
        unsetPrimary_index_cache_expire_sec();
      } else {
        setPrimary_index_cache_expire_sec((java.lang.Integer)value);
      }
      break;

    case TABLET_SCHEMA:
      if (value == null) {
        unsetTablet_schema();
      } else {
        setTablet_schema((TTabletSchema)value);
      }
      break;

    case CREATE_SCHEMA_FILE:
      if (value == null) {
        unsetCreate_schema_file();
      } else {
        setCreate_schema_file((java.lang.Boolean)value);
      }
      break;

    case PERSISTENT_INDEX_TYPE:
      if (value == null) {
        unsetPersistent_index_type();
      } else {
        setPersistent_index_type((TPersistentIndexType)value);
      }
      break;

    case FLAT_JSON_CONFIG:
      if (value == null) {
        unsetFlat_json_config();
      } else {
        setFlat_json_config((TFlatJsonConfig)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLET_ID:
      return getTablet_id();

    case SCHEMA_HASH:
      return getSchema_hash();

    case PARTITION_ID:
      return getPartition_id();

    case META_TYPE:
      return getMeta_type();

    case IS_IN_MEMORY:
      return isIs_in_memory();

    case ENABLE_PERSISTENT_INDEX:
      return isEnable_persistent_index();

    case BINLOG_CONFIG:
      return getBinlog_config();

    case PRIMARY_INDEX_CACHE_EXPIRE_SEC:
      return getPrimary_index_cache_expire_sec();

    case TABLET_SCHEMA:
      return getTablet_schema();

    case CREATE_SCHEMA_FILE:
      return isCreate_schema_file();

    case PERSISTENT_INDEX_TYPE:
      return getPersistent_index_type();

    case FLAT_JSON_CONFIG:
      return getFlat_json_config();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TABLET_ID:
      return isSetTablet_id();
    case SCHEMA_HASH:
      return isSetSchema_hash();
    case PARTITION_ID:
      return isSetPartition_id();
    case META_TYPE:
      return isSetMeta_type();
    case IS_IN_MEMORY:
      return isSetIs_in_memory();
    case ENABLE_PERSISTENT_INDEX:
      return isSetEnable_persistent_index();
    case BINLOG_CONFIG:
      return isSetBinlog_config();
    case PRIMARY_INDEX_CACHE_EXPIRE_SEC:
      return isSetPrimary_index_cache_expire_sec();
    case TABLET_SCHEMA:
      return isSetTablet_schema();
    case CREATE_SCHEMA_FILE:
      return isSetCreate_schema_file();
    case PERSISTENT_INDEX_TYPE:
      return isSetPersistent_index_type();
    case FLAT_JSON_CONFIG:
      return isSetFlat_json_config();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTabletMetaInfo)
      return this.equals((TTabletMetaInfo)that);
    return false;
  }

  public boolean equals(TTabletMetaInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tablet_id = true && this.isSetTablet_id();
    boolean that_present_tablet_id = true && that.isSetTablet_id();
    if (this_present_tablet_id || that_present_tablet_id) {
      if (!(this_present_tablet_id && that_present_tablet_id))
        return false;
      if (this.tablet_id != that.tablet_id)
        return false;
    }

    boolean this_present_schema_hash = true && this.isSetSchema_hash();
    boolean that_present_schema_hash = true && that.isSetSchema_hash();
    if (this_present_schema_hash || that_present_schema_hash) {
      if (!(this_present_schema_hash && that_present_schema_hash))
        return false;
      if (this.schema_hash != that.schema_hash)
        return false;
    }

    boolean this_present_partition_id = true && this.isSetPartition_id();
    boolean that_present_partition_id = true && that.isSetPartition_id();
    if (this_present_partition_id || that_present_partition_id) {
      if (!(this_present_partition_id && that_present_partition_id))
        return false;
      if (this.partition_id != that.partition_id)
        return false;
    }

    boolean this_present_meta_type = true && this.isSetMeta_type();
    boolean that_present_meta_type = true && that.isSetMeta_type();
    if (this_present_meta_type || that_present_meta_type) {
      if (!(this_present_meta_type && that_present_meta_type))
        return false;
      if (!this.meta_type.equals(that.meta_type))
        return false;
    }

    boolean this_present_is_in_memory = true && this.isSetIs_in_memory();
    boolean that_present_is_in_memory = true && that.isSetIs_in_memory();
    if (this_present_is_in_memory || that_present_is_in_memory) {
      if (!(this_present_is_in_memory && that_present_is_in_memory))
        return false;
      if (this.is_in_memory != that.is_in_memory)
        return false;
    }

    boolean this_present_enable_persistent_index = true && this.isSetEnable_persistent_index();
    boolean that_present_enable_persistent_index = true && that.isSetEnable_persistent_index();
    if (this_present_enable_persistent_index || that_present_enable_persistent_index) {
      if (!(this_present_enable_persistent_index && that_present_enable_persistent_index))
        return false;
      if (this.enable_persistent_index != that.enable_persistent_index)
        return false;
    }

    boolean this_present_binlog_config = true && this.isSetBinlog_config();
    boolean that_present_binlog_config = true && that.isSetBinlog_config();
    if (this_present_binlog_config || that_present_binlog_config) {
      if (!(this_present_binlog_config && that_present_binlog_config))
        return false;
      if (!this.binlog_config.equals(that.binlog_config))
        return false;
    }

    boolean this_present_primary_index_cache_expire_sec = true && this.isSetPrimary_index_cache_expire_sec();
    boolean that_present_primary_index_cache_expire_sec = true && that.isSetPrimary_index_cache_expire_sec();
    if (this_present_primary_index_cache_expire_sec || that_present_primary_index_cache_expire_sec) {
      if (!(this_present_primary_index_cache_expire_sec && that_present_primary_index_cache_expire_sec))
        return false;
      if (this.primary_index_cache_expire_sec != that.primary_index_cache_expire_sec)
        return false;
    }

    boolean this_present_tablet_schema = true && this.isSetTablet_schema();
    boolean that_present_tablet_schema = true && that.isSetTablet_schema();
    if (this_present_tablet_schema || that_present_tablet_schema) {
      if (!(this_present_tablet_schema && that_present_tablet_schema))
        return false;
      if (!this.tablet_schema.equals(that.tablet_schema))
        return false;
    }

    boolean this_present_create_schema_file = true && this.isSetCreate_schema_file();
    boolean that_present_create_schema_file = true && that.isSetCreate_schema_file();
    if (this_present_create_schema_file || that_present_create_schema_file) {
      if (!(this_present_create_schema_file && that_present_create_schema_file))
        return false;
      if (this.create_schema_file != that.create_schema_file)
        return false;
    }

    boolean this_present_persistent_index_type = true && this.isSetPersistent_index_type();
    boolean that_present_persistent_index_type = true && that.isSetPersistent_index_type();
    if (this_present_persistent_index_type || that_present_persistent_index_type) {
      if (!(this_present_persistent_index_type && that_present_persistent_index_type))
        return false;
      if (!this.persistent_index_type.equals(that.persistent_index_type))
        return false;
    }

    boolean this_present_flat_json_config = true && this.isSetFlat_json_config();
    boolean that_present_flat_json_config = true && that.isSetFlat_json_config();
    if (this_present_flat_json_config || that_present_flat_json_config) {
      if (!(this_present_flat_json_config && that_present_flat_json_config))
        return false;
      if (!this.flat_json_config.equals(that.flat_json_config))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTablet_id()) ? 131071 : 524287);
    if (isSetTablet_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(tablet_id);

    hashCode = hashCode * 8191 + ((isSetSchema_hash()) ? 131071 : 524287);
    if (isSetSchema_hash())
      hashCode = hashCode * 8191 + schema_hash;

    hashCode = hashCode * 8191 + ((isSetPartition_id()) ? 131071 : 524287);
    if (isSetPartition_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(partition_id);

    hashCode = hashCode * 8191 + ((isSetMeta_type()) ? 131071 : 524287);
    if (isSetMeta_type())
      hashCode = hashCode * 8191 + meta_type.getValue();

    hashCode = hashCode * 8191 + ((isSetIs_in_memory()) ? 131071 : 524287);
    if (isSetIs_in_memory())
      hashCode = hashCode * 8191 + ((is_in_memory) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnable_persistent_index()) ? 131071 : 524287);
    if (isSetEnable_persistent_index())
      hashCode = hashCode * 8191 + ((enable_persistent_index) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBinlog_config()) ? 131071 : 524287);
    if (isSetBinlog_config())
      hashCode = hashCode * 8191 + binlog_config.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrimary_index_cache_expire_sec()) ? 131071 : 524287);
    if (isSetPrimary_index_cache_expire_sec())
      hashCode = hashCode * 8191 + primary_index_cache_expire_sec;

    hashCode = hashCode * 8191 + ((isSetTablet_schema()) ? 131071 : 524287);
    if (isSetTablet_schema())
      hashCode = hashCode * 8191 + tablet_schema.hashCode();

    hashCode = hashCode * 8191 + ((isSetCreate_schema_file()) ? 131071 : 524287);
    if (isSetCreate_schema_file())
      hashCode = hashCode * 8191 + ((create_schema_file) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPersistent_index_type()) ? 131071 : 524287);
    if (isSetPersistent_index_type())
      hashCode = hashCode * 8191 + persistent_index_type.getValue();

    hashCode = hashCode * 8191 + ((isSetFlat_json_config()) ? 131071 : 524287);
    if (isSetFlat_json_config())
      hashCode = hashCode * 8191 + flat_json_config.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TTabletMetaInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetTablet_id(), other.isSetTablet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_id, other.tablet_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSchema_hash(), other.isSetSchema_hash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema_hash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema_hash, other.schema_hash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_id(), other.isSetPartition_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id, other.partition_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMeta_type(), other.isSetMeta_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeta_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meta_type, other.meta_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_in_memory(), other.isSetIs_in_memory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_in_memory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_in_memory, other.is_in_memory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_persistent_index(), other.isSetEnable_persistent_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_persistent_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_persistent_index, other.enable_persistent_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBinlog_config(), other.isSetBinlog_config());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinlog_config()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binlog_config, other.binlog_config);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPrimary_index_cache_expire_sec(), other.isSetPrimary_index_cache_expire_sec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimary_index_cache_expire_sec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primary_index_cache_expire_sec, other.primary_index_cache_expire_sec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTablet_schema(), other.isSetTablet_schema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablet_schema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablet_schema, other.tablet_schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreate_schema_file(), other.isSetCreate_schema_file());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_schema_file()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_schema_file, other.create_schema_file);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPersistent_index_type(), other.isSetPersistent_index_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersistent_index_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.persistent_index_type, other.persistent_index_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFlat_json_config(), other.isSetFlat_json_config());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlat_json_config()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flat_json_config, other.flat_json_config);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTabletMetaInfo(");
    boolean first = true;

    if (isSetTablet_id()) {
      sb.append("tablet_id:");
      sb.append(this.tablet_id);
      first = false;
    }
    if (isSetSchema_hash()) {
      if (!first) sb.append(", ");
      sb.append("schema_hash:");
      sb.append(this.schema_hash);
      first = false;
    }
    if (isSetPartition_id()) {
      if (!first) sb.append(", ");
      sb.append("partition_id:");
      sb.append(this.partition_id);
      first = false;
    }
    if (isSetMeta_type()) {
      if (!first) sb.append(", ");
      sb.append("meta_type:");
      if (this.meta_type == null) {
        sb.append("null");
      } else {
        sb.append(this.meta_type);
      }
      first = false;
    }
    if (isSetIs_in_memory()) {
      if (!first) sb.append(", ");
      sb.append("is_in_memory:");
      sb.append(this.is_in_memory);
      first = false;
    }
    if (isSetEnable_persistent_index()) {
      if (!first) sb.append(", ");
      sb.append("enable_persistent_index:");
      sb.append(this.enable_persistent_index);
      first = false;
    }
    if (isSetBinlog_config()) {
      if (!first) sb.append(", ");
      sb.append("binlog_config:");
      if (this.binlog_config == null) {
        sb.append("null");
      } else {
        sb.append(this.binlog_config);
      }
      first = false;
    }
    if (isSetPrimary_index_cache_expire_sec()) {
      if (!first) sb.append(", ");
      sb.append("primary_index_cache_expire_sec:");
      sb.append(this.primary_index_cache_expire_sec);
      first = false;
    }
    if (isSetTablet_schema()) {
      if (!first) sb.append(", ");
      sb.append("tablet_schema:");
      if (this.tablet_schema == null) {
        sb.append("null");
      } else {
        sb.append(this.tablet_schema);
      }
      first = false;
    }
    if (isSetCreate_schema_file()) {
      if (!first) sb.append(", ");
      sb.append("create_schema_file:");
      sb.append(this.create_schema_file);
      first = false;
    }
    if (isSetPersistent_index_type()) {
      if (!first) sb.append(", ");
      sb.append("persistent_index_type:");
      if (this.persistent_index_type == null) {
        sb.append("null");
      } else {
        sb.append(this.persistent_index_type);
      }
      first = false;
    }
    if (isSetFlat_json_config()) {
      if (!first) sb.append(", ");
      sb.append("flat_json_config:");
      if (this.flat_json_config == null) {
        sb.append("null");
      } else {
        sb.append(this.flat_json_config);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (binlog_config != null) {
      binlog_config.validate();
    }
    if (tablet_schema != null) {
      tablet_schema.validate();
    }
    if (flat_json_config != null) {
      flat_json_config.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTabletMetaInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTabletMetaInfoStandardScheme getScheme() {
      return new TTabletMetaInfoStandardScheme();
    }
  }

  private static class TTabletMetaInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTabletMetaInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTabletMetaInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tablet_id = iprot.readI64();
              struct.setTablet_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCHEMA_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.schema_hash = iprot.readI32();
              struct.setSchema_hashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARTITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.partition_id = iprot.readI64();
              struct.setPartition_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // META_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.meta_type = com.starrocks.thrift.TTabletMetaType.findByValue(iprot.readI32());
              struct.setMeta_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_IN_MEMORY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_in_memory = iprot.readBool();
              struct.setIs_in_memoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ENABLE_PERSISTENT_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_persistent_index = iprot.readBool();
              struct.setEnable_persistent_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BINLOG_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.binlog_config = new TBinlogConfig();
              struct.binlog_config.read(iprot);
              struct.setBinlog_configIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRIMARY_INDEX_CACHE_EXPIRE_SEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.primary_index_cache_expire_sec = iprot.readI32();
              struct.setPrimary_index_cache_expire_secIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TABLET_SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tablet_schema = new TTabletSchema();
              struct.tablet_schema.read(iprot);
              struct.setTablet_schemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_SCHEMA_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.create_schema_file = iprot.readBool();
              struct.setCreate_schema_fileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PERSISTENT_INDEX_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.persistent_index_type = com.starrocks.thrift.TPersistentIndexType.findByValue(iprot.readI32());
              struct.setPersistent_index_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FLAT_JSON_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.flat_json_config = new TFlatJsonConfig();
              struct.flat_json_config.read(iprot);
              struct.setFlat_json_configIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTabletMetaInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTablet_id()) {
        oprot.writeFieldBegin(TABLET_ID_FIELD_DESC);
        oprot.writeI64(struct.tablet_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSchema_hash()) {
        oprot.writeFieldBegin(SCHEMA_HASH_FIELD_DESC);
        oprot.writeI32(struct.schema_hash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPartition_id()) {
        oprot.writeFieldBegin(PARTITION_ID_FIELD_DESC);
        oprot.writeI64(struct.partition_id);
        oprot.writeFieldEnd();
      }
      if (struct.meta_type != null) {
        if (struct.isSetMeta_type()) {
          oprot.writeFieldBegin(META_TYPE_FIELD_DESC);
          oprot.writeI32(struct.meta_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_in_memory()) {
        oprot.writeFieldBegin(IS_IN_MEMORY_FIELD_DESC);
        oprot.writeBool(struct.is_in_memory);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_persistent_index()) {
        oprot.writeFieldBegin(ENABLE_PERSISTENT_INDEX_FIELD_DESC);
        oprot.writeBool(struct.enable_persistent_index);
        oprot.writeFieldEnd();
      }
      if (struct.binlog_config != null) {
        if (struct.isSetBinlog_config()) {
          oprot.writeFieldBegin(BINLOG_CONFIG_FIELD_DESC);
          struct.binlog_config.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPrimary_index_cache_expire_sec()) {
        oprot.writeFieldBegin(PRIMARY_INDEX_CACHE_EXPIRE_SEC_FIELD_DESC);
        oprot.writeI32(struct.primary_index_cache_expire_sec);
        oprot.writeFieldEnd();
      }
      if (struct.tablet_schema != null) {
        if (struct.isSetTablet_schema()) {
          oprot.writeFieldBegin(TABLET_SCHEMA_FIELD_DESC);
          struct.tablet_schema.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreate_schema_file()) {
        oprot.writeFieldBegin(CREATE_SCHEMA_FILE_FIELD_DESC);
        oprot.writeBool(struct.create_schema_file);
        oprot.writeFieldEnd();
      }
      if (struct.persistent_index_type != null) {
        if (struct.isSetPersistent_index_type()) {
          oprot.writeFieldBegin(PERSISTENT_INDEX_TYPE_FIELD_DESC);
          oprot.writeI32(struct.persistent_index_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.flat_json_config != null) {
        if (struct.isSetFlat_json_config()) {
          oprot.writeFieldBegin(FLAT_JSON_CONFIG_FIELD_DESC);
          struct.flat_json_config.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTabletMetaInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTabletMetaInfoTupleScheme getScheme() {
      return new TTabletMetaInfoTupleScheme();
    }
  }

  private static class TTabletMetaInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTabletMetaInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTabletMetaInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTablet_id()) {
        optionals.set(0);
      }
      if (struct.isSetSchema_hash()) {
        optionals.set(1);
      }
      if (struct.isSetPartition_id()) {
        optionals.set(2);
      }
      if (struct.isSetMeta_type()) {
        optionals.set(3);
      }
      if (struct.isSetIs_in_memory()) {
        optionals.set(4);
      }
      if (struct.isSetEnable_persistent_index()) {
        optionals.set(5);
      }
      if (struct.isSetBinlog_config()) {
        optionals.set(6);
      }
      if (struct.isSetPrimary_index_cache_expire_sec()) {
        optionals.set(7);
      }
      if (struct.isSetTablet_schema()) {
        optionals.set(8);
      }
      if (struct.isSetCreate_schema_file()) {
        optionals.set(9);
      }
      if (struct.isSetPersistent_index_type()) {
        optionals.set(10);
      }
      if (struct.isSetFlat_json_config()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetTablet_id()) {
        oprot.writeI64(struct.tablet_id);
      }
      if (struct.isSetSchema_hash()) {
        oprot.writeI32(struct.schema_hash);
      }
      if (struct.isSetPartition_id()) {
        oprot.writeI64(struct.partition_id);
      }
      if (struct.isSetMeta_type()) {
        oprot.writeI32(struct.meta_type.getValue());
      }
      if (struct.isSetIs_in_memory()) {
        oprot.writeBool(struct.is_in_memory);
      }
      if (struct.isSetEnable_persistent_index()) {
        oprot.writeBool(struct.enable_persistent_index);
      }
      if (struct.isSetBinlog_config()) {
        struct.binlog_config.write(oprot);
      }
      if (struct.isSetPrimary_index_cache_expire_sec()) {
        oprot.writeI32(struct.primary_index_cache_expire_sec);
      }
      if (struct.isSetTablet_schema()) {
        struct.tablet_schema.write(oprot);
      }
      if (struct.isSetCreate_schema_file()) {
        oprot.writeBool(struct.create_schema_file);
      }
      if (struct.isSetPersistent_index_type()) {
        oprot.writeI32(struct.persistent_index_type.getValue());
      }
      if (struct.isSetFlat_json_config()) {
        struct.flat_json_config.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTabletMetaInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.tablet_id = iprot.readI64();
        struct.setTablet_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.schema_hash = iprot.readI32();
        struct.setSchema_hashIsSet(true);
      }
      if (incoming.get(2)) {
        struct.partition_id = iprot.readI64();
        struct.setPartition_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.meta_type = com.starrocks.thrift.TTabletMetaType.findByValue(iprot.readI32());
        struct.setMeta_typeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.is_in_memory = iprot.readBool();
        struct.setIs_in_memoryIsSet(true);
      }
      if (incoming.get(5)) {
        struct.enable_persistent_index = iprot.readBool();
        struct.setEnable_persistent_indexIsSet(true);
      }
      if (incoming.get(6)) {
        struct.binlog_config = new TBinlogConfig();
        struct.binlog_config.read(iprot);
        struct.setBinlog_configIsSet(true);
      }
      if (incoming.get(7)) {
        struct.primary_index_cache_expire_sec = iprot.readI32();
        struct.setPrimary_index_cache_expire_secIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tablet_schema = new TTabletSchema();
        struct.tablet_schema.read(iprot);
        struct.setTablet_schemaIsSet(true);
      }
      if (incoming.get(9)) {
        struct.create_schema_file = iprot.readBool();
        struct.setCreate_schema_fileIsSet(true);
      }
      if (incoming.get(10)) {
        struct.persistent_index_type = com.starrocks.thrift.TPersistentIndexType.findByValue(iprot.readI32());
        struct.setPersistent_index_typeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.flat_json_config = new TFlatJsonConfig();
        struct.flat_json_config.read(iprot);
        struct.setFlat_json_configIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

