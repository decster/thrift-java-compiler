/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TDeletionVectorDescriptor implements org.apache.thrift.TBase<TDeletionVectorDescriptor, TDeletionVectorDescriptor._Fields>, java.io.Serializable, Cloneable, Comparable<TDeletionVectorDescriptor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDeletionVectorDescriptor");

  private static final org.apache.thrift.protocol.TField STORAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("storageType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PATH_OR_INLINE_DV_FIELD_DESC = new org.apache.thrift.protocol.TField("pathOrInlineDv", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SIZE_IN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeInBytes", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CARDINALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("cardinality", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TDeletionVectorDescriptorStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TDeletionVectorDescriptorTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String storageType; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String pathOrInlineDv; // optional
  public long offset; // optional
  public long sizeInBytes; // optional
  public long cardinality; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STORAGE_TYPE((short)1, "storageType"),
    PATH_OR_INLINE_DV((short)2, "pathOrInlineDv"),
    OFFSET((short)3, "offset"),
    SIZE_IN_BYTES((short)4, "sizeInBytes"),
    CARDINALITY((short)5, "cardinality");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STORAGE_TYPE
          return STORAGE_TYPE;
        case 2: // PATH_OR_INLINE_DV
          return PATH_OR_INLINE_DV;
        case 3: // OFFSET
          return OFFSET;
        case 4: // SIZE_IN_BYTES
          return SIZE_IN_BYTES;
        case 5: // CARDINALITY
          return CARDINALITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OFFSET_ISSET_ID = 0;
  private static final int __SIZEINBYTES_ISSET_ID = 1;
  private static final int __CARDINALITY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STORAGE_TYPE,_Fields.PATH_OR_INLINE_DV,_Fields.OFFSET,_Fields.SIZE_IN_BYTES,_Fields.CARDINALITY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STORAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("storageType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATH_OR_INLINE_DV, new org.apache.thrift.meta_data.FieldMetaData("pathOrInlineDv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SIZE_IN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("sizeInBytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CARDINALITY, new org.apache.thrift.meta_data.FieldMetaData("cardinality", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDeletionVectorDescriptor.class, metaDataMap);
  }

  public TDeletionVectorDescriptor() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDeletionVectorDescriptor(TDeletionVectorDescriptor other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStorageType()) {
      this.storageType = other.storageType;
    }
    if (other.isSetPathOrInlineDv()) {
      this.pathOrInlineDv = other.pathOrInlineDv;
    }
    this.offset = other.offset;
    this.sizeInBytes = other.sizeInBytes;
    this.cardinality = other.cardinality;
  }

  @Override
  public TDeletionVectorDescriptor deepCopy() {
    return new TDeletionVectorDescriptor(this);
  }

  @Override
  public void clear() {
    this.storageType = null;
    this.pathOrInlineDv = null;
    setOffsetIsSet(false);
    this.offset = 0;
    setSizeInBytesIsSet(false);
    this.sizeInBytes = 0;
    setCardinalityIsSet(false);
    this.cardinality = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStorageType() {
    return this.storageType;
  }

  public TDeletionVectorDescriptor setStorageType(@org.apache.thrift.annotation.Nullable java.lang.String storageType) {
    this.storageType = storageType;
    return this;
  }

  public void unsetStorageType() {
    this.storageType = null;
  }

  /** Returns true if field storageType is set (has been assigned a value) and false otherwise */
  public boolean isSetStorageType() {
    return this.storageType != null;
  }

  public void setStorageTypeIsSet(boolean value) {
    if (!value) {
      this.storageType = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPathOrInlineDv() {
    return this.pathOrInlineDv;
  }

  public TDeletionVectorDescriptor setPathOrInlineDv(@org.apache.thrift.annotation.Nullable java.lang.String pathOrInlineDv) {
    this.pathOrInlineDv = pathOrInlineDv;
    return this;
  }

  public void unsetPathOrInlineDv() {
    this.pathOrInlineDv = null;
  }

  /** Returns true if field pathOrInlineDv is set (has been assigned a value) and false otherwise */
  public boolean isSetPathOrInlineDv() {
    return this.pathOrInlineDv != null;
  }

  public void setPathOrInlineDvIsSet(boolean value) {
    if (!value) {
      this.pathOrInlineDv = null;
    }
  }

  public long getOffset() {
    return this.offset;
  }

  public TDeletionVectorDescriptor setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public long getSizeInBytes() {
    return this.sizeInBytes;
  }

  public TDeletionVectorDescriptor setSizeInBytes(long sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
    setSizeInBytesIsSet(true);
    return this;
  }

  public void unsetSizeInBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZEINBYTES_ISSET_ID);
  }

  /** Returns true if field sizeInBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSizeInBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZEINBYTES_ISSET_ID);
  }

  public void setSizeInBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZEINBYTES_ISSET_ID, value);
  }

  public long getCardinality() {
    return this.cardinality;
  }

  public TDeletionVectorDescriptor setCardinality(long cardinality) {
    this.cardinality = cardinality;
    setCardinalityIsSet(true);
    return this;
  }

  public void unsetCardinality() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CARDINALITY_ISSET_ID);
  }

  /** Returns true if field cardinality is set (has been assigned a value) and false otherwise */
  public boolean isSetCardinality() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CARDINALITY_ISSET_ID);
  }

  public void setCardinalityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CARDINALITY_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STORAGE_TYPE:
      if (value == null) {
        unsetStorageType();
      } else {
        setStorageType((java.lang.String)value);
      }
      break;

    case PATH_OR_INLINE_DV:
      if (value == null) {
        unsetPathOrInlineDv();
      } else {
        setPathOrInlineDv((java.lang.String)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((java.lang.Long)value);
      }
      break;

    case SIZE_IN_BYTES:
      if (value == null) {
        unsetSizeInBytes();
      } else {
        setSizeInBytes((java.lang.Long)value);
      }
      break;

    case CARDINALITY:
      if (value == null) {
        unsetCardinality();
      } else {
        setCardinality((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STORAGE_TYPE:
      return getStorageType();

    case PATH_OR_INLINE_DV:
      return getPathOrInlineDv();

    case OFFSET:
      return getOffset();

    case SIZE_IN_BYTES:
      return getSizeInBytes();

    case CARDINALITY:
      return getCardinality();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STORAGE_TYPE:
      return isSetStorageType();
    case PATH_OR_INLINE_DV:
      return isSetPathOrInlineDv();
    case OFFSET:
      return isSetOffset();
    case SIZE_IN_BYTES:
      return isSetSizeInBytes();
    case CARDINALITY:
      return isSetCardinality();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TDeletionVectorDescriptor)
      return this.equals((TDeletionVectorDescriptor)that);
    return false;
  }

  public boolean equals(TDeletionVectorDescriptor that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_storageType = true && this.isSetStorageType();
    boolean that_present_storageType = true && that.isSetStorageType();
    if (this_present_storageType || that_present_storageType) {
      if (!(this_present_storageType && that_present_storageType))
        return false;
      if (!this.storageType.equals(that.storageType))
        return false;
    }

    boolean this_present_pathOrInlineDv = true && this.isSetPathOrInlineDv();
    boolean that_present_pathOrInlineDv = true && that.isSetPathOrInlineDv();
    if (this_present_pathOrInlineDv || that_present_pathOrInlineDv) {
      if (!(this_present_pathOrInlineDv && that_present_pathOrInlineDv))
        return false;
      if (!this.pathOrInlineDv.equals(that.pathOrInlineDv))
        return false;
    }

    boolean this_present_offset = true && this.isSetOffset();
    boolean that_present_offset = true && that.isSetOffset();
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_sizeInBytes = true && this.isSetSizeInBytes();
    boolean that_present_sizeInBytes = true && that.isSetSizeInBytes();
    if (this_present_sizeInBytes || that_present_sizeInBytes) {
      if (!(this_present_sizeInBytes && that_present_sizeInBytes))
        return false;
      if (this.sizeInBytes != that.sizeInBytes)
        return false;
    }

    boolean this_present_cardinality = true && this.isSetCardinality();
    boolean that_present_cardinality = true && that.isSetCardinality();
    if (this_present_cardinality || that_present_cardinality) {
      if (!(this_present_cardinality && that_present_cardinality))
        return false;
      if (this.cardinality != that.cardinality)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStorageType()) ? 131071 : 524287);
    if (isSetStorageType())
      hashCode = hashCode * 8191 + storageType.hashCode();

    hashCode = hashCode * 8191 + ((isSetPathOrInlineDv()) ? 131071 : 524287);
    if (isSetPathOrInlineDv())
      hashCode = hashCode * 8191 + pathOrInlineDv.hashCode();

    hashCode = hashCode * 8191 + ((isSetOffset()) ? 131071 : 524287);
    if (isSetOffset())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(offset);

    hashCode = hashCode * 8191 + ((isSetSizeInBytes()) ? 131071 : 524287);
    if (isSetSizeInBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sizeInBytes);

    hashCode = hashCode * 8191 + ((isSetCardinality()) ? 131071 : 524287);
    if (isSetCardinality())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cardinality);

    return hashCode;
  }

  @Override
  public int compareTo(TDeletionVectorDescriptor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStorageType(), other.isSetStorageType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorageType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storageType, other.storageType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPathOrInlineDv(), other.isSetPathOrInlineDv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPathOrInlineDv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pathOrInlineDv, other.pathOrInlineDv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOffset(), other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSizeInBytes(), other.isSetSizeInBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSizeInBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeInBytes, other.sizeInBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCardinality(), other.isSetCardinality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardinality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardinality, other.cardinality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TDeletionVectorDescriptor(");
    boolean first = true;

    if (isSetStorageType()) {
      sb.append("storageType:");
      if (this.storageType == null) {
        sb.append("null");
      } else {
        sb.append(this.storageType);
      }
      first = false;
    }
    if (isSetPathOrInlineDv()) {
      if (!first) sb.append(", ");
      sb.append("pathOrInlineDv:");
      if (this.pathOrInlineDv == null) {
        sb.append("null");
      } else {
        sb.append(this.pathOrInlineDv);
      }
      first = false;
    }
    if (isSetOffset()) {
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
    }
    if (isSetSizeInBytes()) {
      if (!first) sb.append(", ");
      sb.append("sizeInBytes:");
      sb.append(this.sizeInBytes);
      first = false;
    }
    if (isSetCardinality()) {
      if (!first) sb.append(", ");
      sb.append("cardinality:");
      sb.append(this.cardinality);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDeletionVectorDescriptorStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDeletionVectorDescriptorStandardScheme getScheme() {
      return new TDeletionVectorDescriptorStandardScheme();
    }
  }

  private static class TDeletionVectorDescriptorStandardScheme extends org.apache.thrift.scheme.StandardScheme<TDeletionVectorDescriptor> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TDeletionVectorDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STORAGE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storageType = iprot.readString();
              struct.setStorageTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PATH_OR_INLINE_DV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pathOrInlineDv = iprot.readString();
              struct.setPathOrInlineDvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIZE_IN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sizeInBytes = iprot.readI64();
              struct.setSizeInBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CARDINALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cardinality = iprot.readI64();
              struct.setCardinalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TDeletionVectorDescriptor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.storageType != null) {
        if (struct.isSetStorageType()) {
          oprot.writeFieldBegin(STORAGE_TYPE_FIELD_DESC);
          oprot.writeString(struct.storageType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pathOrInlineDv != null) {
        if (struct.isSetPathOrInlineDv()) {
          oprot.writeFieldBegin(PATH_OR_INLINE_DV_FIELD_DESC);
          oprot.writeString(struct.pathOrInlineDv);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOffset()) {
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI64(struct.offset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSizeInBytes()) {
        oprot.writeFieldBegin(SIZE_IN_BYTES_FIELD_DESC);
        oprot.writeI64(struct.sizeInBytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCardinality()) {
        oprot.writeFieldBegin(CARDINALITY_FIELD_DESC);
        oprot.writeI64(struct.cardinality);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDeletionVectorDescriptorTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TDeletionVectorDescriptorTupleScheme getScheme() {
      return new TDeletionVectorDescriptorTupleScheme();
    }
  }

  private static class TDeletionVectorDescriptorTupleScheme extends org.apache.thrift.scheme.TupleScheme<TDeletionVectorDescriptor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDeletionVectorDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStorageType()) {
        optionals.set(0);
      }
      if (struct.isSetPathOrInlineDv()) {
        optionals.set(1);
      }
      if (struct.isSetOffset()) {
        optionals.set(2);
      }
      if (struct.isSetSizeInBytes()) {
        optionals.set(3);
      }
      if (struct.isSetCardinality()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetStorageType()) {
        oprot.writeString(struct.storageType);
      }
      if (struct.isSetPathOrInlineDv()) {
        oprot.writeString(struct.pathOrInlineDv);
      }
      if (struct.isSetOffset()) {
        oprot.writeI64(struct.offset);
      }
      if (struct.isSetSizeInBytes()) {
        oprot.writeI64(struct.sizeInBytes);
      }
      if (struct.isSetCardinality()) {
        oprot.writeI64(struct.cardinality);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDeletionVectorDescriptor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.storageType = iprot.readString();
        struct.setStorageTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pathOrInlineDv = iprot.readString();
        struct.setPathOrInlineDvIsSet(true);
      }
      if (incoming.get(2)) {
        struct.offset = iprot.readI64();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sizeInBytes = iprot.readI64();
        struct.setSizeInBytesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cardinality = iprot.readI64();
        struct.setCardinalityIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

