/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TNormalSelectNode implements org.apache.thrift.TBase<TNormalSelectNode, TNormalSelectNode._Fields>, java.io.Serializable, Cloneable, Comparable<TNormalSelectNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNormalSelectNode");

  private static final org.apache.thrift.protocol.TField CSE_SLOT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cse_slot_ids", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CSE_EXPRS_FIELD_DESC = new org.apache.thrift.protocol.TField("cse_exprs", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TNormalSelectNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TNormalSelectNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> cse_slot_ids; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> cse_exprs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CSE_SLOT_IDS((short)1, "cse_slot_ids"),
    CSE_EXPRS((short)2, "cse_exprs");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CSE_SLOT_IDS
          return CSE_SLOT_IDS;
        case 2: // CSE_EXPRS
          return CSE_EXPRS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CSE_SLOT_IDS,_Fields.CSE_EXPRS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CSE_SLOT_IDS, new org.apache.thrift.meta_data.FieldMetaData("cse_slot_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"))));
    tmpMap.put(_Fields.CSE_EXPRS, new org.apache.thrift.meta_data.FieldMetaData("cse_exprs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNormalSelectNode.class, metaDataMap);
  }

  public TNormalSelectNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNormalSelectNode(TNormalSelectNode other) {
    if (other.isSetCse_slot_ids()) {
      java.util.List<java.lang.Integer> __this__cse_slot_ids = new java.util.ArrayList<java.lang.Integer>(other.cse_slot_ids.size());
      for (java.lang.Integer other_element : other.cse_slot_ids) {
        __this__cse_slot_ids.add(other_element);
      }
      this.cse_slot_ids = __this__cse_slot_ids;
    }
    if (other.isSetCse_exprs()) {
      java.util.List<java.nio.ByteBuffer> __this__cse_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(other.cse_exprs);
      this.cse_exprs = __this__cse_exprs;
    }
  }

  @Override
  public TNormalSelectNode deepCopy() {
    return new TNormalSelectNode(this);
  }

  @Override
  public void clear() {
    this.cse_slot_ids = null;
    this.cse_exprs = null;
  }

  public int getCse_slot_idsSize() {
    return (this.cse_slot_ids == null) ? 0 : this.cse_slot_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getCse_slot_idsIterator() {
    return (this.cse_slot_ids == null) ? null : this.cse_slot_ids.iterator();
  }

  public void addToCse_slot_ids(int elem) {
    if (this.cse_slot_ids == null) {
      this.cse_slot_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.cse_slot_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getCse_slot_ids() {
    return this.cse_slot_ids;
  }

  public TNormalSelectNode setCse_slot_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> cse_slot_ids) {
    this.cse_slot_ids = cse_slot_ids;
    return this;
  }

  public void unsetCse_slot_ids() {
    this.cse_slot_ids = null;
  }

  /** Returns true if field cse_slot_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetCse_slot_ids() {
    return this.cse_slot_ids != null;
  }

  public void setCse_slot_idsIsSet(boolean value) {
    if (!value) {
      this.cse_slot_ids = null;
    }
  }

  public int getCse_exprsSize() {
    return (this.cse_exprs == null) ? 0 : this.cse_exprs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getCse_exprsIterator() {
    return (this.cse_exprs == null) ? null : this.cse_exprs.iterator();
  }

  public void addToCse_exprs(java.nio.ByteBuffer elem) {
    if (this.cse_exprs == null) {
      this.cse_exprs = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.cse_exprs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getCse_exprs() {
    return this.cse_exprs;
  }

  public TNormalSelectNode setCse_exprs(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> cse_exprs) {
    this.cse_exprs = cse_exprs;
    return this;
  }

  public void unsetCse_exprs() {
    this.cse_exprs = null;
  }

  /** Returns true if field cse_exprs is set (has been assigned a value) and false otherwise */
  public boolean isSetCse_exprs() {
    return this.cse_exprs != null;
  }

  public void setCse_exprsIsSet(boolean value) {
    if (!value) {
      this.cse_exprs = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CSE_SLOT_IDS:
      if (value == null) {
        unsetCse_slot_ids();
      } else {
        setCse_slot_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    case CSE_EXPRS:
      if (value == null) {
        unsetCse_exprs();
      } else {
        setCse_exprs((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CSE_SLOT_IDS:
      return getCse_slot_ids();

    case CSE_EXPRS:
      return getCse_exprs();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CSE_SLOT_IDS:
      return isSetCse_slot_ids();
    case CSE_EXPRS:
      return isSetCse_exprs();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TNormalSelectNode)
      return this.equals((TNormalSelectNode)that);
    return false;
  }

  public boolean equals(TNormalSelectNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cse_slot_ids = true && this.isSetCse_slot_ids();
    boolean that_present_cse_slot_ids = true && that.isSetCse_slot_ids();
    if (this_present_cse_slot_ids || that_present_cse_slot_ids) {
      if (!(this_present_cse_slot_ids && that_present_cse_slot_ids))
        return false;
      if (!this.cse_slot_ids.equals(that.cse_slot_ids))
        return false;
    }

    boolean this_present_cse_exprs = true && this.isSetCse_exprs();
    boolean that_present_cse_exprs = true && that.isSetCse_exprs();
    if (this_present_cse_exprs || that_present_cse_exprs) {
      if (!(this_present_cse_exprs && that_present_cse_exprs))
        return false;
      if (!this.cse_exprs.equals(that.cse_exprs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCse_slot_ids()) ? 131071 : 524287);
    if (isSetCse_slot_ids())
      hashCode = hashCode * 8191 + cse_slot_ids.hashCode();

    hashCode = hashCode * 8191 + ((isSetCse_exprs()) ? 131071 : 524287);
    if (isSetCse_exprs())
      hashCode = hashCode * 8191 + cse_exprs.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TNormalSelectNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCse_slot_ids(), other.isSetCse_slot_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCse_slot_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cse_slot_ids, other.cse_slot_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCse_exprs(), other.isSetCse_exprs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCse_exprs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cse_exprs, other.cse_exprs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TNormalSelectNode(");
    boolean first = true;

    if (isSetCse_slot_ids()) {
      sb.append("cse_slot_ids:");
      if (this.cse_slot_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.cse_slot_ids);
      }
      first = false;
    }
    if (isSetCse_exprs()) {
      if (!first) sb.append(", ");
      sb.append("cse_exprs:");
      if (this.cse_exprs == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.cse_exprs, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TNormalSelectNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalSelectNodeStandardScheme getScheme() {
      return new TNormalSelectNodeStandardScheme();
    }
  }

  private static class TNormalSelectNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TNormalSelectNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TNormalSelectNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CSE_SLOT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list392 = iprot.readListBegin();
                struct.cse_slot_ids = new java.util.ArrayList<java.lang.Integer>(_list392.size);
                int _elem393;
                for (int _i394 = 0; _i394 < _list392.size; ++_i394)
                {
                  _elem393 = iprot.readI32();
                  struct.cse_slot_ids.add(_elem393);
                }
                iprot.readListEnd();
              }
              struct.setCse_slot_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CSE_EXPRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list395 = iprot.readListBegin();
                struct.cse_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list395.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem396;
                for (int _i397 = 0; _i397 < _list395.size; ++_i397)
                {
                  _elem396 = iprot.readBinary();
                  struct.cse_exprs.add(_elem396);
                }
                iprot.readListEnd();
              }
              struct.setCse_exprsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TNormalSelectNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cse_slot_ids != null) {
        if (struct.isSetCse_slot_ids()) {
          oprot.writeFieldBegin(CSE_SLOT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.cse_slot_ids.size()));
            for (int _iter398 : struct.cse_slot_ids)
            {
              oprot.writeI32(_iter398);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.cse_exprs != null) {
        if (struct.isSetCse_exprs()) {
          oprot.writeFieldBegin(CSE_EXPRS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cse_exprs.size()));
            for (java.nio.ByteBuffer _iter399 : struct.cse_exprs)
            {
              oprot.writeBinary(_iter399);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TNormalSelectNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TNormalSelectNodeTupleScheme getScheme() {
      return new TNormalSelectNodeTupleScheme();
    }
  }

  private static class TNormalSelectNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TNormalSelectNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TNormalSelectNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCse_slot_ids()) {
        optionals.set(0);
      }
      if (struct.isSetCse_exprs()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCse_slot_ids()) {
        {
          oprot.writeI32(struct.cse_slot_ids.size());
          for (int _iter400 : struct.cse_slot_ids)
          {
            oprot.writeI32(_iter400);
          }
        }
      }
      if (struct.isSetCse_exprs()) {
        {
          oprot.writeI32(struct.cse_exprs.size());
          for (java.nio.ByteBuffer _iter401 : struct.cse_exprs)
          {
            oprot.writeBinary(_iter401);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TNormalSelectNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list402 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.cse_slot_ids = new java.util.ArrayList<java.lang.Integer>(_list402.size);
          int _elem403;
          for (int _i404 = 0; _i404 < _list402.size; ++_i404)
          {
            _elem403 = iprot.readI32();
            struct.cse_slot_ids.add(_elem403);
          }
        }
        struct.setCse_slot_idsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list405 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.cse_exprs = new java.util.ArrayList<java.nio.ByteBuffer>(_list405.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem406;
          for (int _i407 = 0; _i407 < _list405.size; ++_i407)
          {
            _elem406 = iprot.readBinary();
            struct.cse_exprs.add(_elem406);
          }
        }
        struct.setCse_exprsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

