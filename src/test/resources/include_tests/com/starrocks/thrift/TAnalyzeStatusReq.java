/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TAnalyzeStatusReq implements org.apache.thrift.TBase<TAnalyzeStatusReq, TAnalyzeStatusReq._Fields>, java.io.Serializable, Cloneable, Comparable<TAnalyzeStatusReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAnalyzeStatusReq");

  private static final org.apache.thrift.protocol.TField AUTH_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("auth_info", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_CATALOG_FIELD_DESC = new org.apache.thrift.protocol.TField("table_catalog", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("table_database", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("table_name", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAnalyzeStatusReqStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAnalyzeStatusReqTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TAuthInfo auth_info; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_catalog; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_database; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String table_name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AUTH_INFO((short)1, "auth_info"),
    TABLE_CATALOG((short)2, "table_catalog"),
    TABLE_DATABASE((short)3, "table_database"),
    TABLE_NAME((short)4, "table_name");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AUTH_INFO
          return AUTH_INFO;
        case 2: // TABLE_CATALOG
          return TABLE_CATALOG;
        case 3: // TABLE_DATABASE
          return TABLE_DATABASE;
        case 4: // TABLE_NAME
          return TABLE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.AUTH_INFO,_Fields.TABLE_CATALOG,_Fields.TABLE_DATABASE,_Fields.TABLE_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUTH_INFO, new org.apache.thrift.meta_data.FieldMetaData("auth_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAuthInfo.class)));
    tmpMap.put(_Fields.TABLE_CATALOG, new org.apache.thrift.meta_data.FieldMetaData("table_catalog", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_DATABASE, new org.apache.thrift.meta_data.FieldMetaData("table_database", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("table_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAnalyzeStatusReq.class, metaDataMap);
  }

  public TAnalyzeStatusReq() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAnalyzeStatusReq(TAnalyzeStatusReq other) {
    if (other.isSetAuth_info()) {
      this.auth_info = new TAuthInfo(other.auth_info);
    }
    if (other.isSetTable_catalog()) {
      this.table_catalog = other.table_catalog;
    }
    if (other.isSetTable_database()) {
      this.table_database = other.table_database;
    }
    if (other.isSetTable_name()) {
      this.table_name = other.table_name;
    }
  }

  @Override
  public TAnalyzeStatusReq deepCopy() {
    return new TAnalyzeStatusReq(this);
  }

  @Override
  public void clear() {
    this.auth_info = null;
    this.table_catalog = null;
    this.table_database = null;
    this.table_name = null;
  }

  @org.apache.thrift.annotation.Nullable
  public TAuthInfo getAuth_info() {
    return this.auth_info;
  }

  public TAnalyzeStatusReq setAuth_info(@org.apache.thrift.annotation.Nullable TAuthInfo auth_info) {
    this.auth_info = auth_info;
    return this;
  }

  public void unsetAuth_info() {
    this.auth_info = null;
  }

  /** Returns true if field auth_info is set (has been assigned a value) and false otherwise */
  public boolean isSetAuth_info() {
    return this.auth_info != null;
  }

  public void setAuth_infoIsSet(boolean value) {
    if (!value) {
      this.auth_info = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_catalog() {
    return this.table_catalog;
  }

  public TAnalyzeStatusReq setTable_catalog(@org.apache.thrift.annotation.Nullable java.lang.String table_catalog) {
    this.table_catalog = table_catalog;
    return this;
  }

  public void unsetTable_catalog() {
    this.table_catalog = null;
  }

  /** Returns true if field table_catalog is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_catalog() {
    return this.table_catalog != null;
  }

  public void setTable_catalogIsSet(boolean value) {
    if (!value) {
      this.table_catalog = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_database() {
    return this.table_database;
  }

  public TAnalyzeStatusReq setTable_database(@org.apache.thrift.annotation.Nullable java.lang.String table_database) {
    this.table_database = table_database;
    return this;
  }

  public void unsetTable_database() {
    this.table_database = null;
  }

  /** Returns true if field table_database is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_database() {
    return this.table_database != null;
  }

  public void setTable_databaseIsSet(boolean value) {
    if (!value) {
      this.table_database = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_name() {
    return this.table_name;
  }

  public TAnalyzeStatusReq setTable_name(@org.apache.thrift.annotation.Nullable java.lang.String table_name) {
    this.table_name = table_name;
    return this;
  }

  public void unsetTable_name() {
    this.table_name = null;
  }

  /** Returns true if field table_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_name() {
    return this.table_name != null;
  }

  public void setTable_nameIsSet(boolean value) {
    if (!value) {
      this.table_name = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case AUTH_INFO:
      if (value == null) {
        unsetAuth_info();
      } else {
        setAuth_info((TAuthInfo)value);
      }
      break;

    case TABLE_CATALOG:
      if (value == null) {
        unsetTable_catalog();
      } else {
        setTable_catalog((java.lang.String)value);
      }
      break;

    case TABLE_DATABASE:
      if (value == null) {
        unsetTable_database();
      } else {
        setTable_database((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTable_name();
      } else {
        setTable_name((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case AUTH_INFO:
      return getAuth_info();

    case TABLE_CATALOG:
      return getTable_catalog();

    case TABLE_DATABASE:
      return getTable_database();

    case TABLE_NAME:
      return getTable_name();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case AUTH_INFO:
      return isSetAuth_info();
    case TABLE_CATALOG:
      return isSetTable_catalog();
    case TABLE_DATABASE:
      return isSetTable_database();
    case TABLE_NAME:
      return isSetTable_name();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAnalyzeStatusReq)
      return this.equals((TAnalyzeStatusReq)that);
    return false;
  }

  public boolean equals(TAnalyzeStatusReq that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_auth_info = true && this.isSetAuth_info();
    boolean that_present_auth_info = true && that.isSetAuth_info();
    if (this_present_auth_info || that_present_auth_info) {
      if (!(this_present_auth_info && that_present_auth_info))
        return false;
      if (!this.auth_info.equals(that.auth_info))
        return false;
    }

    boolean this_present_table_catalog = true && this.isSetTable_catalog();
    boolean that_present_table_catalog = true && that.isSetTable_catalog();
    if (this_present_table_catalog || that_present_table_catalog) {
      if (!(this_present_table_catalog && that_present_table_catalog))
        return false;
      if (!this.table_catalog.equals(that.table_catalog))
        return false;
    }

    boolean this_present_table_database = true && this.isSetTable_database();
    boolean that_present_table_database = true && that.isSetTable_database();
    if (this_present_table_database || that_present_table_database) {
      if (!(this_present_table_database && that_present_table_database))
        return false;
      if (!this.table_database.equals(that.table_database))
        return false;
    }

    boolean this_present_table_name = true && this.isSetTable_name();
    boolean that_present_table_name = true && that.isSetTable_name();
    if (this_present_table_name || that_present_table_name) {
      if (!(this_present_table_name && that_present_table_name))
        return false;
      if (!this.table_name.equals(that.table_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAuth_info()) ? 131071 : 524287);
    if (isSetAuth_info())
      hashCode = hashCode * 8191 + auth_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_catalog()) ? 131071 : 524287);
    if (isSetTable_catalog())
      hashCode = hashCode * 8191 + table_catalog.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_database()) ? 131071 : 524287);
    if (isSetTable_database())
      hashCode = hashCode * 8191 + table_database.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_name()) ? 131071 : 524287);
    if (isSetTable_name())
      hashCode = hashCode * 8191 + table_name.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TAnalyzeStatusReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetAuth_info(), other.isSetAuth_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuth_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth_info, other.auth_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_catalog(), other.isSetTable_catalog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_catalog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_catalog, other.table_catalog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_database(), other.isSetTable_database());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_database()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_database, other.table_database);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTable_name(), other.isSetTable_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_name, other.table_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAnalyzeStatusReq(");
    boolean first = true;

    if (isSetAuth_info()) {
      sb.append("auth_info:");
      if (this.auth_info == null) {
        sb.append("null");
      } else {
        sb.append(this.auth_info);
      }
      first = false;
    }
    if (isSetTable_catalog()) {
      if (!first) sb.append(", ");
      sb.append("table_catalog:");
      if (this.table_catalog == null) {
        sb.append("null");
      } else {
        sb.append(this.table_catalog);
      }
      first = false;
    }
    if (isSetTable_database()) {
      if (!first) sb.append(", ");
      sb.append("table_database:");
      if (this.table_database == null) {
        sb.append("null");
      } else {
        sb.append(this.table_database);
      }
      first = false;
    }
    if (isSetTable_name()) {
      if (!first) sb.append(", ");
      sb.append("table_name:");
      if (this.table_name == null) {
        sb.append("null");
      } else {
        sb.append(this.table_name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (auth_info != null) {
      auth_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAnalyzeStatusReqStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAnalyzeStatusReqStandardScheme getScheme() {
      return new TAnalyzeStatusReqStandardScheme();
    }
  }

  private static class TAnalyzeStatusReqStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAnalyzeStatusReq> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TAnalyzeStatusReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AUTH_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.auth_info = new TAuthInfo();
              struct.auth_info.read(iprot);
              struct.setAuth_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_CATALOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_catalog = iprot.readString();
              struct.setTable_catalogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE_DATABASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_database = iprot.readString();
              struct.setTable_databaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_name = iprot.readString();
              struct.setTable_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TAnalyzeStatusReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.auth_info != null) {
        if (struct.isSetAuth_info()) {
          oprot.writeFieldBegin(AUTH_INFO_FIELD_DESC);
          struct.auth_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_catalog != null) {
        if (struct.isSetTable_catalog()) {
          oprot.writeFieldBegin(TABLE_CATALOG_FIELD_DESC);
          oprot.writeString(struct.table_catalog);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_database != null) {
        if (struct.isSetTable_database()) {
          oprot.writeFieldBegin(TABLE_DATABASE_FIELD_DESC);
          oprot.writeString(struct.table_database);
          oprot.writeFieldEnd();
        }
      }
      if (struct.table_name != null) {
        if (struct.isSetTable_name()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.table_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAnalyzeStatusReqTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAnalyzeStatusReqTupleScheme getScheme() {
      return new TAnalyzeStatusReqTupleScheme();
    }
  }

  private static class TAnalyzeStatusReqTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAnalyzeStatusReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAnalyzeStatusReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAuth_info()) {
        optionals.set(0);
      }
      if (struct.isSetTable_catalog()) {
        optionals.set(1);
      }
      if (struct.isSetTable_database()) {
        optionals.set(2);
      }
      if (struct.isSetTable_name()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAuth_info()) {
        struct.auth_info.write(oprot);
      }
      if (struct.isSetTable_catalog()) {
        oprot.writeString(struct.table_catalog);
      }
      if (struct.isSetTable_database()) {
        oprot.writeString(struct.table_database);
      }
      if (struct.isSetTable_name()) {
        oprot.writeString(struct.table_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAnalyzeStatusReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.auth_info = new TAuthInfo();
        struct.auth_info.read(iprot);
        struct.setAuth_infoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.table_catalog = iprot.readString();
        struct.setTable_catalogIsSet(true);
      }
      if (incoming.get(2)) {
        struct.table_database = iprot.readString();
        struct.setTable_databaseIsSet(true);
      }
      if (incoming.get(3)) {
        struct.table_name = iprot.readString();
        struct.setTable_nameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

