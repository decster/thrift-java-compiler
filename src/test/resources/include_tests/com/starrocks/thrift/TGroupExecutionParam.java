/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TGroupExecutionParam implements org.apache.thrift.TBase<TGroupExecutionParam, TGroupExecutionParam._Fields>, java.io.Serializable, Cloneable, Comparable<TGroupExecutionParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGroupExecutionParam");

  private static final org.apache.thrift.protocol.TField ENABLE_GROUP_EXECUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_group_execution", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField EXEC_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("exec_groups", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TGroupExecutionParamStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TGroupExecutionParamTupleSchemeFactory();

  public boolean enable_group_execution; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TExecGroup> exec_groups; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENABLE_GROUP_EXECUTION((short)1, "enable_group_execution"),
    EXEC_GROUPS((short)2, "exec_groups");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENABLE_GROUP_EXECUTION
          return ENABLE_GROUP_EXECUTION;
        case 2: // EXEC_GROUPS
          return EXEC_GROUPS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENABLE_GROUP_EXECUTION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ENABLE_GROUP_EXECUTION,_Fields.EXEC_GROUPS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENABLE_GROUP_EXECUTION, new org.apache.thrift.meta_data.FieldMetaData("enable_group_execution", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXEC_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("exec_groups", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExecGroup.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGroupExecutionParam.class, metaDataMap);
  }

  public TGroupExecutionParam() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGroupExecutionParam(TGroupExecutionParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.enable_group_execution = other.enable_group_execution;
    if (other.isSetExec_groups()) {
      java.util.List<TExecGroup> __this__exec_groups = new java.util.ArrayList<TExecGroup>(other.exec_groups.size());
      for (TExecGroup other_element : other.exec_groups) {
        __this__exec_groups.add(new TExecGroup(other_element));
      }
      this.exec_groups = __this__exec_groups;
    }
  }

  @Override
  public TGroupExecutionParam deepCopy() {
    return new TGroupExecutionParam(this);
  }

  @Override
  public void clear() {
    setEnable_group_executionIsSet(false);
    this.enable_group_execution = false;
    this.exec_groups = null;
  }

  public boolean isEnable_group_execution() {
    return this.enable_group_execution;
  }

  public TGroupExecutionParam setEnable_group_execution(boolean enable_group_execution) {
    this.enable_group_execution = enable_group_execution;
    setEnable_group_executionIsSet(true);
    return this;
  }

  public void unsetEnable_group_execution() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_GROUP_EXECUTION_ISSET_ID);
  }

  /** Returns true if field enable_group_execution is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_group_execution() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_GROUP_EXECUTION_ISSET_ID);
  }

  public void setEnable_group_executionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_GROUP_EXECUTION_ISSET_ID, value);
  }

  public int getExec_groupsSize() {
    return (this.exec_groups == null) ? 0 : this.exec_groups.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TExecGroup> getExec_groupsIterator() {
    return (this.exec_groups == null) ? null : this.exec_groups.iterator();
  }

  public void addToExec_groups(TExecGroup elem) {
    if (this.exec_groups == null) {
      this.exec_groups = new java.util.ArrayList<TExecGroup>();
    }
    this.exec_groups.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TExecGroup> getExec_groups() {
    return this.exec_groups;
  }

  public TGroupExecutionParam setExec_groups(@org.apache.thrift.annotation.Nullable java.util.List<TExecGroup> exec_groups) {
    this.exec_groups = exec_groups;
    return this;
  }

  public void unsetExec_groups() {
    this.exec_groups = null;
  }

  /** Returns true if field exec_groups is set (has been assigned a value) and false otherwise */
  public boolean isSetExec_groups() {
    return this.exec_groups != null;
  }

  public void setExec_groupsIsSet(boolean value) {
    if (!value) {
      this.exec_groups = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ENABLE_GROUP_EXECUTION:
      if (value == null) {
        unsetEnable_group_execution();
      } else {
        setEnable_group_execution((java.lang.Boolean)value);
      }
      break;

    case EXEC_GROUPS:
      if (value == null) {
        unsetExec_groups();
      } else {
        setExec_groups((java.util.List<TExecGroup>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ENABLE_GROUP_EXECUTION:
      return isEnable_group_execution();

    case EXEC_GROUPS:
      return getExec_groups();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ENABLE_GROUP_EXECUTION:
      return isSetEnable_group_execution();
    case EXEC_GROUPS:
      return isSetExec_groups();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TGroupExecutionParam)
      return this.equals((TGroupExecutionParam)that);
    return false;
  }

  public boolean equals(TGroupExecutionParam that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_enable_group_execution = true && this.isSetEnable_group_execution();
    boolean that_present_enable_group_execution = true && that.isSetEnable_group_execution();
    if (this_present_enable_group_execution || that_present_enable_group_execution) {
      if (!(this_present_enable_group_execution && that_present_enable_group_execution))
        return false;
      if (this.enable_group_execution != that.enable_group_execution)
        return false;
    }

    boolean this_present_exec_groups = true && this.isSetExec_groups();
    boolean that_present_exec_groups = true && that.isSetExec_groups();
    if (this_present_exec_groups || that_present_exec_groups) {
      if (!(this_present_exec_groups && that_present_exec_groups))
        return false;
      if (!this.exec_groups.equals(that.exec_groups))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEnable_group_execution()) ? 131071 : 524287);
    if (isSetEnable_group_execution())
      hashCode = hashCode * 8191 + ((enable_group_execution) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetExec_groups()) ? 131071 : 524287);
    if (isSetExec_groups())
      hashCode = hashCode * 8191 + exec_groups.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TGroupExecutionParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetEnable_group_execution(), other.isSetEnable_group_execution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_group_execution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_group_execution, other.enable_group_execution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExec_groups(), other.isSetExec_groups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExec_groups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exec_groups, other.exec_groups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TGroupExecutionParam(");
    boolean first = true;

    if (isSetEnable_group_execution()) {
      sb.append("enable_group_execution:");
      sb.append(this.enable_group_execution);
      first = false;
    }
    if (isSetExec_groups()) {
      if (!first) sb.append(", ");
      sb.append("exec_groups:");
      if (this.exec_groups == null) {
        sb.append("null");
      } else {
        sb.append(this.exec_groups);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGroupExecutionParamStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGroupExecutionParamStandardScheme getScheme() {
      return new TGroupExecutionParamStandardScheme();
    }
  }

  private static class TGroupExecutionParamStandardScheme extends org.apache.thrift.scheme.StandardScheme<TGroupExecutionParam> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TGroupExecutionParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENABLE_GROUP_EXECUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_group_execution = iprot.readBool();
              struct.setEnable_group_executionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXEC_GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.exec_groups = new java.util.ArrayList<TExecGroup>(_list36.size);
                @org.apache.thrift.annotation.Nullable TExecGroup _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = new TExecGroup();
                  _elem37.read(iprot);
                  struct.exec_groups.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setExec_groupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TGroupExecutionParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetEnable_group_execution()) {
        oprot.writeFieldBegin(ENABLE_GROUP_EXECUTION_FIELD_DESC);
        oprot.writeBool(struct.enable_group_execution);
        oprot.writeFieldEnd();
      }
      if (struct.exec_groups != null) {
        if (struct.isSetExec_groups()) {
          oprot.writeFieldBegin(EXEC_GROUPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.exec_groups.size()));
            for (TExecGroup _iter39 : struct.exec_groups)
            {
              _iter39.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGroupExecutionParamTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGroupExecutionParamTupleScheme getScheme() {
      return new TGroupExecutionParamTupleScheme();
    }
  }

  private static class TGroupExecutionParamTupleScheme extends org.apache.thrift.scheme.TupleScheme<TGroupExecutionParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGroupExecutionParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEnable_group_execution()) {
        optionals.set(0);
      }
      if (struct.isSetExec_groups()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetEnable_group_execution()) {
        oprot.writeBool(struct.enable_group_execution);
      }
      if (struct.isSetExec_groups()) {
        {
          oprot.writeI32(struct.exec_groups.size());
          for (TExecGroup _iter40 : struct.exec_groups)
          {
            _iter40.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGroupExecutionParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.enable_group_execution = iprot.readBool();
        struct.setEnable_group_executionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list41 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.exec_groups = new java.util.ArrayList<TExecGroup>(_list41.size);
          @org.apache.thrift.annotation.Nullable TExecGroup _elem42;
          for (int _i43 = 0; _i43 < _list41.size; ++_i43)
          {
            _elem42 = new TExecGroup();
            _elem42.read(iprot);
            struct.exec_groups.add(_elem42);
          }
        }
        struct.setExec_groupsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

