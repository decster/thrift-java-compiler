/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TSpillOptions implements org.apache.thrift.TBase<TSpillOptions, TSpillOptions._Fields>, java.io.Serializable, Cloneable, Comparable<TSpillOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSpillOptions");

  private static final org.apache.thrift.protocol.TField SPILL_MEM_TABLE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_mem_table_size", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SPILL_MEM_TABLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_mem_table_num", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SPILL_MEM_LIMIT_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_mem_limit_threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField SPILL_OPERATOR_MIN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_operator_min_bytes", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SPILL_OPERATOR_MAX_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_operator_max_bytes", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SPILL_ENCODE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_encode_level", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SPILL_REVOCABLE_MAX_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_revocable_max_bytes", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SPILL_ENABLE_DIRECT_IO_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_enable_direct_io", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField SPILL_ENABLE_COMPACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_enable_compaction", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField SPILL_RAND_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_rand_ratio", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField SPILL_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_mode", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField SPILLABLE_OPERATOR_MASK_FIELD_DESC = new org.apache.thrift.protocol.TField("spillable_operator_mask", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField ENABLE_AGG_SPILL_PREAGGREGATION_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_agg_spill_preaggregation", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField ENABLE_SPILL_TO_REMOTE_STORAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_spill_to_remote_storage", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField SPILL_TO_REMOTE_STORAGE_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_to_remote_storage_options", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField ENABLE_SPILL_BUFFER_READ_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_spill_buffer_read", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("max_spill_read_buffer_bytes_per_driver", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("spill_hash_join_probe_op_max_bytes", org.apache.thrift.protocol.TType.I64, (short)25);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSpillOptionsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSpillOptionsTupleSchemeFactory();

  public int spill_mem_table_size; // optional
  public int spill_mem_table_num; // optional
  public double spill_mem_limit_threshold; // optional
  public long spill_operator_min_bytes; // optional
  public long spill_operator_max_bytes; // optional
  public int spill_encode_level; // optional
  public long spill_revocable_max_bytes; // optional
  public boolean spill_enable_direct_io; // optional
  public boolean spill_enable_compaction; // optional
  public double spill_rand_ratio; // optional
  /**
   * 
   * @see TSpillMode
   */
  public @org.apache.thrift.annotation.Nullable TSpillMode spill_mode; // optional
  public long spillable_operator_mask; // optional
  public boolean enable_agg_spill_preaggregation; // optional
  public boolean enable_spill_to_remote_storage; // optional
  public @org.apache.thrift.annotation.Nullable TSpillToRemoteStorageOptions spill_to_remote_storage_options; // optional
  public boolean enable_spill_buffer_read; // optional
  public long max_spill_read_buffer_bytes_per_driver; // optional
  public long spill_hash_join_probe_op_max_bytes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPILL_MEM_TABLE_SIZE((short)1, "spill_mem_table_size"),
    SPILL_MEM_TABLE_NUM((short)2, "spill_mem_table_num"),
    SPILL_MEM_LIMIT_THRESHOLD((short)3, "spill_mem_limit_threshold"),
    SPILL_OPERATOR_MIN_BYTES((short)4, "spill_operator_min_bytes"),
    SPILL_OPERATOR_MAX_BYTES((short)5, "spill_operator_max_bytes"),
    SPILL_ENCODE_LEVEL((short)6, "spill_encode_level"),
    SPILL_REVOCABLE_MAX_BYTES((short)7, "spill_revocable_max_bytes"),
    SPILL_ENABLE_DIRECT_IO((short)8, "spill_enable_direct_io"),
    SPILL_ENABLE_COMPACTION((short)9, "spill_enable_compaction"),
    SPILL_RAND_RATIO((short)10, "spill_rand_ratio"),
    /**
     * 
     * @see TSpillMode
     */
    SPILL_MODE((short)11, "spill_mode"),
    SPILLABLE_OPERATOR_MASK((short)12, "spillable_operator_mask"),
    ENABLE_AGG_SPILL_PREAGGREGATION((short)13, "enable_agg_spill_preaggregation"),
    ENABLE_SPILL_TO_REMOTE_STORAGE((short)21, "enable_spill_to_remote_storage"),
    SPILL_TO_REMOTE_STORAGE_OPTIONS((short)22, "spill_to_remote_storage_options"),
    ENABLE_SPILL_BUFFER_READ((short)23, "enable_spill_buffer_read"),
    MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER((short)24, "max_spill_read_buffer_bytes_per_driver"),
    SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES((short)25, "spill_hash_join_probe_op_max_bytes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPILL_MEM_TABLE_SIZE
          return SPILL_MEM_TABLE_SIZE;
        case 2: // SPILL_MEM_TABLE_NUM
          return SPILL_MEM_TABLE_NUM;
        case 3: // SPILL_MEM_LIMIT_THRESHOLD
          return SPILL_MEM_LIMIT_THRESHOLD;
        case 4: // SPILL_OPERATOR_MIN_BYTES
          return SPILL_OPERATOR_MIN_BYTES;
        case 5: // SPILL_OPERATOR_MAX_BYTES
          return SPILL_OPERATOR_MAX_BYTES;
        case 6: // SPILL_ENCODE_LEVEL
          return SPILL_ENCODE_LEVEL;
        case 7: // SPILL_REVOCABLE_MAX_BYTES
          return SPILL_REVOCABLE_MAX_BYTES;
        case 8: // SPILL_ENABLE_DIRECT_IO
          return SPILL_ENABLE_DIRECT_IO;
        case 9: // SPILL_ENABLE_COMPACTION
          return SPILL_ENABLE_COMPACTION;
        case 10: // SPILL_RAND_RATIO
          return SPILL_RAND_RATIO;
        case 11: // SPILL_MODE
          return SPILL_MODE;
        case 12: // SPILLABLE_OPERATOR_MASK
          return SPILLABLE_OPERATOR_MASK;
        case 13: // ENABLE_AGG_SPILL_PREAGGREGATION
          return ENABLE_AGG_SPILL_PREAGGREGATION;
        case 21: // ENABLE_SPILL_TO_REMOTE_STORAGE
          return ENABLE_SPILL_TO_REMOTE_STORAGE;
        case 22: // SPILL_TO_REMOTE_STORAGE_OPTIONS
          return SPILL_TO_REMOTE_STORAGE_OPTIONS;
        case 23: // ENABLE_SPILL_BUFFER_READ
          return ENABLE_SPILL_BUFFER_READ;
        case 24: // MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER
          return MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER;
        case 25: // SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES
          return SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SPILL_MEM_TABLE_SIZE_ISSET_ID = 0;
  private static final int __SPILL_MEM_TABLE_NUM_ISSET_ID = 1;
  private static final int __SPILL_MEM_LIMIT_THRESHOLD_ISSET_ID = 2;
  private static final int __SPILL_OPERATOR_MIN_BYTES_ISSET_ID = 3;
  private static final int __SPILL_OPERATOR_MAX_BYTES_ISSET_ID = 4;
  private static final int __SPILL_ENCODE_LEVEL_ISSET_ID = 5;
  private static final int __SPILL_REVOCABLE_MAX_BYTES_ISSET_ID = 6;
  private static final int __SPILL_ENABLE_DIRECT_IO_ISSET_ID = 7;
  private static final int __SPILL_ENABLE_COMPACTION_ISSET_ID = 8;
  private static final int __SPILL_RAND_RATIO_ISSET_ID = 9;
  private static final int __SPILLABLE_OPERATOR_MASK_ISSET_ID = 10;
  private static final int __ENABLE_AGG_SPILL_PREAGGREGATION_ISSET_ID = 11;
  private static final int __ENABLE_SPILL_TO_REMOTE_STORAGE_ISSET_ID = 12;
  private static final int __ENABLE_SPILL_BUFFER_READ_ISSET_ID = 13;
  private static final int __MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER_ISSET_ID = 14;
  private static final int __SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SPILL_MEM_TABLE_SIZE,_Fields.SPILL_MEM_TABLE_NUM,_Fields.SPILL_MEM_LIMIT_THRESHOLD,_Fields.SPILL_OPERATOR_MIN_BYTES,_Fields.SPILL_OPERATOR_MAX_BYTES,_Fields.SPILL_ENCODE_LEVEL,_Fields.SPILL_REVOCABLE_MAX_BYTES,_Fields.SPILL_ENABLE_DIRECT_IO,_Fields.SPILL_ENABLE_COMPACTION,_Fields.SPILL_RAND_RATIO,_Fields.SPILL_MODE,_Fields.SPILLABLE_OPERATOR_MASK,_Fields.ENABLE_AGG_SPILL_PREAGGREGATION,_Fields.ENABLE_SPILL_TO_REMOTE_STORAGE,_Fields.SPILL_TO_REMOTE_STORAGE_OPTIONS,_Fields.ENABLE_SPILL_BUFFER_READ,_Fields.MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER,_Fields.SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPILL_MEM_TABLE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("spill_mem_table_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPILL_MEM_TABLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("spill_mem_table_num", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPILL_MEM_LIMIT_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("spill_mem_limit_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPILL_OPERATOR_MIN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("spill_operator_min_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPILL_OPERATOR_MAX_BYTES, new org.apache.thrift.meta_data.FieldMetaData("spill_operator_max_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPILL_ENCODE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("spill_encode_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPILL_REVOCABLE_MAX_BYTES, new org.apache.thrift.meta_data.FieldMetaData("spill_revocable_max_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPILL_ENABLE_DIRECT_IO, new org.apache.thrift.meta_data.FieldMetaData("spill_enable_direct_io", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SPILL_ENABLE_COMPACTION, new org.apache.thrift.meta_data.FieldMetaData("spill_enable_compaction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SPILL_RAND_RATIO, new org.apache.thrift.meta_data.FieldMetaData("spill_rand_ratio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SPILL_MODE, new org.apache.thrift.meta_data.FieldMetaData("spill_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TSpillMode.class)));
    tmpMap.put(_Fields.SPILLABLE_OPERATOR_MASK, new org.apache.thrift.meta_data.FieldMetaData("spillable_operator_mask", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ENABLE_AGG_SPILL_PREAGGREGATION, new org.apache.thrift.meta_data.FieldMetaData("enable_agg_spill_preaggregation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENABLE_SPILL_TO_REMOTE_STORAGE, new org.apache.thrift.meta_data.FieldMetaData("enable_spill_to_remote_storage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SPILL_TO_REMOTE_STORAGE_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("spill_to_remote_storage_options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSpillToRemoteStorageOptions.class)));
    tmpMap.put(_Fields.ENABLE_SPILL_BUFFER_READ, new org.apache.thrift.meta_data.FieldMetaData("enable_spill_buffer_read", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER, new org.apache.thrift.meta_data.FieldMetaData("max_spill_read_buffer_bytes_per_driver", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES, new org.apache.thrift.meta_data.FieldMetaData("spill_hash_join_probe_op_max_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSpillOptions.class, metaDataMap);
  }

  public TSpillOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSpillOptions(TSpillOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.spill_mem_table_size = other.spill_mem_table_size;
    this.spill_mem_table_num = other.spill_mem_table_num;
    this.spill_mem_limit_threshold = other.spill_mem_limit_threshold;
    this.spill_operator_min_bytes = other.spill_operator_min_bytes;
    this.spill_operator_max_bytes = other.spill_operator_max_bytes;
    this.spill_encode_level = other.spill_encode_level;
    this.spill_revocable_max_bytes = other.spill_revocable_max_bytes;
    this.spill_enable_direct_io = other.spill_enable_direct_io;
    this.spill_enable_compaction = other.spill_enable_compaction;
    this.spill_rand_ratio = other.spill_rand_ratio;
    if (other.isSetSpill_mode()) {
      this.spill_mode = other.spill_mode;
    }
    this.spillable_operator_mask = other.spillable_operator_mask;
    this.enable_agg_spill_preaggregation = other.enable_agg_spill_preaggregation;
    this.enable_spill_to_remote_storage = other.enable_spill_to_remote_storage;
    if (other.isSetSpill_to_remote_storage_options()) {
      this.spill_to_remote_storage_options = new TSpillToRemoteStorageOptions(other.spill_to_remote_storage_options);
    }
    this.enable_spill_buffer_read = other.enable_spill_buffer_read;
    this.max_spill_read_buffer_bytes_per_driver = other.max_spill_read_buffer_bytes_per_driver;
    this.spill_hash_join_probe_op_max_bytes = other.spill_hash_join_probe_op_max_bytes;
  }

  @Override
  public TSpillOptions deepCopy() {
    return new TSpillOptions(this);
  }

  @Override
  public void clear() {
    setSpill_mem_table_sizeIsSet(false);
    this.spill_mem_table_size = 0;
    setSpill_mem_table_numIsSet(false);
    this.spill_mem_table_num = 0;
    setSpill_mem_limit_thresholdIsSet(false);
    this.spill_mem_limit_threshold = 0.0;
    setSpill_operator_min_bytesIsSet(false);
    this.spill_operator_min_bytes = 0;
    setSpill_operator_max_bytesIsSet(false);
    this.spill_operator_max_bytes = 0;
    setSpill_encode_levelIsSet(false);
    this.spill_encode_level = 0;
    setSpill_revocable_max_bytesIsSet(false);
    this.spill_revocable_max_bytes = 0;
    setSpill_enable_direct_ioIsSet(false);
    this.spill_enable_direct_io = false;
    setSpill_enable_compactionIsSet(false);
    this.spill_enable_compaction = false;
    setSpill_rand_ratioIsSet(false);
    this.spill_rand_ratio = 0.0;
    this.spill_mode = null;
    setSpillable_operator_maskIsSet(false);
    this.spillable_operator_mask = 0;
    setEnable_agg_spill_preaggregationIsSet(false);
    this.enable_agg_spill_preaggregation = false;
    setEnable_spill_to_remote_storageIsSet(false);
    this.enable_spill_to_remote_storage = false;
    this.spill_to_remote_storage_options = null;
    setEnable_spill_buffer_readIsSet(false);
    this.enable_spill_buffer_read = false;
    setMax_spill_read_buffer_bytes_per_driverIsSet(false);
    this.max_spill_read_buffer_bytes_per_driver = 0;
    setSpill_hash_join_probe_op_max_bytesIsSet(false);
    this.spill_hash_join_probe_op_max_bytes = 0;
  }

  public int getSpill_mem_table_size() {
    return this.spill_mem_table_size;
  }

  public TSpillOptions setSpill_mem_table_size(int spill_mem_table_size) {
    this.spill_mem_table_size = spill_mem_table_size;
    setSpill_mem_table_sizeIsSet(true);
    return this;
  }

  public void unsetSpill_mem_table_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_MEM_TABLE_SIZE_ISSET_ID);
  }

  /** Returns true if field spill_mem_table_size is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_mem_table_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_MEM_TABLE_SIZE_ISSET_ID);
  }

  public void setSpill_mem_table_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_MEM_TABLE_SIZE_ISSET_ID, value);
  }

  public int getSpill_mem_table_num() {
    return this.spill_mem_table_num;
  }

  public TSpillOptions setSpill_mem_table_num(int spill_mem_table_num) {
    this.spill_mem_table_num = spill_mem_table_num;
    setSpill_mem_table_numIsSet(true);
    return this;
  }

  public void unsetSpill_mem_table_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_MEM_TABLE_NUM_ISSET_ID);
  }

  /** Returns true if field spill_mem_table_num is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_mem_table_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_MEM_TABLE_NUM_ISSET_ID);
  }

  public void setSpill_mem_table_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_MEM_TABLE_NUM_ISSET_ID, value);
  }

  public double getSpill_mem_limit_threshold() {
    return this.spill_mem_limit_threshold;
  }

  public TSpillOptions setSpill_mem_limit_threshold(double spill_mem_limit_threshold) {
    this.spill_mem_limit_threshold = spill_mem_limit_threshold;
    setSpill_mem_limit_thresholdIsSet(true);
    return this;
  }

  public void unsetSpill_mem_limit_threshold() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_MEM_LIMIT_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field spill_mem_limit_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_mem_limit_threshold() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_MEM_LIMIT_THRESHOLD_ISSET_ID);
  }

  public void setSpill_mem_limit_thresholdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_MEM_LIMIT_THRESHOLD_ISSET_ID, value);
  }

  public long getSpill_operator_min_bytes() {
    return this.spill_operator_min_bytes;
  }

  public TSpillOptions setSpill_operator_min_bytes(long spill_operator_min_bytes) {
    this.spill_operator_min_bytes = spill_operator_min_bytes;
    setSpill_operator_min_bytesIsSet(true);
    return this;
  }

  public void unsetSpill_operator_min_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_OPERATOR_MIN_BYTES_ISSET_ID);
  }

  /** Returns true if field spill_operator_min_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_operator_min_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_OPERATOR_MIN_BYTES_ISSET_ID);
  }

  public void setSpill_operator_min_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_OPERATOR_MIN_BYTES_ISSET_ID, value);
  }

  public long getSpill_operator_max_bytes() {
    return this.spill_operator_max_bytes;
  }

  public TSpillOptions setSpill_operator_max_bytes(long spill_operator_max_bytes) {
    this.spill_operator_max_bytes = spill_operator_max_bytes;
    setSpill_operator_max_bytesIsSet(true);
    return this;
  }

  public void unsetSpill_operator_max_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_OPERATOR_MAX_BYTES_ISSET_ID);
  }

  /** Returns true if field spill_operator_max_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_operator_max_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_OPERATOR_MAX_BYTES_ISSET_ID);
  }

  public void setSpill_operator_max_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_OPERATOR_MAX_BYTES_ISSET_ID, value);
  }

  public int getSpill_encode_level() {
    return this.spill_encode_level;
  }

  public TSpillOptions setSpill_encode_level(int spill_encode_level) {
    this.spill_encode_level = spill_encode_level;
    setSpill_encode_levelIsSet(true);
    return this;
  }

  public void unsetSpill_encode_level() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_ENCODE_LEVEL_ISSET_ID);
  }

  /** Returns true if field spill_encode_level is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_encode_level() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_ENCODE_LEVEL_ISSET_ID);
  }

  public void setSpill_encode_levelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_ENCODE_LEVEL_ISSET_ID, value);
  }

  public long getSpill_revocable_max_bytes() {
    return this.spill_revocable_max_bytes;
  }

  public TSpillOptions setSpill_revocable_max_bytes(long spill_revocable_max_bytes) {
    this.spill_revocable_max_bytes = spill_revocable_max_bytes;
    setSpill_revocable_max_bytesIsSet(true);
    return this;
  }

  public void unsetSpill_revocable_max_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_REVOCABLE_MAX_BYTES_ISSET_ID);
  }

  /** Returns true if field spill_revocable_max_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_revocable_max_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_REVOCABLE_MAX_BYTES_ISSET_ID);
  }

  public void setSpill_revocable_max_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_REVOCABLE_MAX_BYTES_ISSET_ID, value);
  }

  public boolean isSpill_enable_direct_io() {
    return this.spill_enable_direct_io;
  }

  public TSpillOptions setSpill_enable_direct_io(boolean spill_enable_direct_io) {
    this.spill_enable_direct_io = spill_enable_direct_io;
    setSpill_enable_direct_ioIsSet(true);
    return this;
  }

  public void unsetSpill_enable_direct_io() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_ENABLE_DIRECT_IO_ISSET_ID);
  }

  /** Returns true if field spill_enable_direct_io is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_enable_direct_io() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_ENABLE_DIRECT_IO_ISSET_ID);
  }

  public void setSpill_enable_direct_ioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_ENABLE_DIRECT_IO_ISSET_ID, value);
  }

  public boolean isSpill_enable_compaction() {
    return this.spill_enable_compaction;
  }

  public TSpillOptions setSpill_enable_compaction(boolean spill_enable_compaction) {
    this.spill_enable_compaction = spill_enable_compaction;
    setSpill_enable_compactionIsSet(true);
    return this;
  }

  public void unsetSpill_enable_compaction() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_ENABLE_COMPACTION_ISSET_ID);
  }

  /** Returns true if field spill_enable_compaction is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_enable_compaction() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_ENABLE_COMPACTION_ISSET_ID);
  }

  public void setSpill_enable_compactionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_ENABLE_COMPACTION_ISSET_ID, value);
  }

  public double getSpill_rand_ratio() {
    return this.spill_rand_ratio;
  }

  public TSpillOptions setSpill_rand_ratio(double spill_rand_ratio) {
    this.spill_rand_ratio = spill_rand_ratio;
    setSpill_rand_ratioIsSet(true);
    return this;
  }

  public void unsetSpill_rand_ratio() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_RAND_RATIO_ISSET_ID);
  }

  /** Returns true if field spill_rand_ratio is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_rand_ratio() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_RAND_RATIO_ISSET_ID);
  }

  public void setSpill_rand_ratioIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_RAND_RATIO_ISSET_ID, value);
  }

  /**
   * 
   * @see TSpillMode
   */
  @org.apache.thrift.annotation.Nullable
  public TSpillMode getSpill_mode() {
    return this.spill_mode;
  }

  /**
   * 
   * @see TSpillMode
   */
  public TSpillOptions setSpill_mode(@org.apache.thrift.annotation.Nullable TSpillMode spill_mode) {
    this.spill_mode = spill_mode;
    return this;
  }

  public void unsetSpill_mode() {
    this.spill_mode = null;
  }

  /** Returns true if field spill_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_mode() {
    return this.spill_mode != null;
  }

  public void setSpill_modeIsSet(boolean value) {
    if (!value) {
      this.spill_mode = null;
    }
  }

  public long getSpillable_operator_mask() {
    return this.spillable_operator_mask;
  }

  public TSpillOptions setSpillable_operator_mask(long spillable_operator_mask) {
    this.spillable_operator_mask = spillable_operator_mask;
    setSpillable_operator_maskIsSet(true);
    return this;
  }

  public void unsetSpillable_operator_mask() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILLABLE_OPERATOR_MASK_ISSET_ID);
  }

  /** Returns true if field spillable_operator_mask is set (has been assigned a value) and false otherwise */
  public boolean isSetSpillable_operator_mask() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILLABLE_OPERATOR_MASK_ISSET_ID);
  }

  public void setSpillable_operator_maskIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILLABLE_OPERATOR_MASK_ISSET_ID, value);
  }

  public boolean isEnable_agg_spill_preaggregation() {
    return this.enable_agg_spill_preaggregation;
  }

  public TSpillOptions setEnable_agg_spill_preaggregation(boolean enable_agg_spill_preaggregation) {
    this.enable_agg_spill_preaggregation = enable_agg_spill_preaggregation;
    setEnable_agg_spill_preaggregationIsSet(true);
    return this;
  }

  public void unsetEnable_agg_spill_preaggregation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_AGG_SPILL_PREAGGREGATION_ISSET_ID);
  }

  /** Returns true if field enable_agg_spill_preaggregation is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_agg_spill_preaggregation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_AGG_SPILL_PREAGGREGATION_ISSET_ID);
  }

  public void setEnable_agg_spill_preaggregationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_AGG_SPILL_PREAGGREGATION_ISSET_ID, value);
  }

  public boolean isEnable_spill_to_remote_storage() {
    return this.enable_spill_to_remote_storage;
  }

  public TSpillOptions setEnable_spill_to_remote_storage(boolean enable_spill_to_remote_storage) {
    this.enable_spill_to_remote_storage = enable_spill_to_remote_storage;
    setEnable_spill_to_remote_storageIsSet(true);
    return this;
  }

  public void unsetEnable_spill_to_remote_storage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_SPILL_TO_REMOTE_STORAGE_ISSET_ID);
  }

  /** Returns true if field enable_spill_to_remote_storage is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_spill_to_remote_storage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_SPILL_TO_REMOTE_STORAGE_ISSET_ID);
  }

  public void setEnable_spill_to_remote_storageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_SPILL_TO_REMOTE_STORAGE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TSpillToRemoteStorageOptions getSpill_to_remote_storage_options() {
    return this.spill_to_remote_storage_options;
  }

  public TSpillOptions setSpill_to_remote_storage_options(@org.apache.thrift.annotation.Nullable TSpillToRemoteStorageOptions spill_to_remote_storage_options) {
    this.spill_to_remote_storage_options = spill_to_remote_storage_options;
    return this;
  }

  public void unsetSpill_to_remote_storage_options() {
    this.spill_to_remote_storage_options = null;
  }

  /** Returns true if field spill_to_remote_storage_options is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_to_remote_storage_options() {
    return this.spill_to_remote_storage_options != null;
  }

  public void setSpill_to_remote_storage_optionsIsSet(boolean value) {
    if (!value) {
      this.spill_to_remote_storage_options = null;
    }
  }

  public boolean isEnable_spill_buffer_read() {
    return this.enable_spill_buffer_read;
  }

  public TSpillOptions setEnable_spill_buffer_read(boolean enable_spill_buffer_read) {
    this.enable_spill_buffer_read = enable_spill_buffer_read;
    setEnable_spill_buffer_readIsSet(true);
    return this;
  }

  public void unsetEnable_spill_buffer_read() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_SPILL_BUFFER_READ_ISSET_ID);
  }

  /** Returns true if field enable_spill_buffer_read is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_spill_buffer_read() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_SPILL_BUFFER_READ_ISSET_ID);
  }

  public void setEnable_spill_buffer_readIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_SPILL_BUFFER_READ_ISSET_ID, value);
  }

  public long getMax_spill_read_buffer_bytes_per_driver() {
    return this.max_spill_read_buffer_bytes_per_driver;
  }

  public TSpillOptions setMax_spill_read_buffer_bytes_per_driver(long max_spill_read_buffer_bytes_per_driver) {
    this.max_spill_read_buffer_bytes_per_driver = max_spill_read_buffer_bytes_per_driver;
    setMax_spill_read_buffer_bytes_per_driverIsSet(true);
    return this;
  }

  public void unsetMax_spill_read_buffer_bytes_per_driver() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER_ISSET_ID);
  }

  /** Returns true if field max_spill_read_buffer_bytes_per_driver is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_spill_read_buffer_bytes_per_driver() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER_ISSET_ID);
  }

  public void setMax_spill_read_buffer_bytes_per_driverIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER_ISSET_ID, value);
  }

  public long getSpill_hash_join_probe_op_max_bytes() {
    return this.spill_hash_join_probe_op_max_bytes;
  }

  public TSpillOptions setSpill_hash_join_probe_op_max_bytes(long spill_hash_join_probe_op_max_bytes) {
    this.spill_hash_join_probe_op_max_bytes = spill_hash_join_probe_op_max_bytes;
    setSpill_hash_join_probe_op_max_bytesIsSet(true);
    return this;
  }

  public void unsetSpill_hash_join_probe_op_max_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES_ISSET_ID);
  }

  /** Returns true if field spill_hash_join_probe_op_max_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSpill_hash_join_probe_op_max_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES_ISSET_ID);
  }

  public void setSpill_hash_join_probe_op_max_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SPILL_MEM_TABLE_SIZE:
      if (value == null) {
        unsetSpill_mem_table_size();
      } else {
        setSpill_mem_table_size((java.lang.Integer)value);
      }
      break;

    case SPILL_MEM_TABLE_NUM:
      if (value == null) {
        unsetSpill_mem_table_num();
      } else {
        setSpill_mem_table_num((java.lang.Integer)value);
      }
      break;

    case SPILL_MEM_LIMIT_THRESHOLD:
      if (value == null) {
        unsetSpill_mem_limit_threshold();
      } else {
        setSpill_mem_limit_threshold((java.lang.Double)value);
      }
      break;

    case SPILL_OPERATOR_MIN_BYTES:
      if (value == null) {
        unsetSpill_operator_min_bytes();
      } else {
        setSpill_operator_min_bytes((java.lang.Long)value);
      }
      break;

    case SPILL_OPERATOR_MAX_BYTES:
      if (value == null) {
        unsetSpill_operator_max_bytes();
      } else {
        setSpill_operator_max_bytes((java.lang.Long)value);
      }
      break;

    case SPILL_ENCODE_LEVEL:
      if (value == null) {
        unsetSpill_encode_level();
      } else {
        setSpill_encode_level((java.lang.Integer)value);
      }
      break;

    case SPILL_REVOCABLE_MAX_BYTES:
      if (value == null) {
        unsetSpill_revocable_max_bytes();
      } else {
        setSpill_revocable_max_bytes((java.lang.Long)value);
      }
      break;

    case SPILL_ENABLE_DIRECT_IO:
      if (value == null) {
        unsetSpill_enable_direct_io();
      } else {
        setSpill_enable_direct_io((java.lang.Boolean)value);
      }
      break;

    case SPILL_ENABLE_COMPACTION:
      if (value == null) {
        unsetSpill_enable_compaction();
      } else {
        setSpill_enable_compaction((java.lang.Boolean)value);
      }
      break;

    case SPILL_RAND_RATIO:
      if (value == null) {
        unsetSpill_rand_ratio();
      } else {
        setSpill_rand_ratio((java.lang.Double)value);
      }
      break;

    case SPILL_MODE:
      if (value == null) {
        unsetSpill_mode();
      } else {
        setSpill_mode((TSpillMode)value);
      }
      break;

    case SPILLABLE_OPERATOR_MASK:
      if (value == null) {
        unsetSpillable_operator_mask();
      } else {
        setSpillable_operator_mask((java.lang.Long)value);
      }
      break;

    case ENABLE_AGG_SPILL_PREAGGREGATION:
      if (value == null) {
        unsetEnable_agg_spill_preaggregation();
      } else {
        setEnable_agg_spill_preaggregation((java.lang.Boolean)value);
      }
      break;

    case ENABLE_SPILL_TO_REMOTE_STORAGE:
      if (value == null) {
        unsetEnable_spill_to_remote_storage();
      } else {
        setEnable_spill_to_remote_storage((java.lang.Boolean)value);
      }
      break;

    case SPILL_TO_REMOTE_STORAGE_OPTIONS:
      if (value == null) {
        unsetSpill_to_remote_storage_options();
      } else {
        setSpill_to_remote_storage_options((TSpillToRemoteStorageOptions)value);
      }
      break;

    case ENABLE_SPILL_BUFFER_READ:
      if (value == null) {
        unsetEnable_spill_buffer_read();
      } else {
        setEnable_spill_buffer_read((java.lang.Boolean)value);
      }
      break;

    case MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER:
      if (value == null) {
        unsetMax_spill_read_buffer_bytes_per_driver();
      } else {
        setMax_spill_read_buffer_bytes_per_driver((java.lang.Long)value);
      }
      break;

    case SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES:
      if (value == null) {
        unsetSpill_hash_join_probe_op_max_bytes();
      } else {
        setSpill_hash_join_probe_op_max_bytes((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SPILL_MEM_TABLE_SIZE:
      return getSpill_mem_table_size();

    case SPILL_MEM_TABLE_NUM:
      return getSpill_mem_table_num();

    case SPILL_MEM_LIMIT_THRESHOLD:
      return getSpill_mem_limit_threshold();

    case SPILL_OPERATOR_MIN_BYTES:
      return getSpill_operator_min_bytes();

    case SPILL_OPERATOR_MAX_BYTES:
      return getSpill_operator_max_bytes();

    case SPILL_ENCODE_LEVEL:
      return getSpill_encode_level();

    case SPILL_REVOCABLE_MAX_BYTES:
      return getSpill_revocable_max_bytes();

    case SPILL_ENABLE_DIRECT_IO:
      return isSpill_enable_direct_io();

    case SPILL_ENABLE_COMPACTION:
      return isSpill_enable_compaction();

    case SPILL_RAND_RATIO:
      return getSpill_rand_ratio();

    case SPILL_MODE:
      return getSpill_mode();

    case SPILLABLE_OPERATOR_MASK:
      return getSpillable_operator_mask();

    case ENABLE_AGG_SPILL_PREAGGREGATION:
      return isEnable_agg_spill_preaggregation();

    case ENABLE_SPILL_TO_REMOTE_STORAGE:
      return isEnable_spill_to_remote_storage();

    case SPILL_TO_REMOTE_STORAGE_OPTIONS:
      return getSpill_to_remote_storage_options();

    case ENABLE_SPILL_BUFFER_READ:
      return isEnable_spill_buffer_read();

    case MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER:
      return getMax_spill_read_buffer_bytes_per_driver();

    case SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES:
      return getSpill_hash_join_probe_op_max_bytes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SPILL_MEM_TABLE_SIZE:
      return isSetSpill_mem_table_size();
    case SPILL_MEM_TABLE_NUM:
      return isSetSpill_mem_table_num();
    case SPILL_MEM_LIMIT_THRESHOLD:
      return isSetSpill_mem_limit_threshold();
    case SPILL_OPERATOR_MIN_BYTES:
      return isSetSpill_operator_min_bytes();
    case SPILL_OPERATOR_MAX_BYTES:
      return isSetSpill_operator_max_bytes();
    case SPILL_ENCODE_LEVEL:
      return isSetSpill_encode_level();
    case SPILL_REVOCABLE_MAX_BYTES:
      return isSetSpill_revocable_max_bytes();
    case SPILL_ENABLE_DIRECT_IO:
      return isSetSpill_enable_direct_io();
    case SPILL_ENABLE_COMPACTION:
      return isSetSpill_enable_compaction();
    case SPILL_RAND_RATIO:
      return isSetSpill_rand_ratio();
    case SPILL_MODE:
      return isSetSpill_mode();
    case SPILLABLE_OPERATOR_MASK:
      return isSetSpillable_operator_mask();
    case ENABLE_AGG_SPILL_PREAGGREGATION:
      return isSetEnable_agg_spill_preaggregation();
    case ENABLE_SPILL_TO_REMOTE_STORAGE:
      return isSetEnable_spill_to_remote_storage();
    case SPILL_TO_REMOTE_STORAGE_OPTIONS:
      return isSetSpill_to_remote_storage_options();
    case ENABLE_SPILL_BUFFER_READ:
      return isSetEnable_spill_buffer_read();
    case MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER:
      return isSetMax_spill_read_buffer_bytes_per_driver();
    case SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES:
      return isSetSpill_hash_join_probe_op_max_bytes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSpillOptions)
      return this.equals((TSpillOptions)that);
    return false;
  }

  public boolean equals(TSpillOptions that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_spill_mem_table_size = true && this.isSetSpill_mem_table_size();
    boolean that_present_spill_mem_table_size = true && that.isSetSpill_mem_table_size();
    if (this_present_spill_mem_table_size || that_present_spill_mem_table_size) {
      if (!(this_present_spill_mem_table_size && that_present_spill_mem_table_size))
        return false;
      if (this.spill_mem_table_size != that.spill_mem_table_size)
        return false;
    }

    boolean this_present_spill_mem_table_num = true && this.isSetSpill_mem_table_num();
    boolean that_present_spill_mem_table_num = true && that.isSetSpill_mem_table_num();
    if (this_present_spill_mem_table_num || that_present_spill_mem_table_num) {
      if (!(this_present_spill_mem_table_num && that_present_spill_mem_table_num))
        return false;
      if (this.spill_mem_table_num != that.spill_mem_table_num)
        return false;
    }

    boolean this_present_spill_mem_limit_threshold = true && this.isSetSpill_mem_limit_threshold();
    boolean that_present_spill_mem_limit_threshold = true && that.isSetSpill_mem_limit_threshold();
    if (this_present_spill_mem_limit_threshold || that_present_spill_mem_limit_threshold) {
      if (!(this_present_spill_mem_limit_threshold && that_present_spill_mem_limit_threshold))
        return false;
      if (this.spill_mem_limit_threshold != that.spill_mem_limit_threshold)
        return false;
    }

    boolean this_present_spill_operator_min_bytes = true && this.isSetSpill_operator_min_bytes();
    boolean that_present_spill_operator_min_bytes = true && that.isSetSpill_operator_min_bytes();
    if (this_present_spill_operator_min_bytes || that_present_spill_operator_min_bytes) {
      if (!(this_present_spill_operator_min_bytes && that_present_spill_operator_min_bytes))
        return false;
      if (this.spill_operator_min_bytes != that.spill_operator_min_bytes)
        return false;
    }

    boolean this_present_spill_operator_max_bytes = true && this.isSetSpill_operator_max_bytes();
    boolean that_present_spill_operator_max_bytes = true && that.isSetSpill_operator_max_bytes();
    if (this_present_spill_operator_max_bytes || that_present_spill_operator_max_bytes) {
      if (!(this_present_spill_operator_max_bytes && that_present_spill_operator_max_bytes))
        return false;
      if (this.spill_operator_max_bytes != that.spill_operator_max_bytes)
        return false;
    }

    boolean this_present_spill_encode_level = true && this.isSetSpill_encode_level();
    boolean that_present_spill_encode_level = true && that.isSetSpill_encode_level();
    if (this_present_spill_encode_level || that_present_spill_encode_level) {
      if (!(this_present_spill_encode_level && that_present_spill_encode_level))
        return false;
      if (this.spill_encode_level != that.spill_encode_level)
        return false;
    }

    boolean this_present_spill_revocable_max_bytes = true && this.isSetSpill_revocable_max_bytes();
    boolean that_present_spill_revocable_max_bytes = true && that.isSetSpill_revocable_max_bytes();
    if (this_present_spill_revocable_max_bytes || that_present_spill_revocable_max_bytes) {
      if (!(this_present_spill_revocable_max_bytes && that_present_spill_revocable_max_bytes))
        return false;
      if (this.spill_revocable_max_bytes != that.spill_revocable_max_bytes)
        return false;
    }

    boolean this_present_spill_enable_direct_io = true && this.isSetSpill_enable_direct_io();
    boolean that_present_spill_enable_direct_io = true && that.isSetSpill_enable_direct_io();
    if (this_present_spill_enable_direct_io || that_present_spill_enable_direct_io) {
      if (!(this_present_spill_enable_direct_io && that_present_spill_enable_direct_io))
        return false;
      if (this.spill_enable_direct_io != that.spill_enable_direct_io)
        return false;
    }

    boolean this_present_spill_enable_compaction = true && this.isSetSpill_enable_compaction();
    boolean that_present_spill_enable_compaction = true && that.isSetSpill_enable_compaction();
    if (this_present_spill_enable_compaction || that_present_spill_enable_compaction) {
      if (!(this_present_spill_enable_compaction && that_present_spill_enable_compaction))
        return false;
      if (this.spill_enable_compaction != that.spill_enable_compaction)
        return false;
    }

    boolean this_present_spill_rand_ratio = true && this.isSetSpill_rand_ratio();
    boolean that_present_spill_rand_ratio = true && that.isSetSpill_rand_ratio();
    if (this_present_spill_rand_ratio || that_present_spill_rand_ratio) {
      if (!(this_present_spill_rand_ratio && that_present_spill_rand_ratio))
        return false;
      if (this.spill_rand_ratio != that.spill_rand_ratio)
        return false;
    }

    boolean this_present_spill_mode = true && this.isSetSpill_mode();
    boolean that_present_spill_mode = true && that.isSetSpill_mode();
    if (this_present_spill_mode || that_present_spill_mode) {
      if (!(this_present_spill_mode && that_present_spill_mode))
        return false;
      if (!this.spill_mode.equals(that.spill_mode))
        return false;
    }

    boolean this_present_spillable_operator_mask = true && this.isSetSpillable_operator_mask();
    boolean that_present_spillable_operator_mask = true && that.isSetSpillable_operator_mask();
    if (this_present_spillable_operator_mask || that_present_spillable_operator_mask) {
      if (!(this_present_spillable_operator_mask && that_present_spillable_operator_mask))
        return false;
      if (this.spillable_operator_mask != that.spillable_operator_mask)
        return false;
    }

    boolean this_present_enable_agg_spill_preaggregation = true && this.isSetEnable_agg_spill_preaggregation();
    boolean that_present_enable_agg_spill_preaggregation = true && that.isSetEnable_agg_spill_preaggregation();
    if (this_present_enable_agg_spill_preaggregation || that_present_enable_agg_spill_preaggregation) {
      if (!(this_present_enable_agg_spill_preaggregation && that_present_enable_agg_spill_preaggregation))
        return false;
      if (this.enable_agg_spill_preaggregation != that.enable_agg_spill_preaggregation)
        return false;
    }

    boolean this_present_enable_spill_to_remote_storage = true && this.isSetEnable_spill_to_remote_storage();
    boolean that_present_enable_spill_to_remote_storage = true && that.isSetEnable_spill_to_remote_storage();
    if (this_present_enable_spill_to_remote_storage || that_present_enable_spill_to_remote_storage) {
      if (!(this_present_enable_spill_to_remote_storage && that_present_enable_spill_to_remote_storage))
        return false;
      if (this.enable_spill_to_remote_storage != that.enable_spill_to_remote_storage)
        return false;
    }

    boolean this_present_spill_to_remote_storage_options = true && this.isSetSpill_to_remote_storage_options();
    boolean that_present_spill_to_remote_storage_options = true && that.isSetSpill_to_remote_storage_options();
    if (this_present_spill_to_remote_storage_options || that_present_spill_to_remote_storage_options) {
      if (!(this_present_spill_to_remote_storage_options && that_present_spill_to_remote_storage_options))
        return false;
      if (!this.spill_to_remote_storage_options.equals(that.spill_to_remote_storage_options))
        return false;
    }

    boolean this_present_enable_spill_buffer_read = true && this.isSetEnable_spill_buffer_read();
    boolean that_present_enable_spill_buffer_read = true && that.isSetEnable_spill_buffer_read();
    if (this_present_enable_spill_buffer_read || that_present_enable_spill_buffer_read) {
      if (!(this_present_enable_spill_buffer_read && that_present_enable_spill_buffer_read))
        return false;
      if (this.enable_spill_buffer_read != that.enable_spill_buffer_read)
        return false;
    }

    boolean this_present_max_spill_read_buffer_bytes_per_driver = true && this.isSetMax_spill_read_buffer_bytes_per_driver();
    boolean that_present_max_spill_read_buffer_bytes_per_driver = true && that.isSetMax_spill_read_buffer_bytes_per_driver();
    if (this_present_max_spill_read_buffer_bytes_per_driver || that_present_max_spill_read_buffer_bytes_per_driver) {
      if (!(this_present_max_spill_read_buffer_bytes_per_driver && that_present_max_spill_read_buffer_bytes_per_driver))
        return false;
      if (this.max_spill_read_buffer_bytes_per_driver != that.max_spill_read_buffer_bytes_per_driver)
        return false;
    }

    boolean this_present_spill_hash_join_probe_op_max_bytes = true && this.isSetSpill_hash_join_probe_op_max_bytes();
    boolean that_present_spill_hash_join_probe_op_max_bytes = true && that.isSetSpill_hash_join_probe_op_max_bytes();
    if (this_present_spill_hash_join_probe_op_max_bytes || that_present_spill_hash_join_probe_op_max_bytes) {
      if (!(this_present_spill_hash_join_probe_op_max_bytes && that_present_spill_hash_join_probe_op_max_bytes))
        return false;
      if (this.spill_hash_join_probe_op_max_bytes != that.spill_hash_join_probe_op_max_bytes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSpill_mem_table_size()) ? 131071 : 524287);
    if (isSetSpill_mem_table_size())
      hashCode = hashCode * 8191 + spill_mem_table_size;

    hashCode = hashCode * 8191 + ((isSetSpill_mem_table_num()) ? 131071 : 524287);
    if (isSetSpill_mem_table_num())
      hashCode = hashCode * 8191 + spill_mem_table_num;

    hashCode = hashCode * 8191 + ((isSetSpill_mem_limit_threshold()) ? 131071 : 524287);
    if (isSetSpill_mem_limit_threshold())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spill_mem_limit_threshold);

    hashCode = hashCode * 8191 + ((isSetSpill_operator_min_bytes()) ? 131071 : 524287);
    if (isSetSpill_operator_min_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spill_operator_min_bytes);

    hashCode = hashCode * 8191 + ((isSetSpill_operator_max_bytes()) ? 131071 : 524287);
    if (isSetSpill_operator_max_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spill_operator_max_bytes);

    hashCode = hashCode * 8191 + ((isSetSpill_encode_level()) ? 131071 : 524287);
    if (isSetSpill_encode_level())
      hashCode = hashCode * 8191 + spill_encode_level;

    hashCode = hashCode * 8191 + ((isSetSpill_revocable_max_bytes()) ? 131071 : 524287);
    if (isSetSpill_revocable_max_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spill_revocable_max_bytes);

    hashCode = hashCode * 8191 + ((isSetSpill_enable_direct_io()) ? 131071 : 524287);
    if (isSetSpill_enable_direct_io())
      hashCode = hashCode * 8191 + ((spill_enable_direct_io) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSpill_enable_compaction()) ? 131071 : 524287);
    if (isSetSpill_enable_compaction())
      hashCode = hashCode * 8191 + ((spill_enable_compaction) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSpill_rand_ratio()) ? 131071 : 524287);
    if (isSetSpill_rand_ratio())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spill_rand_ratio);

    hashCode = hashCode * 8191 + ((isSetSpill_mode()) ? 131071 : 524287);
    if (isSetSpill_mode())
      hashCode = hashCode * 8191 + spill_mode.getValue();

    hashCode = hashCode * 8191 + ((isSetSpillable_operator_mask()) ? 131071 : 524287);
    if (isSetSpillable_operator_mask())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spillable_operator_mask);

    hashCode = hashCode * 8191 + ((isSetEnable_agg_spill_preaggregation()) ? 131071 : 524287);
    if (isSetEnable_agg_spill_preaggregation())
      hashCode = hashCode * 8191 + ((enable_agg_spill_preaggregation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEnable_spill_to_remote_storage()) ? 131071 : 524287);
    if (isSetEnable_spill_to_remote_storage())
      hashCode = hashCode * 8191 + ((enable_spill_to_remote_storage) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSpill_to_remote_storage_options()) ? 131071 : 524287);
    if (isSetSpill_to_remote_storage_options())
      hashCode = hashCode * 8191 + spill_to_remote_storage_options.hashCode();

    hashCode = hashCode * 8191 + ((isSetEnable_spill_buffer_read()) ? 131071 : 524287);
    if (isSetEnable_spill_buffer_read())
      hashCode = hashCode * 8191 + ((enable_spill_buffer_read) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetMax_spill_read_buffer_bytes_per_driver()) ? 131071 : 524287);
    if (isSetMax_spill_read_buffer_bytes_per_driver())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_spill_read_buffer_bytes_per_driver);

    hashCode = hashCode * 8191 + ((isSetSpill_hash_join_probe_op_max_bytes()) ? 131071 : 524287);
    if (isSetSpill_hash_join_probe_op_max_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spill_hash_join_probe_op_max_bytes);

    return hashCode;
  }

  @Override
  public int compareTo(TSpillOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSpill_mem_table_size(), other.isSetSpill_mem_table_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_mem_table_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_mem_table_size, other.spill_mem_table_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_mem_table_num(), other.isSetSpill_mem_table_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_mem_table_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_mem_table_num, other.spill_mem_table_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_mem_limit_threshold(), other.isSetSpill_mem_limit_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_mem_limit_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_mem_limit_threshold, other.spill_mem_limit_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_operator_min_bytes(), other.isSetSpill_operator_min_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_operator_min_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_operator_min_bytes, other.spill_operator_min_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_operator_max_bytes(), other.isSetSpill_operator_max_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_operator_max_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_operator_max_bytes, other.spill_operator_max_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_encode_level(), other.isSetSpill_encode_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_encode_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_encode_level, other.spill_encode_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_revocable_max_bytes(), other.isSetSpill_revocable_max_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_revocable_max_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_revocable_max_bytes, other.spill_revocable_max_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_enable_direct_io(), other.isSetSpill_enable_direct_io());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_enable_direct_io()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_enable_direct_io, other.spill_enable_direct_io);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_enable_compaction(), other.isSetSpill_enable_compaction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_enable_compaction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_enable_compaction, other.spill_enable_compaction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_rand_ratio(), other.isSetSpill_rand_ratio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_rand_ratio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_rand_ratio, other.spill_rand_ratio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_mode(), other.isSetSpill_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_mode, other.spill_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpillable_operator_mask(), other.isSetSpillable_operator_mask());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpillable_operator_mask()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spillable_operator_mask, other.spillable_operator_mask);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_agg_spill_preaggregation(), other.isSetEnable_agg_spill_preaggregation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_agg_spill_preaggregation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_agg_spill_preaggregation, other.enable_agg_spill_preaggregation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_spill_to_remote_storage(), other.isSetEnable_spill_to_remote_storage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_spill_to_remote_storage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_spill_to_remote_storage, other.enable_spill_to_remote_storage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_to_remote_storage_options(), other.isSetSpill_to_remote_storage_options());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_to_remote_storage_options()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_to_remote_storage_options, other.spill_to_remote_storage_options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEnable_spill_buffer_read(), other.isSetEnable_spill_buffer_read());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_spill_buffer_read()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_spill_buffer_read, other.enable_spill_buffer_read);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_spill_read_buffer_bytes_per_driver(), other.isSetMax_spill_read_buffer_bytes_per_driver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_spill_read_buffer_bytes_per_driver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_spill_read_buffer_bytes_per_driver, other.max_spill_read_buffer_bytes_per_driver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpill_hash_join_probe_op_max_bytes(), other.isSetSpill_hash_join_probe_op_max_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpill_hash_join_probe_op_max_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spill_hash_join_probe_op_max_bytes, other.spill_hash_join_probe_op_max_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSpillOptions(");
    boolean first = true;

    if (isSetSpill_mem_table_size()) {
      sb.append("spill_mem_table_size:");
      sb.append(this.spill_mem_table_size);
      first = false;
    }
    if (isSetSpill_mem_table_num()) {
      if (!first) sb.append(", ");
      sb.append("spill_mem_table_num:");
      sb.append(this.spill_mem_table_num);
      first = false;
    }
    if (isSetSpill_mem_limit_threshold()) {
      if (!first) sb.append(", ");
      sb.append("spill_mem_limit_threshold:");
      sb.append(this.spill_mem_limit_threshold);
      first = false;
    }
    if (isSetSpill_operator_min_bytes()) {
      if (!first) sb.append(", ");
      sb.append("spill_operator_min_bytes:");
      sb.append(this.spill_operator_min_bytes);
      first = false;
    }
    if (isSetSpill_operator_max_bytes()) {
      if (!first) sb.append(", ");
      sb.append("spill_operator_max_bytes:");
      sb.append(this.spill_operator_max_bytes);
      first = false;
    }
    if (isSetSpill_encode_level()) {
      if (!first) sb.append(", ");
      sb.append("spill_encode_level:");
      sb.append(this.spill_encode_level);
      first = false;
    }
    if (isSetSpill_revocable_max_bytes()) {
      if (!first) sb.append(", ");
      sb.append("spill_revocable_max_bytes:");
      sb.append(this.spill_revocable_max_bytes);
      first = false;
    }
    if (isSetSpill_enable_direct_io()) {
      if (!first) sb.append(", ");
      sb.append("spill_enable_direct_io:");
      sb.append(this.spill_enable_direct_io);
      first = false;
    }
    if (isSetSpill_enable_compaction()) {
      if (!first) sb.append(", ");
      sb.append("spill_enable_compaction:");
      sb.append(this.spill_enable_compaction);
      first = false;
    }
    if (isSetSpill_rand_ratio()) {
      if (!first) sb.append(", ");
      sb.append("spill_rand_ratio:");
      sb.append(this.spill_rand_ratio);
      first = false;
    }
    if (isSetSpill_mode()) {
      if (!first) sb.append(", ");
      sb.append("spill_mode:");
      if (this.spill_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.spill_mode);
      }
      first = false;
    }
    if (isSetSpillable_operator_mask()) {
      if (!first) sb.append(", ");
      sb.append("spillable_operator_mask:");
      sb.append(this.spillable_operator_mask);
      first = false;
    }
    if (isSetEnable_agg_spill_preaggregation()) {
      if (!first) sb.append(", ");
      sb.append("enable_agg_spill_preaggregation:");
      sb.append(this.enable_agg_spill_preaggregation);
      first = false;
    }
    if (isSetEnable_spill_to_remote_storage()) {
      if (!first) sb.append(", ");
      sb.append("enable_spill_to_remote_storage:");
      sb.append(this.enable_spill_to_remote_storage);
      first = false;
    }
    if (isSetSpill_to_remote_storage_options()) {
      if (!first) sb.append(", ");
      sb.append("spill_to_remote_storage_options:");
      if (this.spill_to_remote_storage_options == null) {
        sb.append("null");
      } else {
        sb.append(this.spill_to_remote_storage_options);
      }
      first = false;
    }
    if (isSetEnable_spill_buffer_read()) {
      if (!first) sb.append(", ");
      sb.append("enable_spill_buffer_read:");
      sb.append(this.enable_spill_buffer_read);
      first = false;
    }
    if (isSetMax_spill_read_buffer_bytes_per_driver()) {
      if (!first) sb.append(", ");
      sb.append("max_spill_read_buffer_bytes_per_driver:");
      sb.append(this.max_spill_read_buffer_bytes_per_driver);
      first = false;
    }
    if (isSetSpill_hash_join_probe_op_max_bytes()) {
      if (!first) sb.append(", ");
      sb.append("spill_hash_join_probe_op_max_bytes:");
      sb.append(this.spill_hash_join_probe_op_max_bytes);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (spill_to_remote_storage_options != null) {
      spill_to_remote_storage_options.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSpillOptionsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSpillOptionsStandardScheme getScheme() {
      return new TSpillOptionsStandardScheme();
    }
  }

  private static class TSpillOptionsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSpillOptions> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSpillOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPILL_MEM_TABLE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spill_mem_table_size = iprot.readI32();
              struct.setSpill_mem_table_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPILL_MEM_TABLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spill_mem_table_num = iprot.readI32();
              struct.setSpill_mem_table_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SPILL_MEM_LIMIT_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.spill_mem_limit_threshold = iprot.readDouble();
              struct.setSpill_mem_limit_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPILL_OPERATOR_MIN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spill_operator_min_bytes = iprot.readI64();
              struct.setSpill_operator_min_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SPILL_OPERATOR_MAX_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spill_operator_max_bytes = iprot.readI64();
              struct.setSpill_operator_max_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SPILL_ENCODE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spill_encode_level = iprot.readI32();
              struct.setSpill_encode_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SPILL_REVOCABLE_MAX_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spill_revocable_max_bytes = iprot.readI64();
              struct.setSpill_revocable_max_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SPILL_ENABLE_DIRECT_IO
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.spill_enable_direct_io = iprot.readBool();
              struct.setSpill_enable_direct_ioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SPILL_ENABLE_COMPACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.spill_enable_compaction = iprot.readBool();
              struct.setSpill_enable_compactionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SPILL_RAND_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.spill_rand_ratio = iprot.readDouble();
              struct.setSpill_rand_ratioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SPILL_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.spill_mode = com.starrocks.thrift.TSpillMode.findByValue(iprot.readI32());
              struct.setSpill_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SPILLABLE_OPERATOR_MASK
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spillable_operator_mask = iprot.readI64();
              struct.setSpillable_operator_maskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ENABLE_AGG_SPILL_PREAGGREGATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_agg_spill_preaggregation = iprot.readBool();
              struct.setEnable_agg_spill_preaggregationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ENABLE_SPILL_TO_REMOTE_STORAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_spill_to_remote_storage = iprot.readBool();
              struct.setEnable_spill_to_remote_storageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SPILL_TO_REMOTE_STORAGE_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.spill_to_remote_storage_options = new TSpillToRemoteStorageOptions();
              struct.spill_to_remote_storage_options.read(iprot);
              struct.setSpill_to_remote_storage_optionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // ENABLE_SPILL_BUFFER_READ
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_spill_buffer_read = iprot.readBool();
              struct.setEnable_spill_buffer_readIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_spill_read_buffer_bytes_per_driver = iprot.readI64();
              struct.setMax_spill_read_buffer_bytes_per_driverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spill_hash_join_probe_op_max_bytes = iprot.readI64();
              struct.setSpill_hash_join_probe_op_max_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSpillOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSpill_mem_table_size()) {
        oprot.writeFieldBegin(SPILL_MEM_TABLE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.spill_mem_table_size);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_mem_table_num()) {
        oprot.writeFieldBegin(SPILL_MEM_TABLE_NUM_FIELD_DESC);
        oprot.writeI32(struct.spill_mem_table_num);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_mem_limit_threshold()) {
        oprot.writeFieldBegin(SPILL_MEM_LIMIT_THRESHOLD_FIELD_DESC);
        oprot.writeDouble(struct.spill_mem_limit_threshold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_operator_min_bytes()) {
        oprot.writeFieldBegin(SPILL_OPERATOR_MIN_BYTES_FIELD_DESC);
        oprot.writeI64(struct.spill_operator_min_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_operator_max_bytes()) {
        oprot.writeFieldBegin(SPILL_OPERATOR_MAX_BYTES_FIELD_DESC);
        oprot.writeI64(struct.spill_operator_max_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_encode_level()) {
        oprot.writeFieldBegin(SPILL_ENCODE_LEVEL_FIELD_DESC);
        oprot.writeI32(struct.spill_encode_level);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_revocable_max_bytes()) {
        oprot.writeFieldBegin(SPILL_REVOCABLE_MAX_BYTES_FIELD_DESC);
        oprot.writeI64(struct.spill_revocable_max_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_enable_direct_io()) {
        oprot.writeFieldBegin(SPILL_ENABLE_DIRECT_IO_FIELD_DESC);
        oprot.writeBool(struct.spill_enable_direct_io);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_enable_compaction()) {
        oprot.writeFieldBegin(SPILL_ENABLE_COMPACTION_FIELD_DESC);
        oprot.writeBool(struct.spill_enable_compaction);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_rand_ratio()) {
        oprot.writeFieldBegin(SPILL_RAND_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.spill_rand_ratio);
        oprot.writeFieldEnd();
      }
      if (struct.spill_mode != null) {
        if (struct.isSetSpill_mode()) {
          oprot.writeFieldBegin(SPILL_MODE_FIELD_DESC);
          oprot.writeI32(struct.spill_mode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSpillable_operator_mask()) {
        oprot.writeFieldBegin(SPILLABLE_OPERATOR_MASK_FIELD_DESC);
        oprot.writeI64(struct.spillable_operator_mask);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_agg_spill_preaggregation()) {
        oprot.writeFieldBegin(ENABLE_AGG_SPILL_PREAGGREGATION_FIELD_DESC);
        oprot.writeBool(struct.enable_agg_spill_preaggregation);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEnable_spill_to_remote_storage()) {
        oprot.writeFieldBegin(ENABLE_SPILL_TO_REMOTE_STORAGE_FIELD_DESC);
        oprot.writeBool(struct.enable_spill_to_remote_storage);
        oprot.writeFieldEnd();
      }
      if (struct.spill_to_remote_storage_options != null) {
        if (struct.isSetSpill_to_remote_storage_options()) {
          oprot.writeFieldBegin(SPILL_TO_REMOTE_STORAGE_OPTIONS_FIELD_DESC);
          struct.spill_to_remote_storage_options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEnable_spill_buffer_read()) {
        oprot.writeFieldBegin(ENABLE_SPILL_BUFFER_READ_FIELD_DESC);
        oprot.writeBool(struct.enable_spill_buffer_read);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMax_spill_read_buffer_bytes_per_driver()) {
        oprot.writeFieldBegin(MAX_SPILL_READ_BUFFER_BYTES_PER_DRIVER_FIELD_DESC);
        oprot.writeI64(struct.max_spill_read_buffer_bytes_per_driver);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpill_hash_join_probe_op_max_bytes()) {
        oprot.writeFieldBegin(SPILL_HASH_JOIN_PROBE_OP_MAX_BYTES_FIELD_DESC);
        oprot.writeI64(struct.spill_hash_join_probe_op_max_bytes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSpillOptionsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSpillOptionsTupleScheme getScheme() {
      return new TSpillOptionsTupleScheme();
    }
  }

  private static class TSpillOptionsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSpillOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSpillOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSpill_mem_table_size()) {
        optionals.set(0);
      }
      if (struct.isSetSpill_mem_table_num()) {
        optionals.set(1);
      }
      if (struct.isSetSpill_mem_limit_threshold()) {
        optionals.set(2);
      }
      if (struct.isSetSpill_operator_min_bytes()) {
        optionals.set(3);
      }
      if (struct.isSetSpill_operator_max_bytes()) {
        optionals.set(4);
      }
      if (struct.isSetSpill_encode_level()) {
        optionals.set(5);
      }
      if (struct.isSetSpill_revocable_max_bytes()) {
        optionals.set(6);
      }
      if (struct.isSetSpill_enable_direct_io()) {
        optionals.set(7);
      }
      if (struct.isSetSpill_enable_compaction()) {
        optionals.set(8);
      }
      if (struct.isSetSpill_rand_ratio()) {
        optionals.set(9);
      }
      if (struct.isSetSpill_mode()) {
        optionals.set(10);
      }
      if (struct.isSetSpillable_operator_mask()) {
        optionals.set(11);
      }
      if (struct.isSetEnable_agg_spill_preaggregation()) {
        optionals.set(12);
      }
      if (struct.isSetEnable_spill_to_remote_storage()) {
        optionals.set(13);
      }
      if (struct.isSetSpill_to_remote_storage_options()) {
        optionals.set(14);
      }
      if (struct.isSetEnable_spill_buffer_read()) {
        optionals.set(15);
      }
      if (struct.isSetMax_spill_read_buffer_bytes_per_driver()) {
        optionals.set(16);
      }
      if (struct.isSetSpill_hash_join_probe_op_max_bytes()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetSpill_mem_table_size()) {
        oprot.writeI32(struct.spill_mem_table_size);
      }
      if (struct.isSetSpill_mem_table_num()) {
        oprot.writeI32(struct.spill_mem_table_num);
      }
      if (struct.isSetSpill_mem_limit_threshold()) {
        oprot.writeDouble(struct.spill_mem_limit_threshold);
      }
      if (struct.isSetSpill_operator_min_bytes()) {
        oprot.writeI64(struct.spill_operator_min_bytes);
      }
      if (struct.isSetSpill_operator_max_bytes()) {
        oprot.writeI64(struct.spill_operator_max_bytes);
      }
      if (struct.isSetSpill_encode_level()) {
        oprot.writeI32(struct.spill_encode_level);
      }
      if (struct.isSetSpill_revocable_max_bytes()) {
        oprot.writeI64(struct.spill_revocable_max_bytes);
      }
      if (struct.isSetSpill_enable_direct_io()) {
        oprot.writeBool(struct.spill_enable_direct_io);
      }
      if (struct.isSetSpill_enable_compaction()) {
        oprot.writeBool(struct.spill_enable_compaction);
      }
      if (struct.isSetSpill_rand_ratio()) {
        oprot.writeDouble(struct.spill_rand_ratio);
      }
      if (struct.isSetSpill_mode()) {
        oprot.writeI32(struct.spill_mode.getValue());
      }
      if (struct.isSetSpillable_operator_mask()) {
        oprot.writeI64(struct.spillable_operator_mask);
      }
      if (struct.isSetEnable_agg_spill_preaggregation()) {
        oprot.writeBool(struct.enable_agg_spill_preaggregation);
      }
      if (struct.isSetEnable_spill_to_remote_storage()) {
        oprot.writeBool(struct.enable_spill_to_remote_storage);
      }
      if (struct.isSetSpill_to_remote_storage_options()) {
        struct.spill_to_remote_storage_options.write(oprot);
      }
      if (struct.isSetEnable_spill_buffer_read()) {
        oprot.writeBool(struct.enable_spill_buffer_read);
      }
      if (struct.isSetMax_spill_read_buffer_bytes_per_driver()) {
        oprot.writeI64(struct.max_spill_read_buffer_bytes_per_driver);
      }
      if (struct.isSetSpill_hash_join_probe_op_max_bytes()) {
        oprot.writeI64(struct.spill_hash_join_probe_op_max_bytes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSpillOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.spill_mem_table_size = iprot.readI32();
        struct.setSpill_mem_table_sizeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.spill_mem_table_num = iprot.readI32();
        struct.setSpill_mem_table_numIsSet(true);
      }
      if (incoming.get(2)) {
        struct.spill_mem_limit_threshold = iprot.readDouble();
        struct.setSpill_mem_limit_thresholdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.spill_operator_min_bytes = iprot.readI64();
        struct.setSpill_operator_min_bytesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.spill_operator_max_bytes = iprot.readI64();
        struct.setSpill_operator_max_bytesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.spill_encode_level = iprot.readI32();
        struct.setSpill_encode_levelIsSet(true);
      }
      if (incoming.get(6)) {
        struct.spill_revocable_max_bytes = iprot.readI64();
        struct.setSpill_revocable_max_bytesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.spill_enable_direct_io = iprot.readBool();
        struct.setSpill_enable_direct_ioIsSet(true);
      }
      if (incoming.get(8)) {
        struct.spill_enable_compaction = iprot.readBool();
        struct.setSpill_enable_compactionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.spill_rand_ratio = iprot.readDouble();
        struct.setSpill_rand_ratioIsSet(true);
      }
      if (incoming.get(10)) {
        struct.spill_mode = com.starrocks.thrift.TSpillMode.findByValue(iprot.readI32());
        struct.setSpill_modeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.spillable_operator_mask = iprot.readI64();
        struct.setSpillable_operator_maskIsSet(true);
      }
      if (incoming.get(12)) {
        struct.enable_agg_spill_preaggregation = iprot.readBool();
        struct.setEnable_agg_spill_preaggregationIsSet(true);
      }
      if (incoming.get(13)) {
        struct.enable_spill_to_remote_storage = iprot.readBool();
        struct.setEnable_spill_to_remote_storageIsSet(true);
      }
      if (incoming.get(14)) {
        struct.spill_to_remote_storage_options = new TSpillToRemoteStorageOptions();
        struct.spill_to_remote_storage_options.read(iprot);
        struct.setSpill_to_remote_storage_optionsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.enable_spill_buffer_read = iprot.readBool();
        struct.setEnable_spill_buffer_readIsSet(true);
      }
      if (incoming.get(16)) {
        struct.max_spill_read_buffer_bytes_per_driver = iprot.readI64();
        struct.setMax_spill_read_buffer_bytes_per_driverIsSet(true);
      }
      if (incoming.get(17)) {
        struct.spill_hash_join_probe_op_max_bytes = iprot.readI64();
        struct.setSpill_hash_join_probe_op_max_bytesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

