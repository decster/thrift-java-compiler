/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TManualLoadTxnCommitAttachment implements org.apache.thrift.TBase<TManualLoadTxnCommitAttachment, TManualLoadTxnCommitAttachment._Fields>, java.io.Serializable, Cloneable, Comparable<TManualLoadTxnCommitAttachment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TManualLoadTxnCommitAttachment");

  private static final org.apache.thrift.protocol.TField LOADED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("loadedRows", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FILTERED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("filteredRows", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ERROR_LOG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("errorLogUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RECEIVED_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedBytes", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField LOADED_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("loadedBytes", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField UNSELECTED_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("unselectedRows", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PLAN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("planTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField RECEIVE_DATA_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveDataTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField BEGIN_TXN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTxnTime", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TManualLoadTxnCommitAttachmentStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TManualLoadTxnCommitAttachmentTupleSchemeFactory();

  public long loadedRows; // optional
  public long filteredRows; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String errorLogUrl; // optional
  public long receivedBytes; // optional
  public long loadedBytes; // optional
  public long unselectedRows; // optional
  public long planTime; // optional
  public long receiveDataTime; // optional
  public long beginTxnTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOADED_ROWS((short)1, "loadedRows"),
    FILTERED_ROWS((short)2, "filteredRows"),
    ERROR_LOG_URL((short)3, "errorLogUrl"),
    RECEIVED_BYTES((short)4, "receivedBytes"),
    LOADED_BYTES((short)5, "loadedBytes"),
    UNSELECTED_ROWS((short)6, "unselectedRows"),
    PLAN_TIME((short)7, "planTime"),
    RECEIVE_DATA_TIME((short)8, "receiveDataTime"),
    BEGIN_TXN_TIME((short)9, "beginTxnTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOADED_ROWS
          return LOADED_ROWS;
        case 2: // FILTERED_ROWS
          return FILTERED_ROWS;
        case 3: // ERROR_LOG_URL
          return ERROR_LOG_URL;
        case 4: // RECEIVED_BYTES
          return RECEIVED_BYTES;
        case 5: // LOADED_BYTES
          return LOADED_BYTES;
        case 6: // UNSELECTED_ROWS
          return UNSELECTED_ROWS;
        case 7: // PLAN_TIME
          return PLAN_TIME;
        case 8: // RECEIVE_DATA_TIME
          return RECEIVE_DATA_TIME;
        case 9: // BEGIN_TXN_TIME
          return BEGIN_TXN_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOADEDROWS_ISSET_ID = 0;
  private static final int __FILTEREDROWS_ISSET_ID = 1;
  private static final int __RECEIVEDBYTES_ISSET_ID = 2;
  private static final int __LOADEDBYTES_ISSET_ID = 3;
  private static final int __UNSELECTEDROWS_ISSET_ID = 4;
  private static final int __PLANTIME_ISSET_ID = 5;
  private static final int __RECEIVEDATATIME_ISSET_ID = 6;
  private static final int __BEGINTXNTIME_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.LOADED_ROWS,_Fields.FILTERED_ROWS,_Fields.ERROR_LOG_URL,_Fields.RECEIVED_BYTES,_Fields.LOADED_BYTES,_Fields.UNSELECTED_ROWS,_Fields.PLAN_TIME,_Fields.RECEIVE_DATA_TIME,_Fields.BEGIN_TXN_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOADED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("loadedRows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FILTERED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("filteredRows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERROR_LOG_URL, new org.apache.thrift.meta_data.FieldMetaData("errorLogUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIVED_BYTES, new org.apache.thrift.meta_data.FieldMetaData("receivedBytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOADED_BYTES, new org.apache.thrift.meta_data.FieldMetaData("loadedBytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UNSELECTED_ROWS, new org.apache.thrift.meta_data.FieldMetaData("unselectedRows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PLAN_TIME, new org.apache.thrift.meta_data.FieldMetaData("planTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECEIVE_DATA_TIME, new org.apache.thrift.meta_data.FieldMetaData("receiveDataTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BEGIN_TXN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTxnTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TManualLoadTxnCommitAttachment.class, metaDataMap);
  }

  public TManualLoadTxnCommitAttachment() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TManualLoadTxnCommitAttachment(TManualLoadTxnCommitAttachment other) {
    __isset_bitfield = other.__isset_bitfield;
    this.loadedRows = other.loadedRows;
    this.filteredRows = other.filteredRows;
    if (other.isSetErrorLogUrl()) {
      this.errorLogUrl = other.errorLogUrl;
    }
    this.receivedBytes = other.receivedBytes;
    this.loadedBytes = other.loadedBytes;
    this.unselectedRows = other.unselectedRows;
    this.planTime = other.planTime;
    this.receiveDataTime = other.receiveDataTime;
    this.beginTxnTime = other.beginTxnTime;
  }

  @Override
  public TManualLoadTxnCommitAttachment deepCopy() {
    return new TManualLoadTxnCommitAttachment(this);
  }

  @Override
  public void clear() {
    setLoadedRowsIsSet(false);
    this.loadedRows = 0;
    setFilteredRowsIsSet(false);
    this.filteredRows = 0;
    this.errorLogUrl = null;
    setReceivedBytesIsSet(false);
    this.receivedBytes = 0;
    setLoadedBytesIsSet(false);
    this.loadedBytes = 0;
    setUnselectedRowsIsSet(false);
    this.unselectedRows = 0;
    setPlanTimeIsSet(false);
    this.planTime = 0;
    setReceiveDataTimeIsSet(false);
    this.receiveDataTime = 0;
    setBeginTxnTimeIsSet(false);
    this.beginTxnTime = 0;
  }

  public long getLoadedRows() {
    return this.loadedRows;
  }

  public TManualLoadTxnCommitAttachment setLoadedRows(long loadedRows) {
    this.loadedRows = loadedRows;
    setLoadedRowsIsSet(true);
    return this;
  }

  public void unsetLoadedRows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADEDROWS_ISSET_ID);
  }

  /** Returns true if field loadedRows is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadedRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADEDROWS_ISSET_ID);
  }

  public void setLoadedRowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADEDROWS_ISSET_ID, value);
  }

  public long getFilteredRows() {
    return this.filteredRows;
  }

  public TManualLoadTxnCommitAttachment setFilteredRows(long filteredRows) {
    this.filteredRows = filteredRows;
    setFilteredRowsIsSet(true);
    return this;
  }

  public void unsetFilteredRows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILTEREDROWS_ISSET_ID);
  }

  /** Returns true if field filteredRows is set (has been assigned a value) and false otherwise */
  public boolean isSetFilteredRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILTEREDROWS_ISSET_ID);
  }

  public void setFilteredRowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILTEREDROWS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getErrorLogUrl() {
    return this.errorLogUrl;
  }

  public TManualLoadTxnCommitAttachment setErrorLogUrl(@org.apache.thrift.annotation.Nullable java.lang.String errorLogUrl) {
    this.errorLogUrl = errorLogUrl;
    return this;
  }

  public void unsetErrorLogUrl() {
    this.errorLogUrl = null;
  }

  /** Returns true if field errorLogUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorLogUrl() {
    return this.errorLogUrl != null;
  }

  public void setErrorLogUrlIsSet(boolean value) {
    if (!value) {
      this.errorLogUrl = null;
    }
  }

  public long getReceivedBytes() {
    return this.receivedBytes;
  }

  public TManualLoadTxnCommitAttachment setReceivedBytes(long receivedBytes) {
    this.receivedBytes = receivedBytes;
    setReceivedBytesIsSet(true);
    return this;
  }

  public void unsetReceivedBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDBYTES_ISSET_ID);
  }

  /** Returns true if field receivedBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECEIVEDBYTES_ISSET_ID);
  }

  public void setReceivedBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECEIVEDBYTES_ISSET_ID, value);
  }

  public long getLoadedBytes() {
    return this.loadedBytes;
  }

  public TManualLoadTxnCommitAttachment setLoadedBytes(long loadedBytes) {
    this.loadedBytes = loadedBytes;
    setLoadedBytesIsSet(true);
    return this;
  }

  public void unsetLoadedBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOADEDBYTES_ISSET_ID);
  }

  /** Returns true if field loadedBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadedBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOADEDBYTES_ISSET_ID);
  }

  public void setLoadedBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOADEDBYTES_ISSET_ID, value);
  }

  public long getUnselectedRows() {
    return this.unselectedRows;
  }

  public TManualLoadTxnCommitAttachment setUnselectedRows(long unselectedRows) {
    this.unselectedRows = unselectedRows;
    setUnselectedRowsIsSet(true);
    return this;
  }

  public void unsetUnselectedRows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNSELECTEDROWS_ISSET_ID);
  }

  /** Returns true if field unselectedRows is set (has been assigned a value) and false otherwise */
  public boolean isSetUnselectedRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNSELECTEDROWS_ISSET_ID);
  }

  public void setUnselectedRowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNSELECTEDROWS_ISSET_ID, value);
  }

  public long getPlanTime() {
    return this.planTime;
  }

  public TManualLoadTxnCommitAttachment setPlanTime(long planTime) {
    this.planTime = planTime;
    setPlanTimeIsSet(true);
    return this;
  }

  public void unsetPlanTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PLANTIME_ISSET_ID);
  }

  /** Returns true if field planTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PLANTIME_ISSET_ID);
  }

  public void setPlanTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PLANTIME_ISSET_ID, value);
  }

  public long getReceiveDataTime() {
    return this.receiveDataTime;
  }

  public TManualLoadTxnCommitAttachment setReceiveDataTime(long receiveDataTime) {
    this.receiveDataTime = receiveDataTime;
    setReceiveDataTimeIsSet(true);
    return this;
  }

  public void unsetReceiveDataTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDATATIME_ISSET_ID);
  }

  /** Returns true if field receiveDataTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveDataTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECEIVEDATATIME_ISSET_ID);
  }

  public void setReceiveDataTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECEIVEDATATIME_ISSET_ID, value);
  }

  public long getBeginTxnTime() {
    return this.beginTxnTime;
  }

  public TManualLoadTxnCommitAttachment setBeginTxnTime(long beginTxnTime) {
    this.beginTxnTime = beginTxnTime;
    setBeginTxnTimeIsSet(true);
    return this;
  }

  public void unsetBeginTxnTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BEGINTXNTIME_ISSET_ID);
  }

  /** Returns true if field beginTxnTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginTxnTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BEGINTXNTIME_ISSET_ID);
  }

  public void setBeginTxnTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BEGINTXNTIME_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LOADED_ROWS:
      if (value == null) {
        unsetLoadedRows();
      } else {
        setLoadedRows((java.lang.Long)value);
      }
      break;

    case FILTERED_ROWS:
      if (value == null) {
        unsetFilteredRows();
      } else {
        setFilteredRows((java.lang.Long)value);
      }
      break;

    case ERROR_LOG_URL:
      if (value == null) {
        unsetErrorLogUrl();
      } else {
        setErrorLogUrl((java.lang.String)value);
      }
      break;

    case RECEIVED_BYTES:
      if (value == null) {
        unsetReceivedBytes();
      } else {
        setReceivedBytes((java.lang.Long)value);
      }
      break;

    case LOADED_BYTES:
      if (value == null) {
        unsetLoadedBytes();
      } else {
        setLoadedBytes((java.lang.Long)value);
      }
      break;

    case UNSELECTED_ROWS:
      if (value == null) {
        unsetUnselectedRows();
      } else {
        setUnselectedRows((java.lang.Long)value);
      }
      break;

    case PLAN_TIME:
      if (value == null) {
        unsetPlanTime();
      } else {
        setPlanTime((java.lang.Long)value);
      }
      break;

    case RECEIVE_DATA_TIME:
      if (value == null) {
        unsetReceiveDataTime();
      } else {
        setReceiveDataTime((java.lang.Long)value);
      }
      break;

    case BEGIN_TXN_TIME:
      if (value == null) {
        unsetBeginTxnTime();
      } else {
        setBeginTxnTime((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LOADED_ROWS:
      return getLoadedRows();

    case FILTERED_ROWS:
      return getFilteredRows();

    case ERROR_LOG_URL:
      return getErrorLogUrl();

    case RECEIVED_BYTES:
      return getReceivedBytes();

    case LOADED_BYTES:
      return getLoadedBytes();

    case UNSELECTED_ROWS:
      return getUnselectedRows();

    case PLAN_TIME:
      return getPlanTime();

    case RECEIVE_DATA_TIME:
      return getReceiveDataTime();

    case BEGIN_TXN_TIME:
      return getBeginTxnTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LOADED_ROWS:
      return isSetLoadedRows();
    case FILTERED_ROWS:
      return isSetFilteredRows();
    case ERROR_LOG_URL:
      return isSetErrorLogUrl();
    case RECEIVED_BYTES:
      return isSetReceivedBytes();
    case LOADED_BYTES:
      return isSetLoadedBytes();
    case UNSELECTED_ROWS:
      return isSetUnselectedRows();
    case PLAN_TIME:
      return isSetPlanTime();
    case RECEIVE_DATA_TIME:
      return isSetReceiveDataTime();
    case BEGIN_TXN_TIME:
      return isSetBeginTxnTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TManualLoadTxnCommitAttachment)
      return this.equals((TManualLoadTxnCommitAttachment)that);
    return false;
  }

  public boolean equals(TManualLoadTxnCommitAttachment that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_loadedRows = true && this.isSetLoadedRows();
    boolean that_present_loadedRows = true && that.isSetLoadedRows();
    if (this_present_loadedRows || that_present_loadedRows) {
      if (!(this_present_loadedRows && that_present_loadedRows))
        return false;
      if (this.loadedRows != that.loadedRows)
        return false;
    }

    boolean this_present_filteredRows = true && this.isSetFilteredRows();
    boolean that_present_filteredRows = true && that.isSetFilteredRows();
    if (this_present_filteredRows || that_present_filteredRows) {
      if (!(this_present_filteredRows && that_present_filteredRows))
        return false;
      if (this.filteredRows != that.filteredRows)
        return false;
    }

    boolean this_present_errorLogUrl = true && this.isSetErrorLogUrl();
    boolean that_present_errorLogUrl = true && that.isSetErrorLogUrl();
    if (this_present_errorLogUrl || that_present_errorLogUrl) {
      if (!(this_present_errorLogUrl && that_present_errorLogUrl))
        return false;
      if (!this.errorLogUrl.equals(that.errorLogUrl))
        return false;
    }

    boolean this_present_receivedBytes = true && this.isSetReceivedBytes();
    boolean that_present_receivedBytes = true && that.isSetReceivedBytes();
    if (this_present_receivedBytes || that_present_receivedBytes) {
      if (!(this_present_receivedBytes && that_present_receivedBytes))
        return false;
      if (this.receivedBytes != that.receivedBytes)
        return false;
    }

    boolean this_present_loadedBytes = true && this.isSetLoadedBytes();
    boolean that_present_loadedBytes = true && that.isSetLoadedBytes();
    if (this_present_loadedBytes || that_present_loadedBytes) {
      if (!(this_present_loadedBytes && that_present_loadedBytes))
        return false;
      if (this.loadedBytes != that.loadedBytes)
        return false;
    }

    boolean this_present_unselectedRows = true && this.isSetUnselectedRows();
    boolean that_present_unselectedRows = true && that.isSetUnselectedRows();
    if (this_present_unselectedRows || that_present_unselectedRows) {
      if (!(this_present_unselectedRows && that_present_unselectedRows))
        return false;
      if (this.unselectedRows != that.unselectedRows)
        return false;
    }

    boolean this_present_planTime = true && this.isSetPlanTime();
    boolean that_present_planTime = true && that.isSetPlanTime();
    if (this_present_planTime || that_present_planTime) {
      if (!(this_present_planTime && that_present_planTime))
        return false;
      if (this.planTime != that.planTime)
        return false;
    }

    boolean this_present_receiveDataTime = true && this.isSetReceiveDataTime();
    boolean that_present_receiveDataTime = true && that.isSetReceiveDataTime();
    if (this_present_receiveDataTime || that_present_receiveDataTime) {
      if (!(this_present_receiveDataTime && that_present_receiveDataTime))
        return false;
      if (this.receiveDataTime != that.receiveDataTime)
        return false;
    }

    boolean this_present_beginTxnTime = true && this.isSetBeginTxnTime();
    boolean that_present_beginTxnTime = true && that.isSetBeginTxnTime();
    if (this_present_beginTxnTime || that_present_beginTxnTime) {
      if (!(this_present_beginTxnTime && that_present_beginTxnTime))
        return false;
      if (this.beginTxnTime != that.beginTxnTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLoadedRows()) ? 131071 : 524287);
    if (isSetLoadedRows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loadedRows);

    hashCode = hashCode * 8191 + ((isSetFilteredRows()) ? 131071 : 524287);
    if (isSetFilteredRows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(filteredRows);

    hashCode = hashCode * 8191 + ((isSetErrorLogUrl()) ? 131071 : 524287);
    if (isSetErrorLogUrl())
      hashCode = hashCode * 8191 + errorLogUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetReceivedBytes()) ? 131071 : 524287);
    if (isSetReceivedBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(receivedBytes);

    hashCode = hashCode * 8191 + ((isSetLoadedBytes()) ? 131071 : 524287);
    if (isSetLoadedBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loadedBytes);

    hashCode = hashCode * 8191 + ((isSetUnselectedRows()) ? 131071 : 524287);
    if (isSetUnselectedRows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(unselectedRows);

    hashCode = hashCode * 8191 + ((isSetPlanTime()) ? 131071 : 524287);
    if (isSetPlanTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(planTime);

    hashCode = hashCode * 8191 + ((isSetReceiveDataTime()) ? 131071 : 524287);
    if (isSetReceiveDataTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(receiveDataTime);

    hashCode = hashCode * 8191 + ((isSetBeginTxnTime()) ? 131071 : 524287);
    if (isSetBeginTxnTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(beginTxnTime);

    return hashCode;
  }

  @Override
  public int compareTo(TManualLoadTxnCommitAttachment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLoadedRows(), other.isSetLoadedRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadedRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadedRows, other.loadedRows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFilteredRows(), other.isSetFilteredRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilteredRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filteredRows, other.filteredRows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetErrorLogUrl(), other.isSetErrorLogUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorLogUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorLogUrl, other.errorLogUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReceivedBytes(), other.isSetReceivedBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedBytes, other.receivedBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLoadedBytes(), other.isSetLoadedBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadedBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadedBytes, other.loadedBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUnselectedRows(), other.isSetUnselectedRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnselectedRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unselectedRows, other.unselectedRows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPlanTime(), other.isSetPlanTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planTime, other.planTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReceiveDataTime(), other.isSetReceiveDataTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveDataTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveDataTime, other.receiveDataTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBeginTxnTime(), other.isSetBeginTxnTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginTxnTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTxnTime, other.beginTxnTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TManualLoadTxnCommitAttachment(");
    boolean first = true;

    if (isSetLoadedRows()) {
      sb.append("loadedRows:");
      sb.append(this.loadedRows);
      first = false;
    }
    if (isSetFilteredRows()) {
      if (!first) sb.append(", ");
      sb.append("filteredRows:");
      sb.append(this.filteredRows);
      first = false;
    }
    if (isSetErrorLogUrl()) {
      if (!first) sb.append(", ");
      sb.append("errorLogUrl:");
      if (this.errorLogUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.errorLogUrl);
      }
      first = false;
    }
    if (isSetReceivedBytes()) {
      if (!first) sb.append(", ");
      sb.append("receivedBytes:");
      sb.append(this.receivedBytes);
      first = false;
    }
    if (isSetLoadedBytes()) {
      if (!first) sb.append(", ");
      sb.append("loadedBytes:");
      sb.append(this.loadedBytes);
      first = false;
    }
    if (isSetUnselectedRows()) {
      if (!first) sb.append(", ");
      sb.append("unselectedRows:");
      sb.append(this.unselectedRows);
      first = false;
    }
    if (isSetPlanTime()) {
      if (!first) sb.append(", ");
      sb.append("planTime:");
      sb.append(this.planTime);
      first = false;
    }
    if (isSetReceiveDataTime()) {
      if (!first) sb.append(", ");
      sb.append("receiveDataTime:");
      sb.append(this.receiveDataTime);
      first = false;
    }
    if (isSetBeginTxnTime()) {
      if (!first) sb.append(", ");
      sb.append("beginTxnTime:");
      sb.append(this.beginTxnTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TManualLoadTxnCommitAttachmentStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TManualLoadTxnCommitAttachmentStandardScheme getScheme() {
      return new TManualLoadTxnCommitAttachmentStandardScheme();
    }
  }

  private static class TManualLoadTxnCommitAttachmentStandardScheme extends org.apache.thrift.scheme.StandardScheme<TManualLoadTxnCommitAttachment> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TManualLoadTxnCommitAttachment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOADED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loadedRows = iprot.readI64();
              struct.setLoadedRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILTERED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.filteredRows = iprot.readI64();
              struct.setFilteredRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERROR_LOG_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorLogUrl = iprot.readString();
              struct.setErrorLogUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECEIVED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.receivedBytes = iprot.readI64();
              struct.setReceivedBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOADED_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loadedBytes = iprot.readI64();
              struct.setLoadedBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UNSELECTED_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.unselectedRows = iprot.readI64();
              struct.setUnselectedRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PLAN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.planTime = iprot.readI64();
              struct.setPlanTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RECEIVE_DATA_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.receiveDataTime = iprot.readI64();
              struct.setReceiveDataTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BEGIN_TXN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.beginTxnTime = iprot.readI64();
              struct.setBeginTxnTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TManualLoadTxnCommitAttachment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetLoadedRows()) {
        oprot.writeFieldBegin(LOADED_ROWS_FIELD_DESC);
        oprot.writeI64(struct.loadedRows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFilteredRows()) {
        oprot.writeFieldBegin(FILTERED_ROWS_FIELD_DESC);
        oprot.writeI64(struct.filteredRows);
        oprot.writeFieldEnd();
      }
      if (struct.errorLogUrl != null) {
        if (struct.isSetErrorLogUrl()) {
          oprot.writeFieldBegin(ERROR_LOG_URL_FIELD_DESC);
          oprot.writeString(struct.errorLogUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReceivedBytes()) {
        oprot.writeFieldBegin(RECEIVED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.receivedBytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLoadedBytes()) {
        oprot.writeFieldBegin(LOADED_BYTES_FIELD_DESC);
        oprot.writeI64(struct.loadedBytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUnselectedRows()) {
        oprot.writeFieldBegin(UNSELECTED_ROWS_FIELD_DESC);
        oprot.writeI64(struct.unselectedRows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPlanTime()) {
        oprot.writeFieldBegin(PLAN_TIME_FIELD_DESC);
        oprot.writeI64(struct.planTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReceiveDataTime()) {
        oprot.writeFieldBegin(RECEIVE_DATA_TIME_FIELD_DESC);
        oprot.writeI64(struct.receiveDataTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBeginTxnTime()) {
        oprot.writeFieldBegin(BEGIN_TXN_TIME_FIELD_DESC);
        oprot.writeI64(struct.beginTxnTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TManualLoadTxnCommitAttachmentTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TManualLoadTxnCommitAttachmentTupleScheme getScheme() {
      return new TManualLoadTxnCommitAttachmentTupleScheme();
    }
  }

  private static class TManualLoadTxnCommitAttachmentTupleScheme extends org.apache.thrift.scheme.TupleScheme<TManualLoadTxnCommitAttachment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TManualLoadTxnCommitAttachment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLoadedRows()) {
        optionals.set(0);
      }
      if (struct.isSetFilteredRows()) {
        optionals.set(1);
      }
      if (struct.isSetErrorLogUrl()) {
        optionals.set(2);
      }
      if (struct.isSetReceivedBytes()) {
        optionals.set(3);
      }
      if (struct.isSetLoadedBytes()) {
        optionals.set(4);
      }
      if (struct.isSetUnselectedRows()) {
        optionals.set(5);
      }
      if (struct.isSetPlanTime()) {
        optionals.set(6);
      }
      if (struct.isSetReceiveDataTime()) {
        optionals.set(7);
      }
      if (struct.isSetBeginTxnTime()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetLoadedRows()) {
        oprot.writeI64(struct.loadedRows);
      }
      if (struct.isSetFilteredRows()) {
        oprot.writeI64(struct.filteredRows);
      }
      if (struct.isSetErrorLogUrl()) {
        oprot.writeString(struct.errorLogUrl);
      }
      if (struct.isSetReceivedBytes()) {
        oprot.writeI64(struct.receivedBytes);
      }
      if (struct.isSetLoadedBytes()) {
        oprot.writeI64(struct.loadedBytes);
      }
      if (struct.isSetUnselectedRows()) {
        oprot.writeI64(struct.unselectedRows);
      }
      if (struct.isSetPlanTime()) {
        oprot.writeI64(struct.planTime);
      }
      if (struct.isSetReceiveDataTime()) {
        oprot.writeI64(struct.receiveDataTime);
      }
      if (struct.isSetBeginTxnTime()) {
        oprot.writeI64(struct.beginTxnTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TManualLoadTxnCommitAttachment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.loadedRows = iprot.readI64();
        struct.setLoadedRowsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.filteredRows = iprot.readI64();
        struct.setFilteredRowsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.errorLogUrl = iprot.readString();
        struct.setErrorLogUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.receivedBytes = iprot.readI64();
        struct.setReceivedBytesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.loadedBytes = iprot.readI64();
        struct.setLoadedBytesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.unselectedRows = iprot.readI64();
        struct.setUnselectedRowsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.planTime = iprot.readI64();
        struct.setPlanTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.receiveDataTime = iprot.readI64();
        struct.setReceiveDataTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.beginTxnTime = iprot.readI64();
        struct.setBeginTxnTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

