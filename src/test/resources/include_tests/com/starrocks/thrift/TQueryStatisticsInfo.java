/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TQueryStatisticsInfo implements org.apache.thrift.TBase<TQueryStatisticsInfo, TQueryStatisticsInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TQueryStatisticsInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQueryStatisticsInfo");

  private static final org.apache.thrift.protocol.TField QUERY_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("queryStartTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FE_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("feIp", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queryId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("connId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CPU_COST_NS_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuCostNs", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField SCAN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("scanBytes", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SCAN_ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("scanRows", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField MEM_USAGE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("memUsageBytes", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField SPILL_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("spillBytes", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField EXEC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("execTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField EXEC_PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("execProgress", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField WARE_HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("wareHouseName", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CUSTOM_QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("customQueryId", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField RESOURCE_GROUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceGroupName", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TQueryStatisticsInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TQueryStatisticsInfoTupleSchemeFactory();

  public long queryStartTime; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String feIp; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String queryId; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String connId; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String db; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String user; // optional
  public long cpuCostNs; // optional
  public long scanBytes; // optional
  public long scanRows; // optional
  public long memUsageBytes; // optional
  public long spillBytes; // optional
  public long execTime; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String execProgress; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String wareHouseName; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String customQueryId; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String resourceGroupName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QUERY_START_TIME((short)1, "queryStartTime"),
    FE_IP((short)2, "feIp"),
    QUERY_ID((short)3, "queryId"),
    CONN_ID((short)4, "connId"),
    DB((short)5, "db"),
    USER((short)6, "user"),
    CPU_COST_NS((short)7, "cpuCostNs"),
    SCAN_BYTES((short)8, "scanBytes"),
    SCAN_ROWS((short)9, "scanRows"),
    MEM_USAGE_BYTES((short)10, "memUsageBytes"),
    SPILL_BYTES((short)11, "spillBytes"),
    EXEC_TIME((short)12, "execTime"),
    EXEC_PROGRESS((short)13, "execProgress"),
    WARE_HOUSE_NAME((short)14, "wareHouseName"),
    CUSTOM_QUERY_ID((short)15, "customQueryId"),
    RESOURCE_GROUP_NAME((short)16, "resourceGroupName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QUERY_START_TIME
          return QUERY_START_TIME;
        case 2: // FE_IP
          return FE_IP;
        case 3: // QUERY_ID
          return QUERY_ID;
        case 4: // CONN_ID
          return CONN_ID;
        case 5: // DB
          return DB;
        case 6: // USER
          return USER;
        case 7: // CPU_COST_NS
          return CPU_COST_NS;
        case 8: // SCAN_BYTES
          return SCAN_BYTES;
        case 9: // SCAN_ROWS
          return SCAN_ROWS;
        case 10: // MEM_USAGE_BYTES
          return MEM_USAGE_BYTES;
        case 11: // SPILL_BYTES
          return SPILL_BYTES;
        case 12: // EXEC_TIME
          return EXEC_TIME;
        case 13: // EXEC_PROGRESS
          return EXEC_PROGRESS;
        case 14: // WARE_HOUSE_NAME
          return WARE_HOUSE_NAME;
        case 15: // CUSTOM_QUERY_ID
          return CUSTOM_QUERY_ID;
        case 16: // RESOURCE_GROUP_NAME
          return RESOURCE_GROUP_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUERYSTARTTIME_ISSET_ID = 0;
  private static final int __CPUCOSTNS_ISSET_ID = 1;
  private static final int __SCANBYTES_ISSET_ID = 2;
  private static final int __SCANROWS_ISSET_ID = 3;
  private static final int __MEMUSAGEBYTES_ISSET_ID = 4;
  private static final int __SPILLBYTES_ISSET_ID = 5;
  private static final int __EXECTIME_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.QUERY_START_TIME,_Fields.FE_IP,_Fields.QUERY_ID,_Fields.CONN_ID,_Fields.DB,_Fields.USER,_Fields.CPU_COST_NS,_Fields.SCAN_BYTES,_Fields.SCAN_ROWS,_Fields.MEM_USAGE_BYTES,_Fields.SPILL_BYTES,_Fields.EXEC_TIME,_Fields.EXEC_PROGRESS,_Fields.WARE_HOUSE_NAME,_Fields.CUSTOM_QUERY_ID,_Fields.RESOURCE_GROUP_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QUERY_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("queryStartTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FE_IP, new org.apache.thrift.meta_data.FieldMetaData("feIp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("queryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONN_ID, new org.apache.thrift.meta_data.FieldMetaData("connId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_COST_NS, new org.apache.thrift.meta_data.FieldMetaData("cpuCostNs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCAN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("scanBytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SCAN_ROWS, new org.apache.thrift.meta_data.FieldMetaData("scanRows", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEM_USAGE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("memUsageBytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPILL_BYTES, new org.apache.thrift.meta_data.FieldMetaData("spillBytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXEC_TIME, new org.apache.thrift.meta_data.FieldMetaData("execTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXEC_PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("execProgress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WARE_HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("wareHouseName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOM_QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("customQueryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_GROUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("resourceGroupName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQueryStatisticsInfo.class, metaDataMap);
  }

  public TQueryStatisticsInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryStatisticsInfo(TQueryStatisticsInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.queryStartTime = other.queryStartTime;
    if (other.isSetFeIp()) {
      this.feIp = other.feIp;
    }
    if (other.isSetQueryId()) {
      this.queryId = other.queryId;
    }
    if (other.isSetConnId()) {
      this.connId = other.connId;
    }
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    this.cpuCostNs = other.cpuCostNs;
    this.scanBytes = other.scanBytes;
    this.scanRows = other.scanRows;
    this.memUsageBytes = other.memUsageBytes;
    this.spillBytes = other.spillBytes;
    this.execTime = other.execTime;
    if (other.isSetExecProgress()) {
      this.execProgress = other.execProgress;
    }
    if (other.isSetWareHouseName()) {
      this.wareHouseName = other.wareHouseName;
    }
    if (other.isSetCustomQueryId()) {
      this.customQueryId = other.customQueryId;
    }
    if (other.isSetResourceGroupName()) {
      this.resourceGroupName = other.resourceGroupName;
    }
  }

  @Override
  public TQueryStatisticsInfo deepCopy() {
    return new TQueryStatisticsInfo(this);
  }

  @Override
  public void clear() {
    setQueryStartTimeIsSet(false);
    this.queryStartTime = 0;
    this.feIp = null;
    this.queryId = null;
    this.connId = null;
    this.db = null;
    this.user = null;
    setCpuCostNsIsSet(false);
    this.cpuCostNs = 0;
    setScanBytesIsSet(false);
    this.scanBytes = 0;
    setScanRowsIsSet(false);
    this.scanRows = 0;
    setMemUsageBytesIsSet(false);
    this.memUsageBytes = 0;
    setSpillBytesIsSet(false);
    this.spillBytes = 0;
    setExecTimeIsSet(false);
    this.execTime = 0;
    this.execProgress = null;
    this.wareHouseName = null;
    this.customQueryId = null;
    this.resourceGroupName = null;
  }

  public long getQueryStartTime() {
    return this.queryStartTime;
  }

  public TQueryStatisticsInfo setQueryStartTime(long queryStartTime) {
    this.queryStartTime = queryStartTime;
    setQueryStartTimeIsSet(true);
    return this;
  }

  public void unsetQueryStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUERYSTARTTIME_ISSET_ID);
  }

  /** Returns true if field queryStartTime is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUERYSTARTTIME_ISSET_ID);
  }

  public void setQueryStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUERYSTARTTIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFeIp() {
    return this.feIp;
  }

  public TQueryStatisticsInfo setFeIp(@org.apache.thrift.annotation.Nullable java.lang.String feIp) {
    this.feIp = feIp;
    return this;
  }

  public void unsetFeIp() {
    this.feIp = null;
  }

  /** Returns true if field feIp is set (has been assigned a value) and false otherwise */
  public boolean isSetFeIp() {
    return this.feIp != null;
  }

  public void setFeIpIsSet(boolean value) {
    if (!value) {
      this.feIp = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQueryId() {
    return this.queryId;
  }

  public TQueryStatisticsInfo setQueryId(@org.apache.thrift.annotation.Nullable java.lang.String queryId) {
    this.queryId = queryId;
    return this;
  }

  public void unsetQueryId() {
    this.queryId = null;
  }

  /** Returns true if field queryId is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryId() {
    return this.queryId != null;
  }

  public void setQueryIdIsSet(boolean value) {
    if (!value) {
      this.queryId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getConnId() {
    return this.connId;
  }

  public TQueryStatisticsInfo setConnId(@org.apache.thrift.annotation.Nullable java.lang.String connId) {
    this.connId = connId;
    return this;
  }

  public void unsetConnId() {
    this.connId = null;
  }

  /** Returns true if field connId is set (has been assigned a value) and false otherwise */
  public boolean isSetConnId() {
    return this.connId != null;
  }

  public void setConnIdIsSet(boolean value) {
    if (!value) {
      this.connId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb() {
    return this.db;
  }

  public TQueryStatisticsInfo setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser() {
    return this.user;
  }

  public TQueryStatisticsInfo setUser(@org.apache.thrift.annotation.Nullable java.lang.String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public long getCpuCostNs() {
    return this.cpuCostNs;
  }

  public TQueryStatisticsInfo setCpuCostNs(long cpuCostNs) {
    this.cpuCostNs = cpuCostNs;
    setCpuCostNsIsSet(true);
    return this;
  }

  public void unsetCpuCostNs() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CPUCOSTNS_ISSET_ID);
  }

  /** Returns true if field cpuCostNs is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuCostNs() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CPUCOSTNS_ISSET_ID);
  }

  public void setCpuCostNsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CPUCOSTNS_ISSET_ID, value);
  }

  public long getScanBytes() {
    return this.scanBytes;
  }

  public TQueryStatisticsInfo setScanBytes(long scanBytes) {
    this.scanBytes = scanBytes;
    setScanBytesIsSet(true);
    return this;
  }

  public void unsetScanBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCANBYTES_ISSET_ID);
  }

  /** Returns true if field scanBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetScanBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCANBYTES_ISSET_ID);
  }

  public void setScanBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCANBYTES_ISSET_ID, value);
  }

  public long getScanRows() {
    return this.scanRows;
  }

  public TQueryStatisticsInfo setScanRows(long scanRows) {
    this.scanRows = scanRows;
    setScanRowsIsSet(true);
    return this;
  }

  public void unsetScanRows() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCANROWS_ISSET_ID);
  }

  /** Returns true if field scanRows is set (has been assigned a value) and false otherwise */
  public boolean isSetScanRows() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCANROWS_ISSET_ID);
  }

  public void setScanRowsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCANROWS_ISSET_ID, value);
  }

  public long getMemUsageBytes() {
    return this.memUsageBytes;
  }

  public TQueryStatisticsInfo setMemUsageBytes(long memUsageBytes) {
    this.memUsageBytes = memUsageBytes;
    setMemUsageBytesIsSet(true);
    return this;
  }

  public void unsetMemUsageBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MEMUSAGEBYTES_ISSET_ID);
  }

  /** Returns true if field memUsageBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetMemUsageBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MEMUSAGEBYTES_ISSET_ID);
  }

  public void setMemUsageBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MEMUSAGEBYTES_ISSET_ID, value);
  }

  public long getSpillBytes() {
    return this.spillBytes;
  }

  public TQueryStatisticsInfo setSpillBytes(long spillBytes) {
    this.spillBytes = spillBytes;
    setSpillBytesIsSet(true);
    return this;
  }

  public void unsetSpillBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPILLBYTES_ISSET_ID);
  }

  /** Returns true if field spillBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSpillBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPILLBYTES_ISSET_ID);
  }

  public void setSpillBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPILLBYTES_ISSET_ID, value);
  }

  public long getExecTime() {
    return this.execTime;
  }

  public TQueryStatisticsInfo setExecTime(long execTime) {
    this.execTime = execTime;
    setExecTimeIsSet(true);
    return this;
  }

  public void unsetExecTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXECTIME_ISSET_ID);
  }

  /** Returns true if field execTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExecTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXECTIME_ISSET_ID);
  }

  public void setExecTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXECTIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExecProgress() {
    return this.execProgress;
  }

  public TQueryStatisticsInfo setExecProgress(@org.apache.thrift.annotation.Nullable java.lang.String execProgress) {
    this.execProgress = execProgress;
    return this;
  }

  public void unsetExecProgress() {
    this.execProgress = null;
  }

  /** Returns true if field execProgress is set (has been assigned a value) and false otherwise */
  public boolean isSetExecProgress() {
    return this.execProgress != null;
  }

  public void setExecProgressIsSet(boolean value) {
    if (!value) {
      this.execProgress = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWareHouseName() {
    return this.wareHouseName;
  }

  public TQueryStatisticsInfo setWareHouseName(@org.apache.thrift.annotation.Nullable java.lang.String wareHouseName) {
    this.wareHouseName = wareHouseName;
    return this;
  }

  public void unsetWareHouseName() {
    this.wareHouseName = null;
  }

  /** Returns true if field wareHouseName is set (has been assigned a value) and false otherwise */
  public boolean isSetWareHouseName() {
    return this.wareHouseName != null;
  }

  public void setWareHouseNameIsSet(boolean value) {
    if (!value) {
      this.wareHouseName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCustomQueryId() {
    return this.customQueryId;
  }

  public TQueryStatisticsInfo setCustomQueryId(@org.apache.thrift.annotation.Nullable java.lang.String customQueryId) {
    this.customQueryId = customQueryId;
    return this;
  }

  public void unsetCustomQueryId() {
    this.customQueryId = null;
  }

  /** Returns true if field customQueryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomQueryId() {
    return this.customQueryId != null;
  }

  public void setCustomQueryIdIsSet(boolean value) {
    if (!value) {
      this.customQueryId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getResourceGroupName() {
    return this.resourceGroupName;
  }

  public TQueryStatisticsInfo setResourceGroupName(@org.apache.thrift.annotation.Nullable java.lang.String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
    return this;
  }

  public void unsetResourceGroupName() {
    this.resourceGroupName = null;
  }

  /** Returns true if field resourceGroupName is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceGroupName() {
    return this.resourceGroupName != null;
  }

  public void setResourceGroupNameIsSet(boolean value) {
    if (!value) {
      this.resourceGroupName = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case QUERY_START_TIME:
      if (value == null) {
        unsetQueryStartTime();
      } else {
        setQueryStartTime((java.lang.Long)value);
      }
      break;

    case FE_IP:
      if (value == null) {
        unsetFeIp();
      } else {
        setFeIp((java.lang.String)value);
      }
      break;

    case QUERY_ID:
      if (value == null) {
        unsetQueryId();
      } else {
        setQueryId((java.lang.String)value);
      }
      break;

    case CONN_ID:
      if (value == null) {
        unsetConnId();
      } else {
        setConnId((java.lang.String)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((java.lang.String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((java.lang.String)value);
      }
      break;

    case CPU_COST_NS:
      if (value == null) {
        unsetCpuCostNs();
      } else {
        setCpuCostNs((java.lang.Long)value);
      }
      break;

    case SCAN_BYTES:
      if (value == null) {
        unsetScanBytes();
      } else {
        setScanBytes((java.lang.Long)value);
      }
      break;

    case SCAN_ROWS:
      if (value == null) {
        unsetScanRows();
      } else {
        setScanRows((java.lang.Long)value);
      }
      break;

    case MEM_USAGE_BYTES:
      if (value == null) {
        unsetMemUsageBytes();
      } else {
        setMemUsageBytes((java.lang.Long)value);
      }
      break;

    case SPILL_BYTES:
      if (value == null) {
        unsetSpillBytes();
      } else {
        setSpillBytes((java.lang.Long)value);
      }
      break;

    case EXEC_TIME:
      if (value == null) {
        unsetExecTime();
      } else {
        setExecTime((java.lang.Long)value);
      }
      break;

    case EXEC_PROGRESS:
      if (value == null) {
        unsetExecProgress();
      } else {
        setExecProgress((java.lang.String)value);
      }
      break;

    case WARE_HOUSE_NAME:
      if (value == null) {
        unsetWareHouseName();
      } else {
        setWareHouseName((java.lang.String)value);
      }
      break;

    case CUSTOM_QUERY_ID:
      if (value == null) {
        unsetCustomQueryId();
      } else {
        setCustomQueryId((java.lang.String)value);
      }
      break;

    case RESOURCE_GROUP_NAME:
      if (value == null) {
        unsetResourceGroupName();
      } else {
        setResourceGroupName((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case QUERY_START_TIME:
      return getQueryStartTime();

    case FE_IP:
      return getFeIp();

    case QUERY_ID:
      return getQueryId();

    case CONN_ID:
      return getConnId();

    case DB:
      return getDb();

    case USER:
      return getUser();

    case CPU_COST_NS:
      return getCpuCostNs();

    case SCAN_BYTES:
      return getScanBytes();

    case SCAN_ROWS:
      return getScanRows();

    case MEM_USAGE_BYTES:
      return getMemUsageBytes();

    case SPILL_BYTES:
      return getSpillBytes();

    case EXEC_TIME:
      return getExecTime();

    case EXEC_PROGRESS:
      return getExecProgress();

    case WARE_HOUSE_NAME:
      return getWareHouseName();

    case CUSTOM_QUERY_ID:
      return getCustomQueryId();

    case RESOURCE_GROUP_NAME:
      return getResourceGroupName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case QUERY_START_TIME:
      return isSetQueryStartTime();
    case FE_IP:
      return isSetFeIp();
    case QUERY_ID:
      return isSetQueryId();
    case CONN_ID:
      return isSetConnId();
    case DB:
      return isSetDb();
    case USER:
      return isSetUser();
    case CPU_COST_NS:
      return isSetCpuCostNs();
    case SCAN_BYTES:
      return isSetScanBytes();
    case SCAN_ROWS:
      return isSetScanRows();
    case MEM_USAGE_BYTES:
      return isSetMemUsageBytes();
    case SPILL_BYTES:
      return isSetSpillBytes();
    case EXEC_TIME:
      return isSetExecTime();
    case EXEC_PROGRESS:
      return isSetExecProgress();
    case WARE_HOUSE_NAME:
      return isSetWareHouseName();
    case CUSTOM_QUERY_ID:
      return isSetCustomQueryId();
    case RESOURCE_GROUP_NAME:
      return isSetResourceGroupName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TQueryStatisticsInfo)
      return this.equals((TQueryStatisticsInfo)that);
    return false;
  }

  public boolean equals(TQueryStatisticsInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_queryStartTime = true && this.isSetQueryStartTime();
    boolean that_present_queryStartTime = true && that.isSetQueryStartTime();
    if (this_present_queryStartTime || that_present_queryStartTime) {
      if (!(this_present_queryStartTime && that_present_queryStartTime))
        return false;
      if (this.queryStartTime != that.queryStartTime)
        return false;
    }

    boolean this_present_feIp = true && this.isSetFeIp();
    boolean that_present_feIp = true && that.isSetFeIp();
    if (this_present_feIp || that_present_feIp) {
      if (!(this_present_feIp && that_present_feIp))
        return false;
      if (!this.feIp.equals(that.feIp))
        return false;
    }

    boolean this_present_queryId = true && this.isSetQueryId();
    boolean that_present_queryId = true && that.isSetQueryId();
    if (this_present_queryId || that_present_queryId) {
      if (!(this_present_queryId && that_present_queryId))
        return false;
      if (!this.queryId.equals(that.queryId))
        return false;
    }

    boolean this_present_connId = true && this.isSetConnId();
    boolean that_present_connId = true && that.isSetConnId();
    if (this_present_connId || that_present_connId) {
      if (!(this_present_connId && that_present_connId))
        return false;
      if (!this.connId.equals(that.connId))
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_cpuCostNs = true && this.isSetCpuCostNs();
    boolean that_present_cpuCostNs = true && that.isSetCpuCostNs();
    if (this_present_cpuCostNs || that_present_cpuCostNs) {
      if (!(this_present_cpuCostNs && that_present_cpuCostNs))
        return false;
      if (this.cpuCostNs != that.cpuCostNs)
        return false;
    }

    boolean this_present_scanBytes = true && this.isSetScanBytes();
    boolean that_present_scanBytes = true && that.isSetScanBytes();
    if (this_present_scanBytes || that_present_scanBytes) {
      if (!(this_present_scanBytes && that_present_scanBytes))
        return false;
      if (this.scanBytes != that.scanBytes)
        return false;
    }

    boolean this_present_scanRows = true && this.isSetScanRows();
    boolean that_present_scanRows = true && that.isSetScanRows();
    if (this_present_scanRows || that_present_scanRows) {
      if (!(this_present_scanRows && that_present_scanRows))
        return false;
      if (this.scanRows != that.scanRows)
        return false;
    }

    boolean this_present_memUsageBytes = true && this.isSetMemUsageBytes();
    boolean that_present_memUsageBytes = true && that.isSetMemUsageBytes();
    if (this_present_memUsageBytes || that_present_memUsageBytes) {
      if (!(this_present_memUsageBytes && that_present_memUsageBytes))
        return false;
      if (this.memUsageBytes != that.memUsageBytes)
        return false;
    }

    boolean this_present_spillBytes = true && this.isSetSpillBytes();
    boolean that_present_spillBytes = true && that.isSetSpillBytes();
    if (this_present_spillBytes || that_present_spillBytes) {
      if (!(this_present_spillBytes && that_present_spillBytes))
        return false;
      if (this.spillBytes != that.spillBytes)
        return false;
    }

    boolean this_present_execTime = true && this.isSetExecTime();
    boolean that_present_execTime = true && that.isSetExecTime();
    if (this_present_execTime || that_present_execTime) {
      if (!(this_present_execTime && that_present_execTime))
        return false;
      if (this.execTime != that.execTime)
        return false;
    }

    boolean this_present_execProgress = true && this.isSetExecProgress();
    boolean that_present_execProgress = true && that.isSetExecProgress();
    if (this_present_execProgress || that_present_execProgress) {
      if (!(this_present_execProgress && that_present_execProgress))
        return false;
      if (!this.execProgress.equals(that.execProgress))
        return false;
    }

    boolean this_present_wareHouseName = true && this.isSetWareHouseName();
    boolean that_present_wareHouseName = true && that.isSetWareHouseName();
    if (this_present_wareHouseName || that_present_wareHouseName) {
      if (!(this_present_wareHouseName && that_present_wareHouseName))
        return false;
      if (!this.wareHouseName.equals(that.wareHouseName))
        return false;
    }

    boolean this_present_customQueryId = true && this.isSetCustomQueryId();
    boolean that_present_customQueryId = true && that.isSetCustomQueryId();
    if (this_present_customQueryId || that_present_customQueryId) {
      if (!(this_present_customQueryId && that_present_customQueryId))
        return false;
      if (!this.customQueryId.equals(that.customQueryId))
        return false;
    }

    boolean this_present_resourceGroupName = true && this.isSetResourceGroupName();
    boolean that_present_resourceGroupName = true && that.isSetResourceGroupName();
    if (this_present_resourceGroupName || that_present_resourceGroupName) {
      if (!(this_present_resourceGroupName && that_present_resourceGroupName))
        return false;
      if (!this.resourceGroupName.equals(that.resourceGroupName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetQueryStartTime()) ? 131071 : 524287);
    if (isSetQueryStartTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(queryStartTime);

    hashCode = hashCode * 8191 + ((isSetFeIp()) ? 131071 : 524287);
    if (isSetFeIp())
      hashCode = hashCode * 8191 + feIp.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueryId()) ? 131071 : 524287);
    if (isSetQueryId())
      hashCode = hashCode * 8191 + queryId.hashCode();

    hashCode = hashCode * 8191 + ((isSetConnId()) ? 131071 : 524287);
    if (isSetConnId())
      hashCode = hashCode * 8191 + connId.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
    if (isSetDb())
      hashCode = hashCode * 8191 + db.hashCode();

    hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
    if (isSetUser())
      hashCode = hashCode * 8191 + user.hashCode();

    hashCode = hashCode * 8191 + ((isSetCpuCostNs()) ? 131071 : 524287);
    if (isSetCpuCostNs())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(cpuCostNs);

    hashCode = hashCode * 8191 + ((isSetScanBytes()) ? 131071 : 524287);
    if (isSetScanBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scanBytes);

    hashCode = hashCode * 8191 + ((isSetScanRows()) ? 131071 : 524287);
    if (isSetScanRows())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(scanRows);

    hashCode = hashCode * 8191 + ((isSetMemUsageBytes()) ? 131071 : 524287);
    if (isSetMemUsageBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(memUsageBytes);

    hashCode = hashCode * 8191 + ((isSetSpillBytes()) ? 131071 : 524287);
    if (isSetSpillBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(spillBytes);

    hashCode = hashCode * 8191 + ((isSetExecTime()) ? 131071 : 524287);
    if (isSetExecTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(execTime);

    hashCode = hashCode * 8191 + ((isSetExecProgress()) ? 131071 : 524287);
    if (isSetExecProgress())
      hashCode = hashCode * 8191 + execProgress.hashCode();

    hashCode = hashCode * 8191 + ((isSetWareHouseName()) ? 131071 : 524287);
    if (isSetWareHouseName())
      hashCode = hashCode * 8191 + wareHouseName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCustomQueryId()) ? 131071 : 524287);
    if (isSetCustomQueryId())
      hashCode = hashCode * 8191 + customQueryId.hashCode();

    hashCode = hashCode * 8191 + ((isSetResourceGroupName()) ? 131071 : 524287);
    if (isSetResourceGroupName())
      hashCode = hashCode * 8191 + resourceGroupName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TQueryStatisticsInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetQueryStartTime(), other.isSetQueryStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryStartTime, other.queryStartTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFeIp(), other.isSetFeIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feIp, other.feIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueryId(), other.isSetQueryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryId, other.queryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConnId(), other.isSetConnId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connId, other.connId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb(), other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUser(), other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCpuCostNs(), other.isSetCpuCostNs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuCostNs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuCostNs, other.cpuCostNs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetScanBytes(), other.isSetScanBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScanBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanBytes, other.scanBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetScanRows(), other.isSetScanRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScanRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scanRows, other.scanRows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMemUsageBytes(), other.isSetMemUsageBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemUsageBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memUsageBytes, other.memUsageBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSpillBytes(), other.isSetSpillBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpillBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spillBytes, other.spillBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExecTime(), other.isSetExecTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execTime, other.execTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExecProgress(), other.isSetExecProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execProgress, other.execProgress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWareHouseName(), other.isSetWareHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWareHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wareHouseName, other.wareHouseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCustomQueryId(), other.isSetCustomQueryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomQueryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customQueryId, other.customQueryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResourceGroupName(), other.isSetResourceGroupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceGroupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceGroupName, other.resourceGroupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TQueryStatisticsInfo(");
    boolean first = true;

    if (isSetQueryStartTime()) {
      sb.append("queryStartTime:");
      sb.append(this.queryStartTime);
      first = false;
    }
    if (isSetFeIp()) {
      if (!first) sb.append(", ");
      sb.append("feIp:");
      if (this.feIp == null) {
        sb.append("null");
      } else {
        sb.append(this.feIp);
      }
      first = false;
    }
    if (isSetQueryId()) {
      if (!first) sb.append(", ");
      sb.append("queryId:");
      if (this.queryId == null) {
        sb.append("null");
      } else {
        sb.append(this.queryId);
      }
      first = false;
    }
    if (isSetConnId()) {
      if (!first) sb.append(", ");
      sb.append("connId:");
      if (this.connId == null) {
        sb.append("null");
      } else {
        sb.append(this.connId);
      }
      first = false;
    }
    if (isSetDb()) {
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
    }
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    if (isSetCpuCostNs()) {
      if (!first) sb.append(", ");
      sb.append("cpuCostNs:");
      sb.append(this.cpuCostNs);
      first = false;
    }
    if (isSetScanBytes()) {
      if (!first) sb.append(", ");
      sb.append("scanBytes:");
      sb.append(this.scanBytes);
      first = false;
    }
    if (isSetScanRows()) {
      if (!first) sb.append(", ");
      sb.append("scanRows:");
      sb.append(this.scanRows);
      first = false;
    }
    if (isSetMemUsageBytes()) {
      if (!first) sb.append(", ");
      sb.append("memUsageBytes:");
      sb.append(this.memUsageBytes);
      first = false;
    }
    if (isSetSpillBytes()) {
      if (!first) sb.append(", ");
      sb.append("spillBytes:");
      sb.append(this.spillBytes);
      first = false;
    }
    if (isSetExecTime()) {
      if (!first) sb.append(", ");
      sb.append("execTime:");
      sb.append(this.execTime);
      first = false;
    }
    if (isSetExecProgress()) {
      if (!first) sb.append(", ");
      sb.append("execProgress:");
      if (this.execProgress == null) {
        sb.append("null");
      } else {
        sb.append(this.execProgress);
      }
      first = false;
    }
    if (isSetWareHouseName()) {
      if (!first) sb.append(", ");
      sb.append("wareHouseName:");
      if (this.wareHouseName == null) {
        sb.append("null");
      } else {
        sb.append(this.wareHouseName);
      }
      first = false;
    }
    if (isSetCustomQueryId()) {
      if (!first) sb.append(", ");
      sb.append("customQueryId:");
      if (this.customQueryId == null) {
        sb.append("null");
      } else {
        sb.append(this.customQueryId);
      }
      first = false;
    }
    if (isSetResourceGroupName()) {
      if (!first) sb.append(", ");
      sb.append("resourceGroupName:");
      if (this.resourceGroupName == null) {
        sb.append("null");
      } else {
        sb.append(this.resourceGroupName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQueryStatisticsInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TQueryStatisticsInfoStandardScheme getScheme() {
      return new TQueryStatisticsInfoStandardScheme();
    }
  }

  private static class TQueryStatisticsInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TQueryStatisticsInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TQueryStatisticsInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QUERY_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.queryStartTime = iprot.readI64();
              struct.setQueryStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FE_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feIp = iprot.readString();
              struct.setFeIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryId = iprot.readString();
              struct.setQueryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.connId = iprot.readString();
              struct.setConnIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CPU_COST_NS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cpuCostNs = iprot.readI64();
              struct.setCpuCostNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SCAN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scanBytes = iprot.readI64();
              struct.setScanBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SCAN_ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.scanRows = iprot.readI64();
              struct.setScanRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MEM_USAGE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.memUsageBytes = iprot.readI64();
              struct.setMemUsageBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SPILL_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.spillBytes = iprot.readI64();
              struct.setSpillBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXEC_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execTime = iprot.readI64();
              struct.setExecTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EXEC_PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.execProgress = iprot.readString();
              struct.setExecProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // WARE_HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wareHouseName = iprot.readString();
              struct.setWareHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CUSTOM_QUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customQueryId = iprot.readString();
              struct.setCustomQueryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RESOURCE_GROUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceGroupName = iprot.readString();
              struct.setResourceGroupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TQueryStatisticsInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetQueryStartTime()) {
        oprot.writeFieldBegin(QUERY_START_TIME_FIELD_DESC);
        oprot.writeI64(struct.queryStartTime);
        oprot.writeFieldEnd();
      }
      if (struct.feIp != null) {
        if (struct.isSetFeIp()) {
          oprot.writeFieldBegin(FE_IP_FIELD_DESC);
          oprot.writeString(struct.feIp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.queryId != null) {
        if (struct.isSetQueryId()) {
          oprot.writeFieldBegin(QUERY_ID_FIELD_DESC);
          oprot.writeString(struct.queryId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.connId != null) {
        if (struct.isSetConnId()) {
          oprot.writeFieldBegin(CONN_ID_FIELD_DESC);
          oprot.writeString(struct.connId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db != null) {
        if (struct.isSetDb()) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCpuCostNs()) {
        oprot.writeFieldBegin(CPU_COST_NS_FIELD_DESC);
        oprot.writeI64(struct.cpuCostNs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetScanBytes()) {
        oprot.writeFieldBegin(SCAN_BYTES_FIELD_DESC);
        oprot.writeI64(struct.scanBytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetScanRows()) {
        oprot.writeFieldBegin(SCAN_ROWS_FIELD_DESC);
        oprot.writeI64(struct.scanRows);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMemUsageBytes()) {
        oprot.writeFieldBegin(MEM_USAGE_BYTES_FIELD_DESC);
        oprot.writeI64(struct.memUsageBytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpillBytes()) {
        oprot.writeFieldBegin(SPILL_BYTES_FIELD_DESC);
        oprot.writeI64(struct.spillBytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExecTime()) {
        oprot.writeFieldBegin(EXEC_TIME_FIELD_DESC);
        oprot.writeI64(struct.execTime);
        oprot.writeFieldEnd();
      }
      if (struct.execProgress != null) {
        if (struct.isSetExecProgress()) {
          oprot.writeFieldBegin(EXEC_PROGRESS_FIELD_DESC);
          oprot.writeString(struct.execProgress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wareHouseName != null) {
        if (struct.isSetWareHouseName()) {
          oprot.writeFieldBegin(WARE_HOUSE_NAME_FIELD_DESC);
          oprot.writeString(struct.wareHouseName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.customQueryId != null) {
        if (struct.isSetCustomQueryId()) {
          oprot.writeFieldBegin(CUSTOM_QUERY_ID_FIELD_DESC);
          oprot.writeString(struct.customQueryId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.resourceGroupName != null) {
        if (struct.isSetResourceGroupName()) {
          oprot.writeFieldBegin(RESOURCE_GROUP_NAME_FIELD_DESC);
          oprot.writeString(struct.resourceGroupName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQueryStatisticsInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TQueryStatisticsInfoTupleScheme getScheme() {
      return new TQueryStatisticsInfoTupleScheme();
    }
  }

  private static class TQueryStatisticsInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TQueryStatisticsInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQueryStatisticsInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetQueryStartTime()) {
        optionals.set(0);
      }
      if (struct.isSetFeIp()) {
        optionals.set(1);
      }
      if (struct.isSetQueryId()) {
        optionals.set(2);
      }
      if (struct.isSetConnId()) {
        optionals.set(3);
      }
      if (struct.isSetDb()) {
        optionals.set(4);
      }
      if (struct.isSetUser()) {
        optionals.set(5);
      }
      if (struct.isSetCpuCostNs()) {
        optionals.set(6);
      }
      if (struct.isSetScanBytes()) {
        optionals.set(7);
      }
      if (struct.isSetScanRows()) {
        optionals.set(8);
      }
      if (struct.isSetMemUsageBytes()) {
        optionals.set(9);
      }
      if (struct.isSetSpillBytes()) {
        optionals.set(10);
      }
      if (struct.isSetExecTime()) {
        optionals.set(11);
      }
      if (struct.isSetExecProgress()) {
        optionals.set(12);
      }
      if (struct.isSetWareHouseName()) {
        optionals.set(13);
      }
      if (struct.isSetCustomQueryId()) {
        optionals.set(14);
      }
      if (struct.isSetResourceGroupName()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetQueryStartTime()) {
        oprot.writeI64(struct.queryStartTime);
      }
      if (struct.isSetFeIp()) {
        oprot.writeString(struct.feIp);
      }
      if (struct.isSetQueryId()) {
        oprot.writeString(struct.queryId);
      }
      if (struct.isSetConnId()) {
        oprot.writeString(struct.connId);
      }
      if (struct.isSetDb()) {
        oprot.writeString(struct.db);
      }
      if (struct.isSetUser()) {
        oprot.writeString(struct.user);
      }
      if (struct.isSetCpuCostNs()) {
        oprot.writeI64(struct.cpuCostNs);
      }
      if (struct.isSetScanBytes()) {
        oprot.writeI64(struct.scanBytes);
      }
      if (struct.isSetScanRows()) {
        oprot.writeI64(struct.scanRows);
      }
      if (struct.isSetMemUsageBytes()) {
        oprot.writeI64(struct.memUsageBytes);
      }
      if (struct.isSetSpillBytes()) {
        oprot.writeI64(struct.spillBytes);
      }
      if (struct.isSetExecTime()) {
        oprot.writeI64(struct.execTime);
      }
      if (struct.isSetExecProgress()) {
        oprot.writeString(struct.execProgress);
      }
      if (struct.isSetWareHouseName()) {
        oprot.writeString(struct.wareHouseName);
      }
      if (struct.isSetCustomQueryId()) {
        oprot.writeString(struct.customQueryId);
      }
      if (struct.isSetResourceGroupName()) {
        oprot.writeString(struct.resourceGroupName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQueryStatisticsInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.queryStartTime = iprot.readI64();
        struct.setQueryStartTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.feIp = iprot.readString();
        struct.setFeIpIsSet(true);
      }
      if (incoming.get(2)) {
        struct.queryId = iprot.readString();
        struct.setQueryIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.connId = iprot.readString();
        struct.setConnIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.db = iprot.readString();
        struct.setDbIsSet(true);
      }
      if (incoming.get(5)) {
        struct.user = iprot.readString();
        struct.setUserIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cpuCostNs = iprot.readI64();
        struct.setCpuCostNsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.scanBytes = iprot.readI64();
        struct.setScanBytesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.scanRows = iprot.readI64();
        struct.setScanRowsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.memUsageBytes = iprot.readI64();
        struct.setMemUsageBytesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.spillBytes = iprot.readI64();
        struct.setSpillBytesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.execTime = iprot.readI64();
        struct.setExecTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.execProgress = iprot.readString();
        struct.setExecProgressIsSet(true);
      }
      if (incoming.get(13)) {
        struct.wareHouseName = iprot.readString();
        struct.setWareHouseNameIsSet(true);
      }
      if (incoming.get(14)) {
        struct.customQueryId = iprot.readString();
        struct.setCustomQueryIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.resourceGroupName = iprot.readString();
        struct.setResourceGroupNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

