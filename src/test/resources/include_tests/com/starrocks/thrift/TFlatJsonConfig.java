/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TFlatJsonConfig implements org.apache.thrift.TBase<TFlatJsonConfig, TFlatJsonConfig._Fields>, java.io.Serializable, Cloneable, Comparable<TFlatJsonConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TFlatJsonConfig");

  private static final org.apache.thrift.protocol.TField FLAT_JSON_ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("flat_json_enable", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField FLAT_JSON_NULL_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("flat_json_null_factor", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField FLAT_JSON_SPARSITY_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("flat_json_sparsity_factor", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField FLAT_JSON_COLUMN_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("flat_json_column_max", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TFlatJsonConfigStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TFlatJsonConfigTupleSchemeFactory();

  public boolean flat_json_enable; // optional
  public double flat_json_null_factor; // optional
  public double flat_json_sparsity_factor; // optional
  public long flat_json_column_max; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FLAT_JSON_ENABLE((short)1, "flat_json_enable"),
    FLAT_JSON_NULL_FACTOR((short)2, "flat_json_null_factor"),
    FLAT_JSON_SPARSITY_FACTOR((short)3, "flat_json_sparsity_factor"),
    FLAT_JSON_COLUMN_MAX((short)4, "flat_json_column_max");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FLAT_JSON_ENABLE
          return FLAT_JSON_ENABLE;
        case 2: // FLAT_JSON_NULL_FACTOR
          return FLAT_JSON_NULL_FACTOR;
        case 3: // FLAT_JSON_SPARSITY_FACTOR
          return FLAT_JSON_SPARSITY_FACTOR;
        case 4: // FLAT_JSON_COLUMN_MAX
          return FLAT_JSON_COLUMN_MAX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FLAT_JSON_ENABLE_ISSET_ID = 0;
  private static final int __FLAT_JSON_NULL_FACTOR_ISSET_ID = 1;
  private static final int __FLAT_JSON_SPARSITY_FACTOR_ISSET_ID = 2;
  private static final int __FLAT_JSON_COLUMN_MAX_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.FLAT_JSON_ENABLE,_Fields.FLAT_JSON_NULL_FACTOR,_Fields.FLAT_JSON_SPARSITY_FACTOR,_Fields.FLAT_JSON_COLUMN_MAX};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FLAT_JSON_ENABLE, new org.apache.thrift.meta_data.FieldMetaData("flat_json_enable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FLAT_JSON_NULL_FACTOR, new org.apache.thrift.meta_data.FieldMetaData("flat_json_null_factor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FLAT_JSON_SPARSITY_FACTOR, new org.apache.thrift.meta_data.FieldMetaData("flat_json_sparsity_factor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FLAT_JSON_COLUMN_MAX, new org.apache.thrift.meta_data.FieldMetaData("flat_json_column_max", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TFlatJsonConfig.class, metaDataMap);
  }

  public TFlatJsonConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TFlatJsonConfig(TFlatJsonConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.flat_json_enable = other.flat_json_enable;
    this.flat_json_null_factor = other.flat_json_null_factor;
    this.flat_json_sparsity_factor = other.flat_json_sparsity_factor;
    this.flat_json_column_max = other.flat_json_column_max;
  }

  @Override
  public TFlatJsonConfig deepCopy() {
    return new TFlatJsonConfig(this);
  }

  @Override
  public void clear() {
    setFlat_json_enableIsSet(false);
    this.flat_json_enable = false;
    setFlat_json_null_factorIsSet(false);
    this.flat_json_null_factor = 0.0;
    setFlat_json_sparsity_factorIsSet(false);
    this.flat_json_sparsity_factor = 0.0;
    setFlat_json_column_maxIsSet(false);
    this.flat_json_column_max = 0;
  }

  public boolean isFlat_json_enable() {
    return this.flat_json_enable;
  }

  public TFlatJsonConfig setFlat_json_enable(boolean flat_json_enable) {
    this.flat_json_enable = flat_json_enable;
    setFlat_json_enableIsSet(true);
    return this;
  }

  public void unsetFlat_json_enable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAT_JSON_ENABLE_ISSET_ID);
  }

  /** Returns true if field flat_json_enable is set (has been assigned a value) and false otherwise */
  public boolean isSetFlat_json_enable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAT_JSON_ENABLE_ISSET_ID);
  }

  public void setFlat_json_enableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAT_JSON_ENABLE_ISSET_ID, value);
  }

  public double getFlat_json_null_factor() {
    return this.flat_json_null_factor;
  }

  public TFlatJsonConfig setFlat_json_null_factor(double flat_json_null_factor) {
    this.flat_json_null_factor = flat_json_null_factor;
    setFlat_json_null_factorIsSet(true);
    return this;
  }

  public void unsetFlat_json_null_factor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAT_JSON_NULL_FACTOR_ISSET_ID);
  }

  /** Returns true if field flat_json_null_factor is set (has been assigned a value) and false otherwise */
  public boolean isSetFlat_json_null_factor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAT_JSON_NULL_FACTOR_ISSET_ID);
  }

  public void setFlat_json_null_factorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAT_JSON_NULL_FACTOR_ISSET_ID, value);
  }

  public double getFlat_json_sparsity_factor() {
    return this.flat_json_sparsity_factor;
  }

  public TFlatJsonConfig setFlat_json_sparsity_factor(double flat_json_sparsity_factor) {
    this.flat_json_sparsity_factor = flat_json_sparsity_factor;
    setFlat_json_sparsity_factorIsSet(true);
    return this;
  }

  public void unsetFlat_json_sparsity_factor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAT_JSON_SPARSITY_FACTOR_ISSET_ID);
  }

  /** Returns true if field flat_json_sparsity_factor is set (has been assigned a value) and false otherwise */
  public boolean isSetFlat_json_sparsity_factor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAT_JSON_SPARSITY_FACTOR_ISSET_ID);
  }

  public void setFlat_json_sparsity_factorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAT_JSON_SPARSITY_FACTOR_ISSET_ID, value);
  }

  public long getFlat_json_column_max() {
    return this.flat_json_column_max;
  }

  public TFlatJsonConfig setFlat_json_column_max(long flat_json_column_max) {
    this.flat_json_column_max = flat_json_column_max;
    setFlat_json_column_maxIsSet(true);
    return this;
  }

  public void unsetFlat_json_column_max() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAT_JSON_COLUMN_MAX_ISSET_ID);
  }

  /** Returns true if field flat_json_column_max is set (has been assigned a value) and false otherwise */
  public boolean isSetFlat_json_column_max() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAT_JSON_COLUMN_MAX_ISSET_ID);
  }

  public void setFlat_json_column_maxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAT_JSON_COLUMN_MAX_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FLAT_JSON_ENABLE:
      if (value == null) {
        unsetFlat_json_enable();
      } else {
        setFlat_json_enable((java.lang.Boolean)value);
      }
      break;

    case FLAT_JSON_NULL_FACTOR:
      if (value == null) {
        unsetFlat_json_null_factor();
      } else {
        setFlat_json_null_factor((java.lang.Double)value);
      }
      break;

    case FLAT_JSON_SPARSITY_FACTOR:
      if (value == null) {
        unsetFlat_json_sparsity_factor();
      } else {
        setFlat_json_sparsity_factor((java.lang.Double)value);
      }
      break;

    case FLAT_JSON_COLUMN_MAX:
      if (value == null) {
        unsetFlat_json_column_max();
      } else {
        setFlat_json_column_max((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FLAT_JSON_ENABLE:
      return isFlat_json_enable();

    case FLAT_JSON_NULL_FACTOR:
      return getFlat_json_null_factor();

    case FLAT_JSON_SPARSITY_FACTOR:
      return getFlat_json_sparsity_factor();

    case FLAT_JSON_COLUMN_MAX:
      return getFlat_json_column_max();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FLAT_JSON_ENABLE:
      return isSetFlat_json_enable();
    case FLAT_JSON_NULL_FACTOR:
      return isSetFlat_json_null_factor();
    case FLAT_JSON_SPARSITY_FACTOR:
      return isSetFlat_json_sparsity_factor();
    case FLAT_JSON_COLUMN_MAX:
      return isSetFlat_json_column_max();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TFlatJsonConfig)
      return this.equals((TFlatJsonConfig)that);
    return false;
  }

  public boolean equals(TFlatJsonConfig that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_flat_json_enable = true && this.isSetFlat_json_enable();
    boolean that_present_flat_json_enable = true && that.isSetFlat_json_enable();
    if (this_present_flat_json_enable || that_present_flat_json_enable) {
      if (!(this_present_flat_json_enable && that_present_flat_json_enable))
        return false;
      if (this.flat_json_enable != that.flat_json_enable)
        return false;
    }

    boolean this_present_flat_json_null_factor = true && this.isSetFlat_json_null_factor();
    boolean that_present_flat_json_null_factor = true && that.isSetFlat_json_null_factor();
    if (this_present_flat_json_null_factor || that_present_flat_json_null_factor) {
      if (!(this_present_flat_json_null_factor && that_present_flat_json_null_factor))
        return false;
      if (this.flat_json_null_factor != that.flat_json_null_factor)
        return false;
    }

    boolean this_present_flat_json_sparsity_factor = true && this.isSetFlat_json_sparsity_factor();
    boolean that_present_flat_json_sparsity_factor = true && that.isSetFlat_json_sparsity_factor();
    if (this_present_flat_json_sparsity_factor || that_present_flat_json_sparsity_factor) {
      if (!(this_present_flat_json_sparsity_factor && that_present_flat_json_sparsity_factor))
        return false;
      if (this.flat_json_sparsity_factor != that.flat_json_sparsity_factor)
        return false;
    }

    boolean this_present_flat_json_column_max = true && this.isSetFlat_json_column_max();
    boolean that_present_flat_json_column_max = true && that.isSetFlat_json_column_max();
    if (this_present_flat_json_column_max || that_present_flat_json_column_max) {
      if (!(this_present_flat_json_column_max && that_present_flat_json_column_max))
        return false;
      if (this.flat_json_column_max != that.flat_json_column_max)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFlat_json_enable()) ? 131071 : 524287);
    if (isSetFlat_json_enable())
      hashCode = hashCode * 8191 + ((flat_json_enable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFlat_json_null_factor()) ? 131071 : 524287);
    if (isSetFlat_json_null_factor())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(flat_json_null_factor);

    hashCode = hashCode * 8191 + ((isSetFlat_json_sparsity_factor()) ? 131071 : 524287);
    if (isSetFlat_json_sparsity_factor())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(flat_json_sparsity_factor);

    hashCode = hashCode * 8191 + ((isSetFlat_json_column_max()) ? 131071 : 524287);
    if (isSetFlat_json_column_max())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(flat_json_column_max);

    return hashCode;
  }

  @Override
  public int compareTo(TFlatJsonConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFlat_json_enable(), other.isSetFlat_json_enable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlat_json_enable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flat_json_enable, other.flat_json_enable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFlat_json_null_factor(), other.isSetFlat_json_null_factor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlat_json_null_factor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flat_json_null_factor, other.flat_json_null_factor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFlat_json_sparsity_factor(), other.isSetFlat_json_sparsity_factor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlat_json_sparsity_factor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flat_json_sparsity_factor, other.flat_json_sparsity_factor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFlat_json_column_max(), other.isSetFlat_json_column_max());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlat_json_column_max()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flat_json_column_max, other.flat_json_column_max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TFlatJsonConfig(");
    boolean first = true;

    if (isSetFlat_json_enable()) {
      sb.append("flat_json_enable:");
      sb.append(this.flat_json_enable);
      first = false;
    }
    if (isSetFlat_json_null_factor()) {
      if (!first) sb.append(", ");
      sb.append("flat_json_null_factor:");
      sb.append(this.flat_json_null_factor);
      first = false;
    }
    if (isSetFlat_json_sparsity_factor()) {
      if (!first) sb.append(", ");
      sb.append("flat_json_sparsity_factor:");
      sb.append(this.flat_json_sparsity_factor);
      first = false;
    }
    if (isSetFlat_json_column_max()) {
      if (!first) sb.append(", ");
      sb.append("flat_json_column_max:");
      sb.append(this.flat_json_column_max);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TFlatJsonConfigStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TFlatJsonConfigStandardScheme getScheme() {
      return new TFlatJsonConfigStandardScheme();
    }
  }

  private static class TFlatJsonConfigStandardScheme extends org.apache.thrift.scheme.StandardScheme<TFlatJsonConfig> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TFlatJsonConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FLAT_JSON_ENABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.flat_json_enable = iprot.readBool();
              struct.setFlat_json_enableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FLAT_JSON_NULL_FACTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.flat_json_null_factor = iprot.readDouble();
              struct.setFlat_json_null_factorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FLAT_JSON_SPARSITY_FACTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.flat_json_sparsity_factor = iprot.readDouble();
              struct.setFlat_json_sparsity_factorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FLAT_JSON_COLUMN_MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.flat_json_column_max = iprot.readI64();
              struct.setFlat_json_column_maxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TFlatJsonConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetFlat_json_enable()) {
        oprot.writeFieldBegin(FLAT_JSON_ENABLE_FIELD_DESC);
        oprot.writeBool(struct.flat_json_enable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFlat_json_null_factor()) {
        oprot.writeFieldBegin(FLAT_JSON_NULL_FACTOR_FIELD_DESC);
        oprot.writeDouble(struct.flat_json_null_factor);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFlat_json_sparsity_factor()) {
        oprot.writeFieldBegin(FLAT_JSON_SPARSITY_FACTOR_FIELD_DESC);
        oprot.writeDouble(struct.flat_json_sparsity_factor);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFlat_json_column_max()) {
        oprot.writeFieldBegin(FLAT_JSON_COLUMN_MAX_FIELD_DESC);
        oprot.writeI64(struct.flat_json_column_max);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TFlatJsonConfigTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TFlatJsonConfigTupleScheme getScheme() {
      return new TFlatJsonConfigTupleScheme();
    }
  }

  private static class TFlatJsonConfigTupleScheme extends org.apache.thrift.scheme.TupleScheme<TFlatJsonConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TFlatJsonConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFlat_json_enable()) {
        optionals.set(0);
      }
      if (struct.isSetFlat_json_null_factor()) {
        optionals.set(1);
      }
      if (struct.isSetFlat_json_sparsity_factor()) {
        optionals.set(2);
      }
      if (struct.isSetFlat_json_column_max()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFlat_json_enable()) {
        oprot.writeBool(struct.flat_json_enable);
      }
      if (struct.isSetFlat_json_null_factor()) {
        oprot.writeDouble(struct.flat_json_null_factor);
      }
      if (struct.isSetFlat_json_sparsity_factor()) {
        oprot.writeDouble(struct.flat_json_sparsity_factor);
      }
      if (struct.isSetFlat_json_column_max()) {
        oprot.writeI64(struct.flat_json_column_max);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TFlatJsonConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.flat_json_enable = iprot.readBool();
        struct.setFlat_json_enableIsSet(true);
      }
      if (incoming.get(1)) {
        struct.flat_json_null_factor = iprot.readDouble();
        struct.setFlat_json_null_factorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.flat_json_sparsity_factor = iprot.readDouble();
        struct.setFlat_json_sparsity_factorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.flat_json_column_max = iprot.readI64();
        struct.setFlat_json_column_maxIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

