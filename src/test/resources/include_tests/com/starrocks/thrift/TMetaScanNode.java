/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TMetaScanNode implements org.apache.thrift.TBase<TMetaScanNode, TMetaScanNode._Fields>, java.io.Serializable, Cloneable, Comparable<TMetaScanNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMetaScanNode");

  private static final org.apache.thrift.protocol.TField ID_TO_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("id_to_names", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LOW_CARDINALITY_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("low_cardinality_threshold", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMetaScanNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMetaScanNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.String> id_to_names; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TColumn> columns; // optional
  public int low_cardinality_threshold; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID_TO_NAMES((short)1, "id_to_names"),
    COLUMNS((short)2, "columns"),
    LOW_CARDINALITY_THRESHOLD((short)3, "low_cardinality_threshold");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID_TO_NAMES
          return ID_TO_NAMES;
        case 2: // COLUMNS
          return COLUMNS;
        case 3: // LOW_CARDINALITY_THRESHOLD
          return LOW_CARDINALITY_THRESHOLD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOW_CARDINALITY_THRESHOLD_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID_TO_NAMES,_Fields.COLUMNS,_Fields.LOW_CARDINALITY_THRESHOLD};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID_TO_NAMES, new org.apache.thrift.meta_data.FieldMetaData("id_to_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TColumn.class))));
    tmpMap.put(_Fields.LOW_CARDINALITY_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("low_cardinality_threshold", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMetaScanNode.class, metaDataMap);
  }

  public TMetaScanNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMetaScanNode(TMetaScanNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId_to_names()) {
      java.util.Map<java.lang.Integer,java.lang.String> __this__id_to_names = new java.util.HashMap<java.lang.Integer,java.lang.String>(other.id_to_names);
      this.id_to_names = __this__id_to_names;
    }
    if (other.isSetColumns()) {
      java.util.List<com.starrocks.thrift.TColumn> __this__columns = new java.util.ArrayList<com.starrocks.thrift.TColumn>(other.columns.size());
      for (com.starrocks.thrift.TColumn other_element : other.columns) {
        __this__columns.add(new com.starrocks.thrift.TColumn(other_element));
      }
      this.columns = __this__columns;
    }
    this.low_cardinality_threshold = other.low_cardinality_threshold;
  }

  @Override
  public TMetaScanNode deepCopy() {
    return new TMetaScanNode(this);
  }

  @Override
  public void clear() {
    this.id_to_names = null;
    this.columns = null;
    setLow_cardinality_thresholdIsSet(false);
    this.low_cardinality_threshold = 0;
  }

  public int getId_to_namesSize() {
    return (this.id_to_names == null) ? 0 : this.id_to_names.size();
  }

  public void putToId_to_names(int key, java.lang.String val) {
    if (this.id_to_names == null) {
      this.id_to_names = new java.util.HashMap<java.lang.Integer,java.lang.String>();
    }
    this.id_to_names.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.String> getId_to_names() {
    return this.id_to_names;
  }

  public TMetaScanNode setId_to_names(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.String> id_to_names) {
    this.id_to_names = id_to_names;
    return this;
  }

  public void unsetId_to_names() {
    this.id_to_names = null;
  }

  /** Returns true if field id_to_names is set (has been assigned a value) and false otherwise */
  public boolean isSetId_to_names() {
    return this.id_to_names != null;
  }

  public void setId_to_namesIsSet(boolean value) {
    if (!value) {
      this.id_to_names = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<com.starrocks.thrift.TColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(com.starrocks.thrift.TColumn elem) {
    if (this.columns == null) {
      this.columns = new java.util.ArrayList<com.starrocks.thrift.TColumn>();
    }
    this.columns.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<com.starrocks.thrift.TColumn> getColumns() {
    return this.columns;
  }

  public TMetaScanNode setColumns(@org.apache.thrift.annotation.Nullable java.util.List<com.starrocks.thrift.TColumn> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public int getLow_cardinality_threshold() {
    return this.low_cardinality_threshold;
  }

  public TMetaScanNode setLow_cardinality_threshold(int low_cardinality_threshold) {
    this.low_cardinality_threshold = low_cardinality_threshold;
    setLow_cardinality_thresholdIsSet(true);
    return this;
  }

  public void unsetLow_cardinality_threshold() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOW_CARDINALITY_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field low_cardinality_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetLow_cardinality_threshold() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOW_CARDINALITY_THRESHOLD_ISSET_ID);
  }

  public void setLow_cardinality_thresholdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOW_CARDINALITY_THRESHOLD_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID_TO_NAMES:
      if (value == null) {
        unsetId_to_names();
      } else {
        setId_to_names((java.util.Map<java.lang.Integer,java.lang.String>)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((java.util.List<com.starrocks.thrift.TColumn>)value);
      }
      break;

    case LOW_CARDINALITY_THRESHOLD:
      if (value == null) {
        unsetLow_cardinality_threshold();
      } else {
        setLow_cardinality_threshold((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID_TO_NAMES:
      return getId_to_names();

    case COLUMNS:
      return getColumns();

    case LOW_CARDINALITY_THRESHOLD:
      return getLow_cardinality_threshold();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID_TO_NAMES:
      return isSetId_to_names();
    case COLUMNS:
      return isSetColumns();
    case LOW_CARDINALITY_THRESHOLD:
      return isSetLow_cardinality_threshold();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TMetaScanNode)
      return this.equals((TMetaScanNode)that);
    return false;
  }

  public boolean equals(TMetaScanNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id_to_names = true && this.isSetId_to_names();
    boolean that_present_id_to_names = true && that.isSetId_to_names();
    if (this_present_id_to_names || that_present_id_to_names) {
      if (!(this_present_id_to_names && that_present_id_to_names))
        return false;
      if (!this.id_to_names.equals(that.id_to_names))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    boolean this_present_low_cardinality_threshold = true && this.isSetLow_cardinality_threshold();
    boolean that_present_low_cardinality_threshold = true && that.isSetLow_cardinality_threshold();
    if (this_present_low_cardinality_threshold || that_present_low_cardinality_threshold) {
      if (!(this_present_low_cardinality_threshold && that_present_low_cardinality_threshold))
        return false;
      if (this.low_cardinality_threshold != that.low_cardinality_threshold)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId_to_names()) ? 131071 : 524287);
    if (isSetId_to_names())
      hashCode = hashCode * 8191 + id_to_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumns()) ? 131071 : 524287);
    if (isSetColumns())
      hashCode = hashCode * 8191 + columns.hashCode();

    hashCode = hashCode * 8191 + ((isSetLow_cardinality_threshold()) ? 131071 : 524287);
    if (isSetLow_cardinality_threshold())
      hashCode = hashCode * 8191 + low_cardinality_threshold;

    return hashCode;
  }

  @Override
  public int compareTo(TMetaScanNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId_to_names(), other.isSetId_to_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId_to_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id_to_names, other.id_to_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumns(), other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLow_cardinality_threshold(), other.isSetLow_cardinality_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLow_cardinality_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.low_cardinality_threshold, other.low_cardinality_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMetaScanNode(");
    boolean first = true;

    if (isSetId_to_names()) {
      sb.append("id_to_names:");
      if (this.id_to_names == null) {
        sb.append("null");
      } else {
        sb.append(this.id_to_names);
      }
      first = false;
    }
    if (isSetColumns()) {
      if (!first) sb.append(", ");
      sb.append("columns:");
      if (this.columns == null) {
        sb.append("null");
      } else {
        sb.append(this.columns);
      }
      first = false;
    }
    if (isSetLow_cardinality_threshold()) {
      if (!first) sb.append(", ");
      sb.append("low_cardinality_threshold:");
      sb.append(this.low_cardinality_threshold);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMetaScanNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMetaScanNodeStandardScheme getScheme() {
      return new TMetaScanNodeStandardScheme();
    }
  }

  private static class TMetaScanNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMetaScanNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TMetaScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID_TO_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map948 = iprot.readMapBegin();
                struct.id_to_names = new java.util.HashMap<java.lang.Integer,java.lang.String>(2*_map948.size);
                int _key949;
                @org.apache.thrift.annotation.Nullable java.lang.String _val950;
                for (int _i951 = 0; _i951 < _map948.size; ++_i951)
                {
                  _key949 = iprot.readI32();
                  _val950 = iprot.readString();
                  struct.id_to_names.put(_key949, _val950);
                }
                iprot.readMapEnd();
              }
              struct.setId_to_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list952 = iprot.readListBegin();
                struct.columns = new java.util.ArrayList<com.starrocks.thrift.TColumn>(_list952.size);
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TColumn _elem953;
                for (int _i954 = 0; _i954 < _list952.size; ++_i954)
                {
                  _elem953 = new com.starrocks.thrift.TColumn();
                  _elem953.read(iprot);
                  struct.columns.add(_elem953);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOW_CARDINALITY_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.low_cardinality_threshold = iprot.readI32();
              struct.setLow_cardinality_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TMetaScanNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id_to_names != null) {
        if (struct.isSetId_to_names()) {
          oprot.writeFieldBegin(ID_TO_NAMES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.id_to_names.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.String> _iter955 : struct.id_to_names.entrySet())
            {
              oprot.writeI32(_iter955.getKey());
              oprot.writeString(_iter955.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.columns != null) {
        if (struct.isSetColumns()) {
          oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
            for (com.starrocks.thrift.TColumn _iter956 : struct.columns)
            {
              _iter956.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLow_cardinality_threshold()) {
        oprot.writeFieldBegin(LOW_CARDINALITY_THRESHOLD_FIELD_DESC);
        oprot.writeI32(struct.low_cardinality_threshold);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMetaScanNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TMetaScanNodeTupleScheme getScheme() {
      return new TMetaScanNodeTupleScheme();
    }
  }

  private static class TMetaScanNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMetaScanNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMetaScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId_to_names()) {
        optionals.set(0);
      }
      if (struct.isSetColumns()) {
        optionals.set(1);
      }
      if (struct.isSetLow_cardinality_threshold()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId_to_names()) {
        {
          oprot.writeI32(struct.id_to_names.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.String> _iter957 : struct.id_to_names.entrySet())
          {
            oprot.writeI32(_iter957.getKey());
            oprot.writeString(_iter957.getValue());
          }
        }
      }
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (com.starrocks.thrift.TColumn _iter958 : struct.columns)
          {
            _iter958.write(oprot);
          }
        }
      }
      if (struct.isSetLow_cardinality_threshold()) {
        oprot.writeI32(struct.low_cardinality_threshold);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMetaScanNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map959 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING); 
          struct.id_to_names = new java.util.HashMap<java.lang.Integer,java.lang.String>(2*_map959.size);
          int _key960;
          @org.apache.thrift.annotation.Nullable java.lang.String _val961;
          for (int _i962 = 0; _i962 < _map959.size; ++_i962)
          {
            _key960 = iprot.readI32();
            _val961 = iprot.readString();
            struct.id_to_names.put(_key960, _val961);
          }
        }
        struct.setId_to_namesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list963 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.columns = new java.util.ArrayList<com.starrocks.thrift.TColumn>(_list963.size);
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TColumn _elem964;
          for (int _i965 = 0; _i965 < _list963.size; ++_i965)
          {
            _elem964 = new com.starrocks.thrift.TColumn();
            _elem964.read(iprot);
            struct.columns.add(_elem964);
          }
        }
        struct.setColumnsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.low_cardinality_threshold = iprot.readI32();
        struct.setLow_cardinality_thresholdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

