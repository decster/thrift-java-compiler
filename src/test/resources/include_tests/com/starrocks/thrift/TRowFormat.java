/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TRowFormat implements org.apache.thrift.TBase<TRowFormat, TRowFormat._Fields>, java.io.Serializable, Cloneable, Comparable<TRowFormat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRowFormat");

  private static final org.apache.thrift.protocol.TField NULL_BITS_FIELD_DESC = new org.apache.thrift.protocol.TField("null_bits", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PACKED_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("packed_data", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRowFormatStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRowFormatTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer null_bits; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer packed_data; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NULL_BITS((short)1, "null_bits"),
    PACKED_DATA((short)2, "packed_data");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NULL_BITS
          return NULL_BITS;
        case 2: // PACKED_DATA
          return PACKED_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.NULL_BITS,_Fields.PACKED_DATA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NULL_BITS, new org.apache.thrift.meta_data.FieldMetaData("null_bits", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PACKED_DATA, new org.apache.thrift.meta_data.FieldMetaData("packed_data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRowFormat.class, metaDataMap);
  }

  public TRowFormat() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRowFormat(TRowFormat other) {
    if (other.isSetNull_bits()) {
      this.null_bits = org.apache.thrift.TBaseHelper.copyBinary(other.null_bits);
    }
    if (other.isSetPacked_data()) {
      this.packed_data = org.apache.thrift.TBaseHelper.copyBinary(other.packed_data);
    }
  }

  @Override
  public TRowFormat deepCopy() {
    return new TRowFormat(this);
  }

  @Override
  public void clear() {
    this.null_bits = null;
    this.packed_data = null;
  }

  public byte[] getNull_bits() {
    setNull_bits(org.apache.thrift.TBaseHelper.rightSize(null_bits));
    return null_bits == null ? null : null_bits.array();
  }

  public java.nio.ByteBuffer bufferForNull_bits() {
    return org.apache.thrift.TBaseHelper.copyBinary(null_bits);
  }

  public TRowFormat setNull_bits(byte[] null_bits) {
    this.null_bits = null_bits == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(null_bits.clone());
    return this;
  }

  public TRowFormat setNull_bits(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer null_bits) {
    this.null_bits = org.apache.thrift.TBaseHelper.copyBinary(null_bits);
    return this;
  }

  public void unsetNull_bits() {
    this.null_bits = null;
  }

  /** Returns true if field null_bits is set (has been assigned a value) and false otherwise */
  public boolean isSetNull_bits() {
    return this.null_bits != null;
  }

  public void setNull_bitsIsSet(boolean value) {
    if (!value) {
      this.null_bits = null;
    }
  }

  public byte[] getPacked_data() {
    setPacked_data(org.apache.thrift.TBaseHelper.rightSize(packed_data));
    return packed_data == null ? null : packed_data.array();
  }

  public java.nio.ByteBuffer bufferForPacked_data() {
    return org.apache.thrift.TBaseHelper.copyBinary(packed_data);
  }

  public TRowFormat setPacked_data(byte[] packed_data) {
    this.packed_data = packed_data == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(packed_data.clone());
    return this;
  }

  public TRowFormat setPacked_data(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer packed_data) {
    this.packed_data = org.apache.thrift.TBaseHelper.copyBinary(packed_data);
    return this;
  }

  public void unsetPacked_data() {
    this.packed_data = null;
  }

  /** Returns true if field packed_data is set (has been assigned a value) and false otherwise */
  public boolean isSetPacked_data() {
    return this.packed_data != null;
  }

  public void setPacked_dataIsSet(boolean value) {
    if (!value) {
      this.packed_data = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NULL_BITS:
      if (value == null) {
        unsetNull_bits();
      } else {
        if (value instanceof byte[]) {
          setNull_bits((byte[])value);
        } else {
          setNull_bits((java.nio.ByteBuffer)value);
        }
      }
      break;

    case PACKED_DATA:
      if (value == null) {
        unsetPacked_data();
      } else {
        if (value instanceof byte[]) {
          setPacked_data((byte[])value);
        } else {
          setPacked_data((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NULL_BITS:
      return getNull_bits();

    case PACKED_DATA:
      return getPacked_data();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NULL_BITS:
      return isSetNull_bits();
    case PACKED_DATA:
      return isSetPacked_data();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TRowFormat)
      return this.equals((TRowFormat)that);
    return false;
  }

  public boolean equals(TRowFormat that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_null_bits = true && this.isSetNull_bits();
    boolean that_present_null_bits = true && that.isSetNull_bits();
    if (this_present_null_bits || that_present_null_bits) {
      if (!(this_present_null_bits && that_present_null_bits))
        return false;
      if (!this.null_bits.equals(that.null_bits))
        return false;
    }

    boolean this_present_packed_data = true && this.isSetPacked_data();
    boolean that_present_packed_data = true && that.isSetPacked_data();
    if (this_present_packed_data || that_present_packed_data) {
      if (!(this_present_packed_data && that_present_packed_data))
        return false;
      if (!this.packed_data.equals(that.packed_data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNull_bits()) ? 131071 : 524287);
    if (isSetNull_bits())
      hashCode = hashCode * 8191 + null_bits.hashCode();

    hashCode = hashCode * 8191 + ((isSetPacked_data()) ? 131071 : 524287);
    if (isSetPacked_data())
      hashCode = hashCode * 8191 + packed_data.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TRowFormat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNull_bits(), other.isSetNull_bits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNull_bits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.null_bits, other.null_bits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPacked_data(), other.isSetPacked_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPacked_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packed_data, other.packed_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRowFormat(");
    boolean first = true;

    if (isSetNull_bits()) {
      sb.append("null_bits:");
      if (this.null_bits == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.null_bits, sb);
      }
      first = false;
    }
    if (isSetPacked_data()) {
      if (!first) sb.append(", ");
      sb.append("packed_data:");
      if (this.packed_data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.packed_data, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRowFormatStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRowFormatStandardScheme getScheme() {
      return new TRowFormatStandardScheme();
    }
  }

  private static class TRowFormatStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRowFormat> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TRowFormat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NULL_BITS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.null_bits = iprot.readBinary();
              struct.setNull_bitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PACKED_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.packed_data = iprot.readBinary();
              struct.setPacked_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TRowFormat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.null_bits != null) {
        if (struct.isSetNull_bits()) {
          oprot.writeFieldBegin(NULL_BITS_FIELD_DESC);
          oprot.writeBinary(struct.null_bits);
          oprot.writeFieldEnd();
        }
      }
      if (struct.packed_data != null) {
        if (struct.isSetPacked_data()) {
          oprot.writeFieldBegin(PACKED_DATA_FIELD_DESC);
          oprot.writeBinary(struct.packed_data);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRowFormatTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TRowFormatTupleScheme getScheme() {
      return new TRowFormatTupleScheme();
    }
  }

  private static class TRowFormatTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRowFormat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRowFormat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNull_bits()) {
        optionals.set(0);
      }
      if (struct.isSetPacked_data()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNull_bits()) {
        oprot.writeBinary(struct.null_bits);
      }
      if (struct.isSetPacked_data()) {
        oprot.writeBinary(struct.packed_data);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRowFormat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.null_bits = iprot.readBinary();
        struct.setNull_bitsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.packed_data = iprot.readBinary();
        struct.setPacked_dataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

