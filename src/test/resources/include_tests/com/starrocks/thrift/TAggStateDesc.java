/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TAggStateDesc implements org.apache.thrift.TBase<TAggStateDesc, TAggStateDesc._Fields>, java.io.Serializable, Cloneable, Comparable<TAggStateDesc> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAggStateDesc");

  private static final org.apache.thrift.protocol.TField AGG_FUNC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("agg_func_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ARG_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("arg_types", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField RET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ret_type", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField RESULT_NULLABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("result_nullable", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField FUNC_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("func_version", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAggStateDescStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAggStateDescTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String agg_func_name; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TTypeDesc> arg_types; // optional
  public @org.apache.thrift.annotation.Nullable TTypeDesc ret_type; // optional
  public boolean result_nullable; // optional
  public int func_version; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGG_FUNC_NAME((short)1, "agg_func_name"),
    ARG_TYPES((short)2, "arg_types"),
    RET_TYPE((short)3, "ret_type"),
    RESULT_NULLABLE((short)4, "result_nullable"),
    FUNC_VERSION((short)5, "func_version");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGG_FUNC_NAME
          return AGG_FUNC_NAME;
        case 2: // ARG_TYPES
          return ARG_TYPES;
        case 3: // RET_TYPE
          return RET_TYPE;
        case 4: // RESULT_NULLABLE
          return RESULT_NULLABLE;
        case 5: // FUNC_VERSION
          return FUNC_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESULT_NULLABLE_ISSET_ID = 0;
  private static final int __FUNC_VERSION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AGG_FUNC_NAME,_Fields.ARG_TYPES,_Fields.RET_TYPE,_Fields.RESULT_NULLABLE,_Fields.FUNC_VERSION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGG_FUNC_NAME, new org.apache.thrift.meta_data.FieldMetaData("agg_func_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARG_TYPES, new org.apache.thrift.meta_data.FieldMetaData("arg_types", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTypeDesc.class))));
    tmpMap.put(_Fields.RET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ret_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTypeDesc.class)));
    tmpMap.put(_Fields.RESULT_NULLABLE, new org.apache.thrift.meta_data.FieldMetaData("result_nullable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FUNC_VERSION, new org.apache.thrift.meta_data.FieldMetaData("func_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAggStateDesc.class, metaDataMap);
  }

  public TAggStateDesc() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAggStateDesc(TAggStateDesc other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAgg_func_name()) {
      this.agg_func_name = other.agg_func_name;
    }
    if (other.isSetArg_types()) {
      java.util.List<TTypeDesc> __this__arg_types = new java.util.ArrayList<TTypeDesc>(other.arg_types.size());
      for (TTypeDesc other_element : other.arg_types) {
        __this__arg_types.add(new TTypeDesc(other_element));
      }
      this.arg_types = __this__arg_types;
    }
    if (other.isSetRet_type()) {
      this.ret_type = new TTypeDesc(other.ret_type);
    }
    this.result_nullable = other.result_nullable;
    this.func_version = other.func_version;
  }

  @Override
  public TAggStateDesc deepCopy() {
    return new TAggStateDesc(this);
  }

  @Override
  public void clear() {
    this.agg_func_name = null;
    this.arg_types = null;
    this.ret_type = null;
    setResult_nullableIsSet(false);
    this.result_nullable = false;
    setFunc_versionIsSet(false);
    this.func_version = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAgg_func_name() {
    return this.agg_func_name;
  }

  public TAggStateDesc setAgg_func_name(@org.apache.thrift.annotation.Nullable java.lang.String agg_func_name) {
    this.agg_func_name = agg_func_name;
    return this;
  }

  public void unsetAgg_func_name() {
    this.agg_func_name = null;
  }

  /** Returns true if field agg_func_name is set (has been assigned a value) and false otherwise */
  public boolean isSetAgg_func_name() {
    return this.agg_func_name != null;
  }

  public void setAgg_func_nameIsSet(boolean value) {
    if (!value) {
      this.agg_func_name = null;
    }
  }

  public int getArg_typesSize() {
    return (this.arg_types == null) ? 0 : this.arg_types.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TTypeDesc> getArg_typesIterator() {
    return (this.arg_types == null) ? null : this.arg_types.iterator();
  }

  public void addToArg_types(TTypeDesc elem) {
    if (this.arg_types == null) {
      this.arg_types = new java.util.ArrayList<TTypeDesc>();
    }
    this.arg_types.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TTypeDesc> getArg_types() {
    return this.arg_types;
  }

  public TAggStateDesc setArg_types(@org.apache.thrift.annotation.Nullable java.util.List<TTypeDesc> arg_types) {
    this.arg_types = arg_types;
    return this;
  }

  public void unsetArg_types() {
    this.arg_types = null;
  }

  /** Returns true if field arg_types is set (has been assigned a value) and false otherwise */
  public boolean isSetArg_types() {
    return this.arg_types != null;
  }

  public void setArg_typesIsSet(boolean value) {
    if (!value) {
      this.arg_types = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TTypeDesc getRet_type() {
    return this.ret_type;
  }

  public TAggStateDesc setRet_type(@org.apache.thrift.annotation.Nullable TTypeDesc ret_type) {
    this.ret_type = ret_type;
    return this;
  }

  public void unsetRet_type() {
    this.ret_type = null;
  }

  /** Returns true if field ret_type is set (has been assigned a value) and false otherwise */
  public boolean isSetRet_type() {
    return this.ret_type != null;
  }

  public void setRet_typeIsSet(boolean value) {
    if (!value) {
      this.ret_type = null;
    }
  }

  public boolean isResult_nullable() {
    return this.result_nullable;
  }

  public TAggStateDesc setResult_nullable(boolean result_nullable) {
    this.result_nullable = result_nullable;
    setResult_nullableIsSet(true);
    return this;
  }

  public void unsetResult_nullable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESULT_NULLABLE_ISSET_ID);
  }

  /** Returns true if field result_nullable is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_nullable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESULT_NULLABLE_ISSET_ID);
  }

  public void setResult_nullableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESULT_NULLABLE_ISSET_ID, value);
  }

  public int getFunc_version() {
    return this.func_version;
  }

  public TAggStateDesc setFunc_version(int func_version) {
    this.func_version = func_version;
    setFunc_versionIsSet(true);
    return this;
  }

  public void unsetFunc_version() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FUNC_VERSION_ISSET_ID);
  }

  /** Returns true if field func_version is set (has been assigned a value) and false otherwise */
  public boolean isSetFunc_version() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FUNC_VERSION_ISSET_ID);
  }

  public void setFunc_versionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FUNC_VERSION_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case AGG_FUNC_NAME:
      if (value == null) {
        unsetAgg_func_name();
      } else {
        setAgg_func_name((java.lang.String)value);
      }
      break;

    case ARG_TYPES:
      if (value == null) {
        unsetArg_types();
      } else {
        setArg_types((java.util.List<TTypeDesc>)value);
      }
      break;

    case RET_TYPE:
      if (value == null) {
        unsetRet_type();
      } else {
        setRet_type((TTypeDesc)value);
      }
      break;

    case RESULT_NULLABLE:
      if (value == null) {
        unsetResult_nullable();
      } else {
        setResult_nullable((java.lang.Boolean)value);
      }
      break;

    case FUNC_VERSION:
      if (value == null) {
        unsetFunc_version();
      } else {
        setFunc_version((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case AGG_FUNC_NAME:
      return getAgg_func_name();

    case ARG_TYPES:
      return getArg_types();

    case RET_TYPE:
      return getRet_type();

    case RESULT_NULLABLE:
      return isResult_nullable();

    case FUNC_VERSION:
      return getFunc_version();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case AGG_FUNC_NAME:
      return isSetAgg_func_name();
    case ARG_TYPES:
      return isSetArg_types();
    case RET_TYPE:
      return isSetRet_type();
    case RESULT_NULLABLE:
      return isSetResult_nullable();
    case FUNC_VERSION:
      return isSetFunc_version();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAggStateDesc)
      return this.equals((TAggStateDesc)that);
    return false;
  }

  public boolean equals(TAggStateDesc that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_agg_func_name = true && this.isSetAgg_func_name();
    boolean that_present_agg_func_name = true && that.isSetAgg_func_name();
    if (this_present_agg_func_name || that_present_agg_func_name) {
      if (!(this_present_agg_func_name && that_present_agg_func_name))
        return false;
      if (!this.agg_func_name.equals(that.agg_func_name))
        return false;
    }

    boolean this_present_arg_types = true && this.isSetArg_types();
    boolean that_present_arg_types = true && that.isSetArg_types();
    if (this_present_arg_types || that_present_arg_types) {
      if (!(this_present_arg_types && that_present_arg_types))
        return false;
      if (!this.arg_types.equals(that.arg_types))
        return false;
    }

    boolean this_present_ret_type = true && this.isSetRet_type();
    boolean that_present_ret_type = true && that.isSetRet_type();
    if (this_present_ret_type || that_present_ret_type) {
      if (!(this_present_ret_type && that_present_ret_type))
        return false;
      if (!this.ret_type.equals(that.ret_type))
        return false;
    }

    boolean this_present_result_nullable = true && this.isSetResult_nullable();
    boolean that_present_result_nullable = true && that.isSetResult_nullable();
    if (this_present_result_nullable || that_present_result_nullable) {
      if (!(this_present_result_nullable && that_present_result_nullable))
        return false;
      if (this.result_nullable != that.result_nullable)
        return false;
    }

    boolean this_present_func_version = true && this.isSetFunc_version();
    boolean that_present_func_version = true && that.isSetFunc_version();
    if (this_present_func_version || that_present_func_version) {
      if (!(this_present_func_version && that_present_func_version))
        return false;
      if (this.func_version != that.func_version)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAgg_func_name()) ? 131071 : 524287);
    if (isSetAgg_func_name())
      hashCode = hashCode * 8191 + agg_func_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetArg_types()) ? 131071 : 524287);
    if (isSetArg_types())
      hashCode = hashCode * 8191 + arg_types.hashCode();

    hashCode = hashCode * 8191 + ((isSetRet_type()) ? 131071 : 524287);
    if (isSetRet_type())
      hashCode = hashCode * 8191 + ret_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetResult_nullable()) ? 131071 : 524287);
    if (isSetResult_nullable())
      hashCode = hashCode * 8191 + ((result_nullable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFunc_version()) ? 131071 : 524287);
    if (isSetFunc_version())
      hashCode = hashCode * 8191 + func_version;

    return hashCode;
  }

  @Override
  public int compareTo(TAggStateDesc other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetAgg_func_name(), other.isSetAgg_func_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgg_func_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agg_func_name, other.agg_func_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetArg_types(), other.isSetArg_types());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArg_types()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arg_types, other.arg_types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRet_type(), other.isSetRet_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRet_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ret_type, other.ret_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResult_nullable(), other.isSetResult_nullable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_nullable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_nullable, other.result_nullable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFunc_version(), other.isSetFunc_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunc_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.func_version, other.func_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAggStateDesc(");
    boolean first = true;

    if (isSetAgg_func_name()) {
      sb.append("agg_func_name:");
      if (this.agg_func_name == null) {
        sb.append("null");
      } else {
        sb.append(this.agg_func_name);
      }
      first = false;
    }
    if (isSetArg_types()) {
      if (!first) sb.append(", ");
      sb.append("arg_types:");
      if (this.arg_types == null) {
        sb.append("null");
      } else {
        sb.append(this.arg_types);
      }
      first = false;
    }
    if (isSetRet_type()) {
      if (!first) sb.append(", ");
      sb.append("ret_type:");
      if (this.ret_type == null) {
        sb.append("null");
      } else {
        sb.append(this.ret_type);
      }
      first = false;
    }
    if (isSetResult_nullable()) {
      if (!first) sb.append(", ");
      sb.append("result_nullable:");
      sb.append(this.result_nullable);
      first = false;
    }
    if (isSetFunc_version()) {
      if (!first) sb.append(", ");
      sb.append("func_version:");
      sb.append(this.func_version);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (ret_type != null) {
      ret_type.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAggStateDescStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAggStateDescStandardScheme getScheme() {
      return new TAggStateDescStandardScheme();
    }
  }

  private static class TAggStateDescStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAggStateDesc> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TAggStateDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGG_FUNC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agg_func_name = iprot.readString();
              struct.setAgg_func_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARG_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.arg_types = new java.util.ArrayList<TTypeDesc>(_list40.size);
                @org.apache.thrift.annotation.Nullable TTypeDesc _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new TTypeDesc();
                  _elem41.read(iprot);
                  struct.arg_types.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setArg_typesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ret_type = new TTypeDesc();
              struct.ret_type.read(iprot);
              struct.setRet_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESULT_NULLABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.result_nullable = iprot.readBool();
              struct.setResult_nullableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FUNC_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.func_version = iprot.readI32();
              struct.setFunc_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TAggStateDesc struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.agg_func_name != null) {
        if (struct.isSetAgg_func_name()) {
          oprot.writeFieldBegin(AGG_FUNC_NAME_FIELD_DESC);
          oprot.writeString(struct.agg_func_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.arg_types != null) {
        if (struct.isSetArg_types()) {
          oprot.writeFieldBegin(ARG_TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.arg_types.size()));
            for (TTypeDesc _iter43 : struct.arg_types)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ret_type != null) {
        if (struct.isSetRet_type()) {
          oprot.writeFieldBegin(RET_TYPE_FIELD_DESC);
          struct.ret_type.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetResult_nullable()) {
        oprot.writeFieldBegin(RESULT_NULLABLE_FIELD_DESC);
        oprot.writeBool(struct.result_nullable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFunc_version()) {
        oprot.writeFieldBegin(FUNC_VERSION_FIELD_DESC);
        oprot.writeI32(struct.func_version);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAggStateDescTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TAggStateDescTupleScheme getScheme() {
      return new TAggStateDescTupleScheme();
    }
  }

  private static class TAggStateDescTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAggStateDesc> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAggStateDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAgg_func_name()) {
        optionals.set(0);
      }
      if (struct.isSetArg_types()) {
        optionals.set(1);
      }
      if (struct.isSetRet_type()) {
        optionals.set(2);
      }
      if (struct.isSetResult_nullable()) {
        optionals.set(3);
      }
      if (struct.isSetFunc_version()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetAgg_func_name()) {
        oprot.writeString(struct.agg_func_name);
      }
      if (struct.isSetArg_types()) {
        {
          oprot.writeI32(struct.arg_types.size());
          for (TTypeDesc _iter44 : struct.arg_types)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetRet_type()) {
        struct.ret_type.write(oprot);
      }
      if (struct.isSetResult_nullable()) {
        oprot.writeBool(struct.result_nullable);
      }
      if (struct.isSetFunc_version()) {
        oprot.writeI32(struct.func_version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAggStateDesc struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.agg_func_name = iprot.readString();
        struct.setAgg_func_nameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.arg_types = new java.util.ArrayList<TTypeDesc>(_list45.size);
          @org.apache.thrift.annotation.Nullable TTypeDesc _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new TTypeDesc();
            _elem46.read(iprot);
            struct.arg_types.add(_elem46);
          }
        }
        struct.setArg_typesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ret_type = new TTypeDesc();
        struct.ret_type.read(iprot);
        struct.setRet_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.result_nullable = iprot.readBool();
        struct.setResult_nullableIsSet(true);
      }
      if (incoming.get(4)) {
        struct.func_version = iprot.readI32();
        struct.setFunc_versionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

