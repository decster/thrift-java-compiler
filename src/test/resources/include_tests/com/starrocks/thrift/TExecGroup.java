/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TExecGroup implements org.apache.thrift.TBase<TExecGroup, TExecGroup._Fields>, java.io.Serializable, Cloneable, Comparable<TExecGroup> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecGroup");

  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PLAN_NODE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("plan_node_ids", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TExecGroupStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TExecGroupTupleSchemeFactory();

  public int group_id; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> plan_node_ids; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GROUP_ID((short)1, "group_id"),
    PLAN_NODE_IDS((short)2, "plan_node_ids");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GROUP_ID
          return GROUP_ID;
        case 2: // PLAN_NODE_IDS
          return PLAN_NODE_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GROUP_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.GROUP_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_NODE_IDS, new org.apache.thrift.meta_data.FieldMetaData("plan_node_ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecGroup.class, metaDataMap);
  }

  public TExecGroup() {
  }

  public TExecGroup(
    java.util.List<java.lang.Integer> plan_node_ids)
  {
    this();
    this.plan_node_ids = plan_node_ids;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecGroup(TExecGroup other) {
    __isset_bitfield = other.__isset_bitfield;
    this.group_id = other.group_id;
    if (other.isSetPlan_node_ids()) {
      java.util.List<java.lang.Integer> __this__plan_node_ids = new java.util.ArrayList<java.lang.Integer>(other.plan_node_ids);
      this.plan_node_ids = __this__plan_node_ids;
    }
  }

  @Override
  public TExecGroup deepCopy() {
    return new TExecGroup(this);
  }

  @Override
  public void clear() {
    setGroup_idIsSet(false);
    this.group_id = 0;
    this.plan_node_ids = null;
  }

  public int getGroup_id() {
    return this.group_id;
  }

  public TExecGroup setGroup_id(int group_id) {
    this.group_id = group_id;
    setGroup_idIsSet(true);
    return this;
  }

  public void unsetGroup_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
  }

  /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
  }

  public void setGroup_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GROUP_ID_ISSET_ID, value);
  }

  public int getPlan_node_idsSize() {
    return (this.plan_node_ids == null) ? 0 : this.plan_node_ids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getPlan_node_idsIterator() {
    return (this.plan_node_ids == null) ? null : this.plan_node_ids.iterator();
  }

  public void addToPlan_node_ids(int elem) {
    if (this.plan_node_ids == null) {
      this.plan_node_ids = new java.util.ArrayList<java.lang.Integer>();
    }
    this.plan_node_ids.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getPlan_node_ids() {
    return this.plan_node_ids;
  }

  public TExecGroup setPlan_node_ids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> plan_node_ids) {
    this.plan_node_ids = plan_node_ids;
    return this;
  }

  public void unsetPlan_node_ids() {
    this.plan_node_ids = null;
  }

  /** Returns true if field plan_node_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetPlan_node_ids() {
    return this.plan_node_ids != null;
  }

  public void setPlan_node_idsIsSet(boolean value) {
    if (!value) {
      this.plan_node_ids = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case GROUP_ID:
      if (value == null) {
        unsetGroup_id();
      } else {
        setGroup_id((java.lang.Integer)value);
      }
      break;

    case PLAN_NODE_IDS:
      if (value == null) {
        unsetPlan_node_ids();
      } else {
        setPlan_node_ids((java.util.List<java.lang.Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GROUP_ID:
      return getGroup_id();

    case PLAN_NODE_IDS:
      return getPlan_node_ids();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GROUP_ID:
      return isSetGroup_id();
    case PLAN_NODE_IDS:
      return isSetPlan_node_ids();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TExecGroup)
      return this.equals((TExecGroup)that);
    return false;
  }

  public boolean equals(TExecGroup that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_group_id = true && this.isSetGroup_id();
    boolean that_present_group_id = true && that.isSetGroup_id();
    if (this_present_group_id || that_present_group_id) {
      if (!(this_present_group_id && that_present_group_id))
        return false;
      if (this.group_id != that.group_id)
        return false;
    }

    boolean this_present_plan_node_ids = true && this.isSetPlan_node_ids();
    boolean that_present_plan_node_ids = true && that.isSetPlan_node_ids();
    if (this_present_plan_node_ids || that_present_plan_node_ids) {
      if (!(this_present_plan_node_ids && that_present_plan_node_ids))
        return false;
      if (!this.plan_node_ids.equals(that.plan_node_ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGroup_id()) ? 131071 : 524287);
    if (isSetGroup_id())
      hashCode = hashCode * 8191 + group_id;

    hashCode = hashCode * 8191 + ((isSetPlan_node_ids()) ? 131071 : 524287);
    if (isSetPlan_node_ids())
      hashCode = hashCode * 8191 + plan_node_ids.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TExecGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetGroup_id(), other.isSetGroup_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, other.group_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPlan_node_ids(), other.isSetPlan_node_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlan_node_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plan_node_ids, other.plan_node_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TExecGroup(");
    boolean first = true;

    if (isSetGroup_id()) {
      sb.append("group_id:");
      sb.append(this.group_id);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("plan_node_ids:");
    if (this.plan_node_ids == null) {
      sb.append("null");
    } else {
      sb.append(this.plan_node_ids);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecGroupStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecGroupStandardScheme getScheme() {
      return new TExecGroupStandardScheme();
    }
  }

  private static class TExecGroupStandardScheme extends org.apache.thrift.scheme.StandardScheme<TExecGroup> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.group_id = iprot.readI32();
              struct.setGroup_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAN_NODE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.plan_node_ids = new java.util.ArrayList<java.lang.Integer>(_list28.size);
                int _elem29;
                for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                {
                  _elem29 = iprot.readI32();
                  struct.plan_node_ids.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setPlan_node_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetGroup_id()) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.group_id);
        oprot.writeFieldEnd();
      }
      if (struct.plan_node_ids != null) {
        oprot.writeFieldBegin(PLAN_NODE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.plan_node_ids.size()));
          for (int _iter31 : struct.plan_node_ids)
          {
            oprot.writeI32(_iter31);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecGroupTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TExecGroupTupleScheme getScheme() {
      return new TExecGroupTupleScheme();
    }
  }

  private static class TExecGroupTupleScheme extends org.apache.thrift.scheme.TupleScheme<TExecGroup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGroup_id()) {
        optionals.set(0);
      }
      if (struct.isSetPlan_node_ids()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetGroup_id()) {
        oprot.writeI32(struct.group_id);
      }
      if (struct.isSetPlan_node_ids()) {
        {
          oprot.writeI32(struct.plan_node_ids.size());
          for (int _iter32 : struct.plan_node_ids)
          {
            oprot.writeI32(_iter32);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.group_id = iprot.readI32();
        struct.setGroup_idIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list33 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.plan_node_ids = new java.util.ArrayList<java.lang.Integer>(_list33.size);
          int _elem34;
          for (int _i35 = 0; _i35 < _list33.size; ++_i35)
          {
            _elem34 = iprot.readI32();
            struct.plan_node_ids.add(_elem34);
          }
        }
        struct.setPlan_node_idsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

