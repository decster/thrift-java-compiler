/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TConnectionInfo implements org.apache.thrift.TBase<TConnectionInfo, TConnectionInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TConnectionInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TConnectionInfo");

  private static final org.apache.thrift.protocol.TField CONNECTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("connection_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DB_FIELD_DESC = new org.apache.thrift.protocol.TField("db", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONNECTION_START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("connection_start_time", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField IS_PENDING_FIELD_DESC = new org.apache.thrift.protocol.TField("isPending", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField WAREHOUSE_FIELD_DESC = new org.apache.thrift.protocol.TField("warehouse", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TConnectionInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TConnectionInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String connection_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String user; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String host; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String db; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String command; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String connection_start_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String state; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String info; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String isPending; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String warehouse; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONNECTION_ID((short)1, "connection_id"),
    USER((short)2, "user"),
    HOST((short)3, "host"),
    DB((short)4, "db"),
    COMMAND((short)5, "command"),
    CONNECTION_START_TIME((short)6, "connection_start_time"),
    TIME((short)7, "time"),
    STATE((short)8, "state"),
    INFO((short)9, "info"),
    IS_PENDING((short)10, "isPending"),
    WAREHOUSE((short)11, "warehouse");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONNECTION_ID
          return CONNECTION_ID;
        case 2: // USER
          return USER;
        case 3: // HOST
          return HOST;
        case 4: // DB
          return DB;
        case 5: // COMMAND
          return COMMAND;
        case 6: // CONNECTION_START_TIME
          return CONNECTION_START_TIME;
        case 7: // TIME
          return TIME;
        case 8: // STATE
          return STATE;
        case 9: // INFO
          return INFO;
        case 10: // IS_PENDING
          return IS_PENDING;
        case 11: // WAREHOUSE
          return WAREHOUSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CONNECTION_ID,_Fields.USER,_Fields.HOST,_Fields.DB,_Fields.COMMAND,_Fields.CONNECTION_START_TIME,_Fields.TIME,_Fields.STATE,_Fields.INFO,_Fields.IS_PENDING,_Fields.WAREHOUSE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONNECTION_ID, new org.apache.thrift.meta_data.FieldMetaData("connection_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DB, new org.apache.thrift.meta_data.FieldMetaData("db", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONNECTION_START_TIME, new org.apache.thrift.meta_data.FieldMetaData("connection_start_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_PENDING, new org.apache.thrift.meta_data.FieldMetaData("isPending", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WAREHOUSE, new org.apache.thrift.meta_data.FieldMetaData("warehouse", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TConnectionInfo.class, metaDataMap);
  }

  public TConnectionInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TConnectionInfo(TConnectionInfo other) {
    if (other.isSetConnection_id()) {
      this.connection_id = other.connection_id;
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    if (other.isSetHost()) {
      this.host = other.host;
    }
    if (other.isSetDb()) {
      this.db = other.db;
    }
    if (other.isSetCommand()) {
      this.command = other.command;
    }
    if (other.isSetConnection_start_time()) {
      this.connection_start_time = other.connection_start_time;
    }
    if (other.isSetTime()) {
      this.time = other.time;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetInfo()) {
      this.info = other.info;
    }
    if (other.isSetIsPending()) {
      this.isPending = other.isPending;
    }
    if (other.isSetWarehouse()) {
      this.warehouse = other.warehouse;
    }
  }

  @Override
  public TConnectionInfo deepCopy() {
    return new TConnectionInfo(this);
  }

  @Override
  public void clear() {
    this.connection_id = null;
    this.user = null;
    this.host = null;
    this.db = null;
    this.command = null;
    this.connection_start_time = null;
    this.time = null;
    this.state = null;
    this.info = null;
    this.isPending = null;
    this.warehouse = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getConnection_id() {
    return this.connection_id;
  }

  public TConnectionInfo setConnection_id(@org.apache.thrift.annotation.Nullable java.lang.String connection_id) {
    this.connection_id = connection_id;
    return this;
  }

  public void unsetConnection_id() {
    this.connection_id = null;
  }

  /** Returns true if field connection_id is set (has been assigned a value) and false otherwise */
  public boolean isSetConnection_id() {
    return this.connection_id != null;
  }

  public void setConnection_idIsSet(boolean value) {
    if (!value) {
      this.connection_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser() {
    return this.user;
  }

  public TConnectionInfo setUser(@org.apache.thrift.annotation.Nullable java.lang.String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHost() {
    return this.host;
  }

  public TConnectionInfo setHost(@org.apache.thrift.annotation.Nullable java.lang.String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDb() {
    return this.db;
  }

  public TConnectionInfo setDb(@org.apache.thrift.annotation.Nullable java.lang.String db) {
    this.db = db;
    return this;
  }

  public void unsetDb() {
    this.db = null;
  }

  /** Returns true if field db is set (has been assigned a value) and false otherwise */
  public boolean isSetDb() {
    return this.db != null;
  }

  public void setDbIsSet(boolean value) {
    if (!value) {
      this.db = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCommand() {
    return this.command;
  }

  public TConnectionInfo setCommand(@org.apache.thrift.annotation.Nullable java.lang.String command) {
    this.command = command;
    return this;
  }

  public void unsetCommand() {
    this.command = null;
  }

  /** Returns true if field command is set (has been assigned a value) and false otherwise */
  public boolean isSetCommand() {
    return this.command != null;
  }

  public void setCommandIsSet(boolean value) {
    if (!value) {
      this.command = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getConnection_start_time() {
    return this.connection_start_time;
  }

  public TConnectionInfo setConnection_start_time(@org.apache.thrift.annotation.Nullable java.lang.String connection_start_time) {
    this.connection_start_time = connection_start_time;
    return this;
  }

  public void unsetConnection_start_time() {
    this.connection_start_time = null;
  }

  /** Returns true if field connection_start_time is set (has been assigned a value) and false otherwise */
  public boolean isSetConnection_start_time() {
    return this.connection_start_time != null;
  }

  public void setConnection_start_timeIsSet(boolean value) {
    if (!value) {
      this.connection_start_time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTime() {
    return this.time;
  }

  public TConnectionInfo setTime(@org.apache.thrift.annotation.Nullable java.lang.String time) {
    this.time = time;
    return this;
  }

  public void unsetTime() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getState() {
    return this.state;
  }

  public TConnectionInfo setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getInfo() {
    return this.info;
  }

  public TConnectionInfo setInfo(@org.apache.thrift.annotation.Nullable java.lang.String info) {
    this.info = info;
    return this;
  }

  public void unsetInfo() {
    this.info = null;
  }

  /** Returns true if field info is set (has been assigned a value) and false otherwise */
  public boolean isSetInfo() {
    return this.info != null;
  }

  public void setInfoIsSet(boolean value) {
    if (!value) {
      this.info = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIsPending() {
    return this.isPending;
  }

  public TConnectionInfo setIsPending(@org.apache.thrift.annotation.Nullable java.lang.String isPending) {
    this.isPending = isPending;
    return this;
  }

  public void unsetIsPending() {
    this.isPending = null;
  }

  /** Returns true if field isPending is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPending() {
    return this.isPending != null;
  }

  public void setIsPendingIsSet(boolean value) {
    if (!value) {
      this.isPending = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWarehouse() {
    return this.warehouse;
  }

  public TConnectionInfo setWarehouse(@org.apache.thrift.annotation.Nullable java.lang.String warehouse) {
    this.warehouse = warehouse;
    return this;
  }

  public void unsetWarehouse() {
    this.warehouse = null;
  }

  /** Returns true if field warehouse is set (has been assigned a value) and false otherwise */
  public boolean isSetWarehouse() {
    return this.warehouse != null;
  }

  public void setWarehouseIsSet(boolean value) {
    if (!value) {
      this.warehouse = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CONNECTION_ID:
      if (value == null) {
        unsetConnection_id();
      } else {
        setConnection_id((java.lang.String)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((java.lang.String)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((java.lang.String)value);
      }
      break;

    case DB:
      if (value == null) {
        unsetDb();
      } else {
        setDb((java.lang.String)value);
      }
      break;

    case COMMAND:
      if (value == null) {
        unsetCommand();
      } else {
        setCommand((java.lang.String)value);
      }
      break;

    case CONNECTION_START_TIME:
      if (value == null) {
        unsetConnection_start_time();
      } else {
        setConnection_start_time((java.lang.String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((java.lang.String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.String)value);
      }
      break;

    case INFO:
      if (value == null) {
        unsetInfo();
      } else {
        setInfo((java.lang.String)value);
      }
      break;

    case IS_PENDING:
      if (value == null) {
        unsetIsPending();
      } else {
        setIsPending((java.lang.String)value);
      }
      break;

    case WAREHOUSE:
      if (value == null) {
        unsetWarehouse();
      } else {
        setWarehouse((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CONNECTION_ID:
      return getConnection_id();

    case USER:
      return getUser();

    case HOST:
      return getHost();

    case DB:
      return getDb();

    case COMMAND:
      return getCommand();

    case CONNECTION_START_TIME:
      return getConnection_start_time();

    case TIME:
      return getTime();

    case STATE:
      return getState();

    case INFO:
      return getInfo();

    case IS_PENDING:
      return getIsPending();

    case WAREHOUSE:
      return getWarehouse();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CONNECTION_ID:
      return isSetConnection_id();
    case USER:
      return isSetUser();
    case HOST:
      return isSetHost();
    case DB:
      return isSetDb();
    case COMMAND:
      return isSetCommand();
    case CONNECTION_START_TIME:
      return isSetConnection_start_time();
    case TIME:
      return isSetTime();
    case STATE:
      return isSetState();
    case INFO:
      return isSetInfo();
    case IS_PENDING:
      return isSetIsPending();
    case WAREHOUSE:
      return isSetWarehouse();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TConnectionInfo)
      return this.equals((TConnectionInfo)that);
    return false;
  }

  public boolean equals(TConnectionInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_connection_id = true && this.isSetConnection_id();
    boolean that_present_connection_id = true && that.isSetConnection_id();
    if (this_present_connection_id || that_present_connection_id) {
      if (!(this_present_connection_id && that_present_connection_id))
        return false;
      if (!this.connection_id.equals(that.connection_id))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_db = true && this.isSetDb();
    boolean that_present_db = true && that.isSetDb();
    if (this_present_db || that_present_db) {
      if (!(this_present_db && that_present_db))
        return false;
      if (!this.db.equals(that.db))
        return false;
    }

    boolean this_present_command = true && this.isSetCommand();
    boolean that_present_command = true && that.isSetCommand();
    if (this_present_command || that_present_command) {
      if (!(this_present_command && that_present_command))
        return false;
      if (!this.command.equals(that.command))
        return false;
    }

    boolean this_present_connection_start_time = true && this.isSetConnection_start_time();
    boolean that_present_connection_start_time = true && that.isSetConnection_start_time();
    if (this_present_connection_start_time || that_present_connection_start_time) {
      if (!(this_present_connection_start_time && that_present_connection_start_time))
        return false;
      if (!this.connection_start_time.equals(that.connection_start_time))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_info = true && this.isSetInfo();
    boolean that_present_info = true && that.isSetInfo();
    if (this_present_info || that_present_info) {
      if (!(this_present_info && that_present_info))
        return false;
      if (!this.info.equals(that.info))
        return false;
    }

    boolean this_present_isPending = true && this.isSetIsPending();
    boolean that_present_isPending = true && that.isSetIsPending();
    if (this_present_isPending || that_present_isPending) {
      if (!(this_present_isPending && that_present_isPending))
        return false;
      if (!this.isPending.equals(that.isPending))
        return false;
    }

    boolean this_present_warehouse = true && this.isSetWarehouse();
    boolean that_present_warehouse = true && that.isSetWarehouse();
    if (this_present_warehouse || that_present_warehouse) {
      if (!(this_present_warehouse && that_present_warehouse))
        return false;
      if (!this.warehouse.equals(that.warehouse))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetConnection_id()) ? 131071 : 524287);
    if (isSetConnection_id())
      hashCode = hashCode * 8191 + connection_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
    if (isSetUser())
      hashCode = hashCode * 8191 + user.hashCode();

    hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
    if (isSetHost())
      hashCode = hashCode * 8191 + host.hashCode();

    hashCode = hashCode * 8191 + ((isSetDb()) ? 131071 : 524287);
    if (isSetDb())
      hashCode = hashCode * 8191 + db.hashCode();

    hashCode = hashCode * 8191 + ((isSetCommand()) ? 131071 : 524287);
    if (isSetCommand())
      hashCode = hashCode * 8191 + command.hashCode();

    hashCode = hashCode * 8191 + ((isSetConnection_start_time()) ? 131071 : 524287);
    if (isSetConnection_start_time())
      hashCode = hashCode * 8191 + connection_start_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetTime()) ? 131071 : 524287);
    if (isSetTime())
      hashCode = hashCode * 8191 + time.hashCode();

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.hashCode();

    hashCode = hashCode * 8191 + ((isSetInfo()) ? 131071 : 524287);
    if (isSetInfo())
      hashCode = hashCode * 8191 + info.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsPending()) ? 131071 : 524287);
    if (isSetIsPending())
      hashCode = hashCode * 8191 + isPending.hashCode();

    hashCode = hashCode * 8191 + ((isSetWarehouse()) ? 131071 : 524287);
    if (isSetWarehouse())
      hashCode = hashCode * 8191 + warehouse.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TConnectionInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetConnection_id(), other.isSetConnection_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnection_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection_id, other.connection_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUser(), other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHost(), other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDb(), other.isSetDb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.db, other.db);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCommand(), other.isSetCommand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConnection_start_time(), other.isSetConnection_start_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnection_start_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connection_start_time, other.connection_start_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTime(), other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetInfo(), other.isSetInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsPending(), other.isSetIsPending());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPending()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPending, other.isPending);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWarehouse(), other.isSetWarehouse());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarehouse()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warehouse, other.warehouse);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TConnectionInfo(");
    boolean first = true;

    if (isSetConnection_id()) {
      sb.append("connection_id:");
      if (this.connection_id == null) {
        sb.append("null");
      } else {
        sb.append(this.connection_id);
      }
      first = false;
    }
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    if (isSetHost()) {
      if (!first) sb.append(", ");
      sb.append("host:");
      if (this.host == null) {
        sb.append("null");
      } else {
        sb.append(this.host);
      }
      first = false;
    }
    if (isSetDb()) {
      if (!first) sb.append(", ");
      sb.append("db:");
      if (this.db == null) {
        sb.append("null");
      } else {
        sb.append(this.db);
      }
      first = false;
    }
    if (isSetCommand()) {
      if (!first) sb.append(", ");
      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
    }
    if (isSetConnection_start_time()) {
      if (!first) sb.append(", ");
      sb.append("connection_start_time:");
      if (this.connection_start_time == null) {
        sb.append("null");
      } else {
        sb.append(this.connection_start_time);
      }
      first = false;
    }
    if (isSetTime()) {
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetInfo()) {
      if (!first) sb.append(", ");
      sb.append("info:");
      if (this.info == null) {
        sb.append("null");
      } else {
        sb.append(this.info);
      }
      first = false;
    }
    if (isSetIsPending()) {
      if (!first) sb.append(", ");
      sb.append("isPending:");
      if (this.isPending == null) {
        sb.append("null");
      } else {
        sb.append(this.isPending);
      }
      first = false;
    }
    if (isSetWarehouse()) {
      if (!first) sb.append(", ");
      sb.append("warehouse:");
      if (this.warehouse == null) {
        sb.append("null");
      } else {
        sb.append(this.warehouse);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TConnectionInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TConnectionInfoStandardScheme getScheme() {
      return new TConnectionInfoStandardScheme();
    }
  }

  private static class TConnectionInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<TConnectionInfo> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TConnectionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONNECTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.connection_id = iprot.readString();
              struct.setConnection_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.db = iprot.readString();
              struct.setDbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMAND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.command = iprot.readString();
              struct.setCommandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONNECTION_START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.connection_start_time = iprot.readString();
              struct.setConnection_start_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time = iprot.readString();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.info = iprot.readString();
              struct.setInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_PENDING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isPending = iprot.readString();
              struct.setIsPendingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WAREHOUSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.warehouse = iprot.readString();
              struct.setWarehouseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TConnectionInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.connection_id != null) {
        if (struct.isSetConnection_id()) {
          oprot.writeFieldBegin(CONNECTION_ID_FIELD_DESC);
          oprot.writeString(struct.connection_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.user != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
      }
      if (struct.host != null) {
        if (struct.isSetHost()) {
          oprot.writeFieldBegin(HOST_FIELD_DESC);
          oprot.writeString(struct.host);
          oprot.writeFieldEnd();
        }
      }
      if (struct.db != null) {
        if (struct.isSetDb()) {
          oprot.writeFieldBegin(DB_FIELD_DESC);
          oprot.writeString(struct.db);
          oprot.writeFieldEnd();
        }
      }
      if (struct.command != null) {
        if (struct.isSetCommand()) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          oprot.writeString(struct.command);
          oprot.writeFieldEnd();
        }
      }
      if (struct.connection_start_time != null) {
        if (struct.isSetConnection_start_time()) {
          oprot.writeFieldBegin(CONNECTION_START_TIME_FIELD_DESC);
          oprot.writeString(struct.connection_start_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.time != null) {
        if (struct.isSetTime()) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
      }
      if (struct.info != null) {
        if (struct.isSetInfo()) {
          oprot.writeFieldBegin(INFO_FIELD_DESC);
          oprot.writeString(struct.info);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isPending != null) {
        if (struct.isSetIsPending()) {
          oprot.writeFieldBegin(IS_PENDING_FIELD_DESC);
          oprot.writeString(struct.isPending);
          oprot.writeFieldEnd();
        }
      }
      if (struct.warehouse != null) {
        if (struct.isSetWarehouse()) {
          oprot.writeFieldBegin(WAREHOUSE_FIELD_DESC);
          oprot.writeString(struct.warehouse);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TConnectionInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TConnectionInfoTupleScheme getScheme() {
      return new TConnectionInfoTupleScheme();
    }
  }

  private static class TConnectionInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<TConnectionInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TConnectionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetConnection_id()) {
        optionals.set(0);
      }
      if (struct.isSetUser()) {
        optionals.set(1);
      }
      if (struct.isSetHost()) {
        optionals.set(2);
      }
      if (struct.isSetDb()) {
        optionals.set(3);
      }
      if (struct.isSetCommand()) {
        optionals.set(4);
      }
      if (struct.isSetConnection_start_time()) {
        optionals.set(5);
      }
      if (struct.isSetTime()) {
        optionals.set(6);
      }
      if (struct.isSetState()) {
        optionals.set(7);
      }
      if (struct.isSetInfo()) {
        optionals.set(8);
      }
      if (struct.isSetIsPending()) {
        optionals.set(9);
      }
      if (struct.isSetWarehouse()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetConnection_id()) {
        oprot.writeString(struct.connection_id);
      }
      if (struct.isSetUser()) {
        oprot.writeString(struct.user);
      }
      if (struct.isSetHost()) {
        oprot.writeString(struct.host);
      }
      if (struct.isSetDb()) {
        oprot.writeString(struct.db);
      }
      if (struct.isSetCommand()) {
        oprot.writeString(struct.command);
      }
      if (struct.isSetConnection_start_time()) {
        oprot.writeString(struct.connection_start_time);
      }
      if (struct.isSetTime()) {
        oprot.writeString(struct.time);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetInfo()) {
        oprot.writeString(struct.info);
      }
      if (struct.isSetIsPending()) {
        oprot.writeString(struct.isPending);
      }
      if (struct.isSetWarehouse()) {
        oprot.writeString(struct.warehouse);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TConnectionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.connection_id = iprot.readString();
        struct.setConnection_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.user = iprot.readString();
        struct.setUserIsSet(true);
      }
      if (incoming.get(2)) {
        struct.host = iprot.readString();
        struct.setHostIsSet(true);
      }
      if (incoming.get(3)) {
        struct.db = iprot.readString();
        struct.setDbIsSet(true);
      }
      if (incoming.get(4)) {
        struct.command = iprot.readString();
        struct.setCommandIsSet(true);
      }
      if (incoming.get(5)) {
        struct.connection_start_time = iprot.readString();
        struct.setConnection_start_timeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.time = iprot.readString();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.info = iprot.readString();
        struct.setInfoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isPending = iprot.readString();
        struct.setIsPendingIsSet(true);
      }
      if (incoming.get(10)) {
        struct.warehouse = iprot.readString();
        struct.setWarehouseIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

