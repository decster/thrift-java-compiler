/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TUpdateFailPointRequest implements org.apache.thrift.TBase<TUpdateFailPointRequest, TUpdateFailPointRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TUpdateFailPointRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUpdateFailPointRequest");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IS_ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("is_enable", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("times", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROBABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("probability", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TUpdateFailPointRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TUpdateFailPointRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // optional
  public boolean is_enable; // optional
  public int times; // optional
  public double probability; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    IS_ENABLE((short)2, "is_enable"),
    TIMES((short)3, "times"),
    PROBABILITY((short)4, "probability");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // IS_ENABLE
          return IS_ENABLE;
        case 3: // TIMES
          return TIMES;
        case 4: // PROBABILITY
          return PROBABILITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_ENABLE_ISSET_ID = 0;
  private static final int __TIMES_ISSET_ID = 1;
  private static final int __PROBABILITY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.IS_ENABLE,_Fields.TIMES,_Fields.PROBABILITY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ENABLE, new org.apache.thrift.meta_data.FieldMetaData("is_enable", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TIMES, new org.apache.thrift.meta_data.FieldMetaData("times", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROBABILITY, new org.apache.thrift.meta_data.FieldMetaData("probability", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUpdateFailPointRequest.class, metaDataMap);
  }

  public TUpdateFailPointRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUpdateFailPointRequest(TUpdateFailPointRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.is_enable = other.is_enable;
    this.times = other.times;
    this.probability = other.probability;
  }

  @Override
  public TUpdateFailPointRequest deepCopy() {
    return new TUpdateFailPointRequest(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setIs_enableIsSet(false);
    this.is_enable = false;
    setTimesIsSet(false);
    this.times = 0;
    setProbabilityIsSet(false);
    this.probability = 0.0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public TUpdateFailPointRequest setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public boolean isIs_enable() {
    return this.is_enable;
  }

  public TUpdateFailPointRequest setIs_enable(boolean is_enable) {
    this.is_enable = is_enable;
    setIs_enableIsSet(true);
    return this;
  }

  public void unsetIs_enable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_ENABLE_ISSET_ID);
  }

  /** Returns true if field is_enable is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_enable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_ENABLE_ISSET_ID);
  }

  public void setIs_enableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_ENABLE_ISSET_ID, value);
  }

  public int getTimes() {
    return this.times;
  }

  public TUpdateFailPointRequest setTimes(int times) {
    this.times = times;
    setTimesIsSet(true);
    return this;
  }

  public void unsetTimes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIMES_ISSET_ID);
  }

  /** Returns true if field times is set (has been assigned a value) and false otherwise */
  public boolean isSetTimes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIMES_ISSET_ID);
  }

  public void setTimesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIMES_ISSET_ID, value);
  }

  public double getProbability() {
    return this.probability;
  }

  public TUpdateFailPointRequest setProbability(double probability) {
    this.probability = probability;
    setProbabilityIsSet(true);
    return this;
  }

  public void unsetProbability() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROBABILITY_ISSET_ID);
  }

  /** Returns true if field probability is set (has been assigned a value) and false otherwise */
  public boolean isSetProbability() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROBABILITY_ISSET_ID);
  }

  public void setProbabilityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROBABILITY_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case IS_ENABLE:
      if (value == null) {
        unsetIs_enable();
      } else {
        setIs_enable((java.lang.Boolean)value);
      }
      break;

    case TIMES:
      if (value == null) {
        unsetTimes();
      } else {
        setTimes((java.lang.Integer)value);
      }
      break;

    case PROBABILITY:
      if (value == null) {
        unsetProbability();
      } else {
        setProbability((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case IS_ENABLE:
      return isIs_enable();

    case TIMES:
      return getTimes();

    case PROBABILITY:
      return getProbability();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case IS_ENABLE:
      return isSetIs_enable();
    case TIMES:
      return isSetTimes();
    case PROBABILITY:
      return isSetProbability();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TUpdateFailPointRequest)
      return this.equals((TUpdateFailPointRequest)that);
    return false;
  }

  public boolean equals(TUpdateFailPointRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_is_enable = true && this.isSetIs_enable();
    boolean that_present_is_enable = true && that.isSetIs_enable();
    if (this_present_is_enable || that_present_is_enable) {
      if (!(this_present_is_enable && that_present_is_enable))
        return false;
      if (this.is_enable != that.is_enable)
        return false;
    }

    boolean this_present_times = true && this.isSetTimes();
    boolean that_present_times = true && that.isSetTimes();
    if (this_present_times || that_present_times) {
      if (!(this_present_times && that_present_times))
        return false;
      if (this.times != that.times)
        return false;
    }

    boolean this_present_probability = true && this.isSetProbability();
    boolean that_present_probability = true && that.isSetProbability();
    if (this_present_probability || that_present_probability) {
      if (!(this_present_probability && that_present_probability))
        return false;
      if (this.probability != that.probability)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_enable()) ? 131071 : 524287);
    if (isSetIs_enable())
      hashCode = hashCode * 8191 + ((is_enable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTimes()) ? 131071 : 524287);
    if (isSetTimes())
      hashCode = hashCode * 8191 + times;

    hashCode = hashCode * 8191 + ((isSetProbability()) ? 131071 : 524287);
    if (isSetProbability())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(probability);

    return hashCode;
  }

  @Override
  public int compareTo(TUpdateFailPointRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_enable(), other.isSetIs_enable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_enable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_enable, other.is_enable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTimes(), other.isSetTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.times, other.times);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProbability(), other.isSetProbability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProbability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.probability, other.probability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TUpdateFailPointRequest(");
    boolean first = true;

    if (isSetName()) {
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetIs_enable()) {
      if (!first) sb.append(", ");
      sb.append("is_enable:");
      sb.append(this.is_enable);
      first = false;
    }
    if (isSetTimes()) {
      if (!first) sb.append(", ");
      sb.append("times:");
      sb.append(this.times);
      first = false;
    }
    if (isSetProbability()) {
      if (!first) sb.append(", ");
      sb.append("probability:");
      sb.append(this.probability);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUpdateFailPointRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TUpdateFailPointRequestStandardScheme getScheme() {
      return new TUpdateFailPointRequestStandardScheme();
    }
  }

  private static class TUpdateFailPointRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TUpdateFailPointRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TUpdateFailPointRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_ENABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_enable = iprot.readBool();
              struct.setIs_enableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.times = iprot.readI32();
              struct.setTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROBABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.probability = iprot.readDouble();
              struct.setProbabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TUpdateFailPointRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_enable()) {
        oprot.writeFieldBegin(IS_ENABLE_FIELD_DESC);
        oprot.writeBool(struct.is_enable);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimes()) {
        oprot.writeFieldBegin(TIMES_FIELD_DESC);
        oprot.writeI32(struct.times);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProbability()) {
        oprot.writeFieldBegin(PROBABILITY_FIELD_DESC);
        oprot.writeDouble(struct.probability);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUpdateFailPointRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TUpdateFailPointRequestTupleScheme getScheme() {
      return new TUpdateFailPointRequestTupleScheme();
    }
  }

  private static class TUpdateFailPointRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TUpdateFailPointRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUpdateFailPointRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetIs_enable()) {
        optionals.set(1);
      }
      if (struct.isSetTimes()) {
        optionals.set(2);
      }
      if (struct.isSetProbability()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetIs_enable()) {
        oprot.writeBool(struct.is_enable);
      }
      if (struct.isSetTimes()) {
        oprot.writeI32(struct.times);
      }
      if (struct.isSetProbability()) {
        oprot.writeDouble(struct.probability);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUpdateFailPointRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.is_enable = iprot.readBool();
        struct.setIs_enableIsSet(true);
      }
      if (incoming.get(2)) {
        struct.times = iprot.readI32();
        struct.setTimesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.probability = iprot.readDouble();
        struct.setProbabilityIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

