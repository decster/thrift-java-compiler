/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TStartCheckpointRequest implements org.apache.thrift.TBase<TStartCheckpointRequest, TStartCheckpointRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TStartCheckpointRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TStartCheckpointRequest");

  private static final org.apache.thrift.protocol.TField EPOCH_FIELD_DESC = new org.apache.thrift.protocol.TField("epoch", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField JOURNAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("journal_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField IS_GLOBAL_STATE_MGR_FIELD_DESC = new org.apache.thrift.protocol.TField("is_global_state_mgr", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TStartCheckpointRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TStartCheckpointRequestTupleSchemeFactory();

  public long epoch; // optional
  public long journal_id; // optional
  public boolean is_global_state_mgr; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EPOCH((short)1, "epoch"),
    JOURNAL_ID((short)2, "journal_id"),
    IS_GLOBAL_STATE_MGR((short)3, "is_global_state_mgr");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EPOCH
          return EPOCH;
        case 2: // JOURNAL_ID
          return JOURNAL_ID;
        case 3: // IS_GLOBAL_STATE_MGR
          return IS_GLOBAL_STATE_MGR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EPOCH_ISSET_ID = 0;
  private static final int __JOURNAL_ID_ISSET_ID = 1;
  private static final int __IS_GLOBAL_STATE_MGR_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EPOCH,_Fields.JOURNAL_ID,_Fields.IS_GLOBAL_STATE_MGR};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EPOCH, new org.apache.thrift.meta_data.FieldMetaData("epoch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.JOURNAL_ID, new org.apache.thrift.meta_data.FieldMetaData("journal_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_GLOBAL_STATE_MGR, new org.apache.thrift.meta_data.FieldMetaData("is_global_state_mgr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TStartCheckpointRequest.class, metaDataMap);
  }

  public TStartCheckpointRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TStartCheckpointRequest(TStartCheckpointRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.epoch = other.epoch;
    this.journal_id = other.journal_id;
    this.is_global_state_mgr = other.is_global_state_mgr;
  }

  @Override
  public TStartCheckpointRequest deepCopy() {
    return new TStartCheckpointRequest(this);
  }

  @Override
  public void clear() {
    setEpochIsSet(false);
    this.epoch = 0;
    setJournal_idIsSet(false);
    this.journal_id = 0;
    setIs_global_state_mgrIsSet(false);
    this.is_global_state_mgr = false;
  }

  public long getEpoch() {
    return this.epoch;
  }

  public TStartCheckpointRequest setEpoch(long epoch) {
    this.epoch = epoch;
    setEpochIsSet(true);
    return this;
  }

  public void unsetEpoch() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EPOCH_ISSET_ID);
  }

  /** Returns true if field epoch is set (has been assigned a value) and false otherwise */
  public boolean isSetEpoch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EPOCH_ISSET_ID);
  }

  public void setEpochIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EPOCH_ISSET_ID, value);
  }

  public long getJournal_id() {
    return this.journal_id;
  }

  public TStartCheckpointRequest setJournal_id(long journal_id) {
    this.journal_id = journal_id;
    setJournal_idIsSet(true);
    return this;
  }

  public void unsetJournal_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOURNAL_ID_ISSET_ID);
  }

  /** Returns true if field journal_id is set (has been assigned a value) and false otherwise */
  public boolean isSetJournal_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOURNAL_ID_ISSET_ID);
  }

  public void setJournal_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOURNAL_ID_ISSET_ID, value);
  }

  public boolean isIs_global_state_mgr() {
    return this.is_global_state_mgr;
  }

  public TStartCheckpointRequest setIs_global_state_mgr(boolean is_global_state_mgr) {
    this.is_global_state_mgr = is_global_state_mgr;
    setIs_global_state_mgrIsSet(true);
    return this;
  }

  public void unsetIs_global_state_mgr() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_GLOBAL_STATE_MGR_ISSET_ID);
  }

  /** Returns true if field is_global_state_mgr is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_global_state_mgr() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_GLOBAL_STATE_MGR_ISSET_ID);
  }

  public void setIs_global_state_mgrIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_GLOBAL_STATE_MGR_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case EPOCH:
      if (value == null) {
        unsetEpoch();
      } else {
        setEpoch((java.lang.Long)value);
      }
      break;

    case JOURNAL_ID:
      if (value == null) {
        unsetJournal_id();
      } else {
        setJournal_id((java.lang.Long)value);
      }
      break;

    case IS_GLOBAL_STATE_MGR:
      if (value == null) {
        unsetIs_global_state_mgr();
      } else {
        setIs_global_state_mgr((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EPOCH:
      return getEpoch();

    case JOURNAL_ID:
      return getJournal_id();

    case IS_GLOBAL_STATE_MGR:
      return isIs_global_state_mgr();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EPOCH:
      return isSetEpoch();
    case JOURNAL_ID:
      return isSetJournal_id();
    case IS_GLOBAL_STATE_MGR:
      return isSetIs_global_state_mgr();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TStartCheckpointRequest)
      return this.equals((TStartCheckpointRequest)that);
    return false;
  }

  public boolean equals(TStartCheckpointRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_epoch = true && this.isSetEpoch();
    boolean that_present_epoch = true && that.isSetEpoch();
    if (this_present_epoch || that_present_epoch) {
      if (!(this_present_epoch && that_present_epoch))
        return false;
      if (this.epoch != that.epoch)
        return false;
    }

    boolean this_present_journal_id = true && this.isSetJournal_id();
    boolean that_present_journal_id = true && that.isSetJournal_id();
    if (this_present_journal_id || that_present_journal_id) {
      if (!(this_present_journal_id && that_present_journal_id))
        return false;
      if (this.journal_id != that.journal_id)
        return false;
    }

    boolean this_present_is_global_state_mgr = true && this.isSetIs_global_state_mgr();
    boolean that_present_is_global_state_mgr = true && that.isSetIs_global_state_mgr();
    if (this_present_is_global_state_mgr || that_present_is_global_state_mgr) {
      if (!(this_present_is_global_state_mgr && that_present_is_global_state_mgr))
        return false;
      if (this.is_global_state_mgr != that.is_global_state_mgr)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEpoch()) ? 131071 : 524287);
    if (isSetEpoch())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(epoch);

    hashCode = hashCode * 8191 + ((isSetJournal_id()) ? 131071 : 524287);
    if (isSetJournal_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(journal_id);

    hashCode = hashCode * 8191 + ((isSetIs_global_state_mgr()) ? 131071 : 524287);
    if (isSetIs_global_state_mgr())
      hashCode = hashCode * 8191 + ((is_global_state_mgr) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TStartCheckpointRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetEpoch(), other.isSetEpoch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEpoch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.epoch, other.epoch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetJournal_id(), other.isSetJournal_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJournal_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.journal_id, other.journal_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_global_state_mgr(), other.isSetIs_global_state_mgr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_global_state_mgr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_global_state_mgr, other.is_global_state_mgr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TStartCheckpointRequest(");
    boolean first = true;

    if (isSetEpoch()) {
      sb.append("epoch:");
      sb.append(this.epoch);
      first = false;
    }
    if (isSetJournal_id()) {
      if (!first) sb.append(", ");
      sb.append("journal_id:");
      sb.append(this.journal_id);
      first = false;
    }
    if (isSetIs_global_state_mgr()) {
      if (!first) sb.append(", ");
      sb.append("is_global_state_mgr:");
      sb.append(this.is_global_state_mgr);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TStartCheckpointRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStartCheckpointRequestStandardScheme getScheme() {
      return new TStartCheckpointRequestStandardScheme();
    }
  }

  private static class TStartCheckpointRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TStartCheckpointRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TStartCheckpointRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EPOCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.epoch = iprot.readI64();
              struct.setEpochIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // JOURNAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.journal_id = iprot.readI64();
              struct.setJournal_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_GLOBAL_STATE_MGR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_global_state_mgr = iprot.readBool();
              struct.setIs_global_state_mgrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TStartCheckpointRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetEpoch()) {
        oprot.writeFieldBegin(EPOCH_FIELD_DESC);
        oprot.writeI64(struct.epoch);
        oprot.writeFieldEnd();
      }
      if (struct.isSetJournal_id()) {
        oprot.writeFieldBegin(JOURNAL_ID_FIELD_DESC);
        oprot.writeI64(struct.journal_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIs_global_state_mgr()) {
        oprot.writeFieldBegin(IS_GLOBAL_STATE_MGR_FIELD_DESC);
        oprot.writeBool(struct.is_global_state_mgr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TStartCheckpointRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TStartCheckpointRequestTupleScheme getScheme() {
      return new TStartCheckpointRequestTupleScheme();
    }
  }

  private static class TStartCheckpointRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TStartCheckpointRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TStartCheckpointRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEpoch()) {
        optionals.set(0);
      }
      if (struct.isSetJournal_id()) {
        optionals.set(1);
      }
      if (struct.isSetIs_global_state_mgr()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetEpoch()) {
        oprot.writeI64(struct.epoch);
      }
      if (struct.isSetJournal_id()) {
        oprot.writeI64(struct.journal_id);
      }
      if (struct.isSetIs_global_state_mgr()) {
        oprot.writeBool(struct.is_global_state_mgr);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TStartCheckpointRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.epoch = iprot.readI64();
        struct.setEpochIsSet(true);
      }
      if (incoming.get(1)) {
        struct.journal_id = iprot.readI64();
        struct.setJournal_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.is_global_state_mgr = iprot.readBool();
        struct.setIs_global_state_mgrIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

