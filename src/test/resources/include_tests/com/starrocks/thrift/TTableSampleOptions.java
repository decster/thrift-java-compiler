/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TTableSampleOptions implements org.apache.thrift.TBase<TTableSampleOptions, TTableSampleOptions._Fields>, java.io.Serializable, Cloneable, Comparable<TTableSampleOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTableSampleOptions");

  private static final org.apache.thrift.protocol.TField ENABLE_SAMPLING_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_sampling", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField SAMPLE_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("sample_method", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RANDOM_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("random_seed", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PROBABILITY_PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("probability_percent", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TTableSampleOptionsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TTableSampleOptionsTupleSchemeFactory();

  public boolean enable_sampling; // optional
  /**
   * 
   * @see SampleMethod
   */
  public @org.apache.thrift.annotation.Nullable SampleMethod sample_method; // optional
  public long random_seed; // optional
  public long probability_percent; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENABLE_SAMPLING((short)1, "enable_sampling"),
    /**
     * 
     * @see SampleMethod
     */
    SAMPLE_METHOD((short)2, "sample_method"),
    RANDOM_SEED((short)3, "random_seed"),
    PROBABILITY_PERCENT((short)4, "probability_percent");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENABLE_SAMPLING
          return ENABLE_SAMPLING;
        case 2: // SAMPLE_METHOD
          return SAMPLE_METHOD;
        case 3: // RANDOM_SEED
          return RANDOM_SEED;
        case 4: // PROBABILITY_PERCENT
          return PROBABILITY_PERCENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENABLE_SAMPLING_ISSET_ID = 0;
  private static final int __RANDOM_SEED_ISSET_ID = 1;
  private static final int __PROBABILITY_PERCENT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ENABLE_SAMPLING,_Fields.SAMPLE_METHOD,_Fields.RANDOM_SEED,_Fields.PROBABILITY_PERCENT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENABLE_SAMPLING, new org.apache.thrift.meta_data.FieldMetaData("enable_sampling", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SAMPLE_METHOD, new org.apache.thrift.meta_data.FieldMetaData("sample_method", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SampleMethod.class)));
    tmpMap.put(_Fields.RANDOM_SEED, new org.apache.thrift.meta_data.FieldMetaData("random_seed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PROBABILITY_PERCENT, new org.apache.thrift.meta_data.FieldMetaData("probability_percent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTableSampleOptions.class, metaDataMap);
  }

  public TTableSampleOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTableSampleOptions(TTableSampleOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.enable_sampling = other.enable_sampling;
    if (other.isSetSample_method()) {
      this.sample_method = other.sample_method;
    }
    this.random_seed = other.random_seed;
    this.probability_percent = other.probability_percent;
  }

  @Override
  public TTableSampleOptions deepCopy() {
    return new TTableSampleOptions(this);
  }

  @Override
  public void clear() {
    setEnable_samplingIsSet(false);
    this.enable_sampling = false;
    this.sample_method = null;
    setRandom_seedIsSet(false);
    this.random_seed = 0;
    setProbability_percentIsSet(false);
    this.probability_percent = 0;
  }

  public boolean isEnable_sampling() {
    return this.enable_sampling;
  }

  public TTableSampleOptions setEnable_sampling(boolean enable_sampling) {
    this.enable_sampling = enable_sampling;
    setEnable_samplingIsSet(true);
    return this;
  }

  public void unsetEnable_sampling() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_SAMPLING_ISSET_ID);
  }

  /** Returns true if field enable_sampling is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_sampling() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_SAMPLING_ISSET_ID);
  }

  public void setEnable_samplingIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_SAMPLING_ISSET_ID, value);
  }

  /**
   * 
   * @see SampleMethod
   */
  @org.apache.thrift.annotation.Nullable
  public SampleMethod getSample_method() {
    return this.sample_method;
  }

  /**
   * 
   * @see SampleMethod
   */
  public TTableSampleOptions setSample_method(@org.apache.thrift.annotation.Nullable SampleMethod sample_method) {
    this.sample_method = sample_method;
    return this;
  }

  public void unsetSample_method() {
    this.sample_method = null;
  }

  /** Returns true if field sample_method is set (has been assigned a value) and false otherwise */
  public boolean isSetSample_method() {
    return this.sample_method != null;
  }

  public void setSample_methodIsSet(boolean value) {
    if (!value) {
      this.sample_method = null;
    }
  }

  public long getRandom_seed() {
    return this.random_seed;
  }

  public TTableSampleOptions setRandom_seed(long random_seed) {
    this.random_seed = random_seed;
    setRandom_seedIsSet(true);
    return this;
  }

  public void unsetRandom_seed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANDOM_SEED_ISSET_ID);
  }

  /** Returns true if field random_seed is set (has been assigned a value) and false otherwise */
  public boolean isSetRandom_seed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANDOM_SEED_ISSET_ID);
  }

  public void setRandom_seedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANDOM_SEED_ISSET_ID, value);
  }

  public long getProbability_percent() {
    return this.probability_percent;
  }

  public TTableSampleOptions setProbability_percent(long probability_percent) {
    this.probability_percent = probability_percent;
    setProbability_percentIsSet(true);
    return this;
  }

  public void unsetProbability_percent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROBABILITY_PERCENT_ISSET_ID);
  }

  /** Returns true if field probability_percent is set (has been assigned a value) and false otherwise */
  public boolean isSetProbability_percent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROBABILITY_PERCENT_ISSET_ID);
  }

  public void setProbability_percentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROBABILITY_PERCENT_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ENABLE_SAMPLING:
      if (value == null) {
        unsetEnable_sampling();
      } else {
        setEnable_sampling((java.lang.Boolean)value);
      }
      break;

    case SAMPLE_METHOD:
      if (value == null) {
        unsetSample_method();
      } else {
        setSample_method((SampleMethod)value);
      }
      break;

    case RANDOM_SEED:
      if (value == null) {
        unsetRandom_seed();
      } else {
        setRandom_seed((java.lang.Long)value);
      }
      break;

    case PROBABILITY_PERCENT:
      if (value == null) {
        unsetProbability_percent();
      } else {
        setProbability_percent((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ENABLE_SAMPLING:
      return isEnable_sampling();

    case SAMPLE_METHOD:
      return getSample_method();

    case RANDOM_SEED:
      return getRandom_seed();

    case PROBABILITY_PERCENT:
      return getProbability_percent();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ENABLE_SAMPLING:
      return isSetEnable_sampling();
    case SAMPLE_METHOD:
      return isSetSample_method();
    case RANDOM_SEED:
      return isSetRandom_seed();
    case PROBABILITY_PERCENT:
      return isSetProbability_percent();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TTableSampleOptions)
      return this.equals((TTableSampleOptions)that);
    return false;
  }

  public boolean equals(TTableSampleOptions that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_enable_sampling = true && this.isSetEnable_sampling();
    boolean that_present_enable_sampling = true && that.isSetEnable_sampling();
    if (this_present_enable_sampling || that_present_enable_sampling) {
      if (!(this_present_enable_sampling && that_present_enable_sampling))
        return false;
      if (this.enable_sampling != that.enable_sampling)
        return false;
    }

    boolean this_present_sample_method = true && this.isSetSample_method();
    boolean that_present_sample_method = true && that.isSetSample_method();
    if (this_present_sample_method || that_present_sample_method) {
      if (!(this_present_sample_method && that_present_sample_method))
        return false;
      if (!this.sample_method.equals(that.sample_method))
        return false;
    }

    boolean this_present_random_seed = true && this.isSetRandom_seed();
    boolean that_present_random_seed = true && that.isSetRandom_seed();
    if (this_present_random_seed || that_present_random_seed) {
      if (!(this_present_random_seed && that_present_random_seed))
        return false;
      if (this.random_seed != that.random_seed)
        return false;
    }

    boolean this_present_probability_percent = true && this.isSetProbability_percent();
    boolean that_present_probability_percent = true && that.isSetProbability_percent();
    if (this_present_probability_percent || that_present_probability_percent) {
      if (!(this_present_probability_percent && that_present_probability_percent))
        return false;
      if (this.probability_percent != that.probability_percent)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEnable_sampling()) ? 131071 : 524287);
    if (isSetEnable_sampling())
      hashCode = hashCode * 8191 + ((enable_sampling) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetSample_method()) ? 131071 : 524287);
    if (isSetSample_method())
      hashCode = hashCode * 8191 + sample_method.getValue();

    hashCode = hashCode * 8191 + ((isSetRandom_seed()) ? 131071 : 524287);
    if (isSetRandom_seed())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(random_seed);

    hashCode = hashCode * 8191 + ((isSetProbability_percent()) ? 131071 : 524287);
    if (isSetProbability_percent())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(probability_percent);

    return hashCode;
  }

  @Override
  public int compareTo(TTableSampleOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetEnable_sampling(), other.isSetEnable_sampling());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_sampling()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_sampling, other.enable_sampling);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSample_method(), other.isSetSample_method());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSample_method()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sample_method, other.sample_method);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRandom_seed(), other.isSetRandom_seed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRandom_seed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.random_seed, other.random_seed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetProbability_percent(), other.isSetProbability_percent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProbability_percent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.probability_percent, other.probability_percent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TTableSampleOptions(");
    boolean first = true;

    if (isSetEnable_sampling()) {
      sb.append("enable_sampling:");
      sb.append(this.enable_sampling);
      first = false;
    }
    if (isSetSample_method()) {
      if (!first) sb.append(", ");
      sb.append("sample_method:");
      if (this.sample_method == null) {
        sb.append("null");
      } else {
        sb.append(this.sample_method);
      }
      first = false;
    }
    if (isSetRandom_seed()) {
      if (!first) sb.append(", ");
      sb.append("random_seed:");
      sb.append(this.random_seed);
      first = false;
    }
    if (isSetProbability_percent()) {
      if (!first) sb.append(", ");
      sb.append("probability_percent:");
      sb.append(this.probability_percent);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTableSampleOptionsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTableSampleOptionsStandardScheme getScheme() {
      return new TTableSampleOptionsStandardScheme();
    }
  }

  private static class TTableSampleOptionsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TTableSampleOptions> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TTableSampleOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENABLE_SAMPLING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_sampling = iprot.readBool();
              struct.setEnable_samplingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SAMPLE_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sample_method = com.starrocks.thrift.SampleMethod.findByValue(iprot.readI32());
              struct.setSample_methodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RANDOM_SEED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.random_seed = iprot.readI64();
              struct.setRandom_seedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROBABILITY_PERCENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.probability_percent = iprot.readI64();
              struct.setProbability_percentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TTableSampleOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetEnable_sampling()) {
        oprot.writeFieldBegin(ENABLE_SAMPLING_FIELD_DESC);
        oprot.writeBool(struct.enable_sampling);
        oprot.writeFieldEnd();
      }
      if (struct.sample_method != null) {
        if (struct.isSetSample_method()) {
          oprot.writeFieldBegin(SAMPLE_METHOD_FIELD_DESC);
          oprot.writeI32(struct.sample_method.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRandom_seed()) {
        oprot.writeFieldBegin(RANDOM_SEED_FIELD_DESC);
        oprot.writeI64(struct.random_seed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProbability_percent()) {
        oprot.writeFieldBegin(PROBABILITY_PERCENT_FIELD_DESC);
        oprot.writeI64(struct.probability_percent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTableSampleOptionsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TTableSampleOptionsTupleScheme getScheme() {
      return new TTableSampleOptionsTupleScheme();
    }
  }

  private static class TTableSampleOptionsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TTableSampleOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTableSampleOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEnable_sampling()) {
        optionals.set(0);
      }
      if (struct.isSetSample_method()) {
        optionals.set(1);
      }
      if (struct.isSetRandom_seed()) {
        optionals.set(2);
      }
      if (struct.isSetProbability_percent()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEnable_sampling()) {
        oprot.writeBool(struct.enable_sampling);
      }
      if (struct.isSetSample_method()) {
        oprot.writeI32(struct.sample_method.getValue());
      }
      if (struct.isSetRandom_seed()) {
        oprot.writeI64(struct.random_seed);
      }
      if (struct.isSetProbability_percent()) {
        oprot.writeI64(struct.probability_percent);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTableSampleOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.enable_sampling = iprot.readBool();
        struct.setEnable_samplingIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sample_method = com.starrocks.thrift.SampleMethod.findByValue(iprot.readI32());
        struct.setSample_methodIsSet(true);
      }
      if (incoming.get(2)) {
        struct.random_seed = iprot.readI64();
        struct.setRandom_seedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.probability_percent = iprot.readI64();
        struct.setProbability_percentIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

