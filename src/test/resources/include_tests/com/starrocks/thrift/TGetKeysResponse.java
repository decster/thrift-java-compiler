/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TGetKeysResponse implements org.apache.thrift.TBase<TGetKeysResponse, TGetKeysResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TGetKeysResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGetKeysResponse");

  private static final org.apache.thrift.protocol.TField KEY_METAS_FIELD_DESC = new org.apache.thrift.protocol.TField("key_metas", org.apache.thrift.protocol.TType.LIST, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TGetKeysResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TGetKeysResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> key_metas; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY_METAS((short)1, "key_metas");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY_METAS
          return KEY_METAS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.KEY_METAS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY_METAS, new org.apache.thrift.meta_data.FieldMetaData("key_metas", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGetKeysResponse.class, metaDataMap);
  }

  public TGetKeysResponse() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGetKeysResponse(TGetKeysResponse other) {
    if (other.isSetKey_metas()) {
      java.util.List<java.nio.ByteBuffer> __this__key_metas = new java.util.ArrayList<java.nio.ByteBuffer>(other.key_metas);
      this.key_metas = __this__key_metas;
    }
  }

  @Override
  public TGetKeysResponse deepCopy() {
    return new TGetKeysResponse(this);
  }

  @Override
  public void clear() {
    this.key_metas = null;
  }

  public int getKey_metasSize() {
    return (this.key_metas == null) ? 0 : this.key_metas.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getKey_metasIterator() {
    return (this.key_metas == null) ? null : this.key_metas.iterator();
  }

  public void addToKey_metas(java.nio.ByteBuffer elem) {
    if (this.key_metas == null) {
      this.key_metas = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.key_metas.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getKey_metas() {
    return this.key_metas;
  }

  public TGetKeysResponse setKey_metas(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> key_metas) {
    this.key_metas = key_metas;
    return this;
  }

  public void unsetKey_metas() {
    this.key_metas = null;
  }

  /** Returns true if field key_metas is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_metas() {
    return this.key_metas != null;
  }

  public void setKey_metasIsSet(boolean value) {
    if (!value) {
      this.key_metas = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case KEY_METAS:
      if (value == null) {
        unsetKey_metas();
      } else {
        setKey_metas((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY_METAS:
      return getKey_metas();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case KEY_METAS:
      return isSetKey_metas();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TGetKeysResponse)
      return this.equals((TGetKeysResponse)that);
    return false;
  }

  public boolean equals(TGetKeysResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_key_metas = true && this.isSetKey_metas();
    boolean that_present_key_metas = true && that.isSetKey_metas();
    if (this_present_key_metas || that_present_key_metas) {
      if (!(this_present_key_metas && that_present_key_metas))
        return false;
      if (!this.key_metas.equals(that.key_metas))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetKey_metas()) ? 131071 : 524287);
    if (isSetKey_metas())
      hashCode = hashCode * 8191 + key_metas.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TGetKeysResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetKey_metas(), other.isSetKey_metas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_metas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_metas, other.key_metas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TGetKeysResponse(");
    boolean first = true;

    if (isSetKey_metas()) {
      sb.append("key_metas:");
      if (this.key_metas == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.key_metas, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetKeysResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGetKeysResponseStandardScheme getScheme() {
      return new TGetKeysResponseStandardScheme();
    }
  }

  private static class TGetKeysResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<TGetKeysResponse> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetKeysResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY_METAS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list870 = iprot.readListBegin();
                struct.key_metas = new java.util.ArrayList<java.nio.ByteBuffer>(_list870.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem871;
                for (int _i872 = 0; _i872 < _list870.size; ++_i872)
                {
                  _elem871 = iprot.readBinary();
                  struct.key_metas.add(_elem871);
                }
                iprot.readListEnd();
              }
              struct.setKey_metasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetKeysResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.key_metas != null) {
        if (struct.isSetKey_metas()) {
          oprot.writeFieldBegin(KEY_METAS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.key_metas.size()));
            for (java.nio.ByteBuffer _iter873 : struct.key_metas)
            {
              oprot.writeBinary(_iter873);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGetKeysResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGetKeysResponseTupleScheme getScheme() {
      return new TGetKeysResponseTupleScheme();
    }
  }

  private static class TGetKeysResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<TGetKeysResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetKeysResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetKey_metas()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetKey_metas()) {
        {
          oprot.writeI32(struct.key_metas.size());
          for (java.nio.ByteBuffer _iter874 : struct.key_metas)
          {
            oprot.writeBinary(_iter874);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetKeysResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list875 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.key_metas = new java.util.ArrayList<java.nio.ByteBuffer>(_list875.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem876;
          for (int _i877 = 0; _i877 < _list875.size; ++_i877)
          {
            _elem876 = iprot.readBinary();
            struct.key_metas.add(_elem876);
          }
        }
        struct.setKey_metasIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

