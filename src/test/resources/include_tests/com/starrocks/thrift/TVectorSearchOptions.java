/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TVectorSearchOptions implements org.apache.thrift.TBase<TVectorSearchOptions, TVectorSearchOptions._Fields>, java.io.Serializable, Cloneable, Comparable<TVectorSearchOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TVectorSearchOptions");

  private static final org.apache.thrift.protocol.TField ENABLE_USE_ANN_FIELD_DESC = new org.apache.thrift.protocol.TField("enable_use_ann", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField VECTOR_LIMIT_K_FIELD_DESC = new org.apache.thrift.protocol.TField("vector_limit_k", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField VECTOR_DISTANCE_COLUMN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("vector_distance_column_name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField QUERY_VECTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("query_vector", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField QUERY_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("query_params", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField VECTOR_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("vector_range", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField RESULT_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("result_order", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField USE_IVFPQ_FIELD_DESC = new org.apache.thrift.protocol.TField("use_ivfpq", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField PQ_REFINE_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("pq_refine_factor", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField K_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("k_factor", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField VECTOR_SLOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vector_slot_id", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TVectorSearchOptionsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TVectorSearchOptionsTupleSchemeFactory();

  public boolean enable_use_ann; // optional
  public long vector_limit_k; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String vector_distance_column_name; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> query_vector; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> query_params; // optional
  public double vector_range; // optional
  public int result_order; // optional
  public boolean use_ivfpq; // optional
  public double pq_refine_factor; // optional
  public double k_factor; // optional
  public int vector_slot_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ENABLE_USE_ANN((short)1, "enable_use_ann"),
    VECTOR_LIMIT_K((short)2, "vector_limit_k"),
    VECTOR_DISTANCE_COLUMN_NAME((short)3, "vector_distance_column_name"),
    QUERY_VECTOR((short)4, "query_vector"),
    QUERY_PARAMS((short)5, "query_params"),
    VECTOR_RANGE((short)6, "vector_range"),
    RESULT_ORDER((short)7, "result_order"),
    USE_IVFPQ((short)8, "use_ivfpq"),
    PQ_REFINE_FACTOR((short)9, "pq_refine_factor"),
    K_FACTOR((short)10, "k_factor"),
    VECTOR_SLOT_ID((short)11, "vector_slot_id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENABLE_USE_ANN
          return ENABLE_USE_ANN;
        case 2: // VECTOR_LIMIT_K
          return VECTOR_LIMIT_K;
        case 3: // VECTOR_DISTANCE_COLUMN_NAME
          return VECTOR_DISTANCE_COLUMN_NAME;
        case 4: // QUERY_VECTOR
          return QUERY_VECTOR;
        case 5: // QUERY_PARAMS
          return QUERY_PARAMS;
        case 6: // VECTOR_RANGE
          return VECTOR_RANGE;
        case 7: // RESULT_ORDER
          return RESULT_ORDER;
        case 8: // USE_IVFPQ
          return USE_IVFPQ;
        case 9: // PQ_REFINE_FACTOR
          return PQ_REFINE_FACTOR;
        case 10: // K_FACTOR
          return K_FACTOR;
        case 11: // VECTOR_SLOT_ID
          return VECTOR_SLOT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ENABLE_USE_ANN_ISSET_ID = 0;
  private static final int __VECTOR_LIMIT_K_ISSET_ID = 1;
  private static final int __VECTOR_RANGE_ISSET_ID = 2;
  private static final int __RESULT_ORDER_ISSET_ID = 3;
  private static final int __USE_IVFPQ_ISSET_ID = 4;
  private static final int __PQ_REFINE_FACTOR_ISSET_ID = 5;
  private static final int __K_FACTOR_ISSET_ID = 6;
  private static final int __VECTOR_SLOT_ID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ENABLE_USE_ANN,_Fields.VECTOR_LIMIT_K,_Fields.VECTOR_DISTANCE_COLUMN_NAME,_Fields.QUERY_VECTOR,_Fields.QUERY_PARAMS,_Fields.VECTOR_RANGE,_Fields.RESULT_ORDER,_Fields.USE_IVFPQ,_Fields.PQ_REFINE_FACTOR,_Fields.K_FACTOR,_Fields.VECTOR_SLOT_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENABLE_USE_ANN, new org.apache.thrift.meta_data.FieldMetaData("enable_use_ann", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VECTOR_LIMIT_K, new org.apache.thrift.meta_data.FieldMetaData("vector_limit_k", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VECTOR_DISTANCE_COLUMN_NAME, new org.apache.thrift.meta_data.FieldMetaData("vector_distance_column_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_VECTOR, new org.apache.thrift.meta_data.FieldMetaData("query_vector", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.QUERY_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("query_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VECTOR_RANGE, new org.apache.thrift.meta_data.FieldMetaData("vector_range", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESULT_ORDER, new org.apache.thrift.meta_data.FieldMetaData("result_order", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USE_IVFPQ, new org.apache.thrift.meta_data.FieldMetaData("use_ivfpq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PQ_REFINE_FACTOR, new org.apache.thrift.meta_data.FieldMetaData("pq_refine_factor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.K_FACTOR, new org.apache.thrift.meta_data.FieldMetaData("k_factor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VECTOR_SLOT_ID, new org.apache.thrift.meta_data.FieldMetaData("vector_slot_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TVectorSearchOptions.class, metaDataMap);
  }

  public TVectorSearchOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TVectorSearchOptions(TVectorSearchOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.enable_use_ann = other.enable_use_ann;
    this.vector_limit_k = other.vector_limit_k;
    if (other.isSetVector_distance_column_name()) {
      this.vector_distance_column_name = other.vector_distance_column_name;
    }
    if (other.isSetQuery_vector()) {
      java.util.List<java.lang.String> __this__query_vector = new java.util.ArrayList<java.lang.String>(other.query_vector);
      this.query_vector = __this__query_vector;
    }
    if (other.isSetQuery_params()) {
      java.util.Map<java.lang.String,java.lang.String> __this__query_params = new java.util.HashMap<java.lang.String,java.lang.String>(other.query_params);
      this.query_params = __this__query_params;
    }
    this.vector_range = other.vector_range;
    this.result_order = other.result_order;
    this.use_ivfpq = other.use_ivfpq;
    this.pq_refine_factor = other.pq_refine_factor;
    this.k_factor = other.k_factor;
    this.vector_slot_id = other.vector_slot_id;
  }

  @Override
  public TVectorSearchOptions deepCopy() {
    return new TVectorSearchOptions(this);
  }

  @Override
  public void clear() {
    setEnable_use_annIsSet(false);
    this.enable_use_ann = false;
    setVector_limit_kIsSet(false);
    this.vector_limit_k = 0;
    this.vector_distance_column_name = null;
    this.query_vector = null;
    this.query_params = null;
    setVector_rangeIsSet(false);
    this.vector_range = 0.0;
    setResult_orderIsSet(false);
    this.result_order = 0;
    setUse_ivfpqIsSet(false);
    this.use_ivfpq = false;
    setPq_refine_factorIsSet(false);
    this.pq_refine_factor = 0.0;
    setK_factorIsSet(false);
    this.k_factor = 0.0;
    setVector_slot_idIsSet(false);
    this.vector_slot_id = 0;
  }

  public boolean isEnable_use_ann() {
    return this.enable_use_ann;
  }

  public TVectorSearchOptions setEnable_use_ann(boolean enable_use_ann) {
    this.enable_use_ann = enable_use_ann;
    setEnable_use_annIsSet(true);
    return this;
  }

  public void unsetEnable_use_ann() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENABLE_USE_ANN_ISSET_ID);
  }

  /** Returns true if field enable_use_ann is set (has been assigned a value) and false otherwise */
  public boolean isSetEnable_use_ann() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENABLE_USE_ANN_ISSET_ID);
  }

  public void setEnable_use_annIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENABLE_USE_ANN_ISSET_ID, value);
  }

  public long getVector_limit_k() {
    return this.vector_limit_k;
  }

  public TVectorSearchOptions setVector_limit_k(long vector_limit_k) {
    this.vector_limit_k = vector_limit_k;
    setVector_limit_kIsSet(true);
    return this;
  }

  public void unsetVector_limit_k() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VECTOR_LIMIT_K_ISSET_ID);
  }

  /** Returns true if field vector_limit_k is set (has been assigned a value) and false otherwise */
  public boolean isSetVector_limit_k() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VECTOR_LIMIT_K_ISSET_ID);
  }

  public void setVector_limit_kIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VECTOR_LIMIT_K_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVector_distance_column_name() {
    return this.vector_distance_column_name;
  }

  public TVectorSearchOptions setVector_distance_column_name(@org.apache.thrift.annotation.Nullable java.lang.String vector_distance_column_name) {
    this.vector_distance_column_name = vector_distance_column_name;
    return this;
  }

  public void unsetVector_distance_column_name() {
    this.vector_distance_column_name = null;
  }

  /** Returns true if field vector_distance_column_name is set (has been assigned a value) and false otherwise */
  public boolean isSetVector_distance_column_name() {
    return this.vector_distance_column_name != null;
  }

  public void setVector_distance_column_nameIsSet(boolean value) {
    if (!value) {
      this.vector_distance_column_name = null;
    }
  }

  public int getQuery_vectorSize() {
    return (this.query_vector == null) ? 0 : this.query_vector.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getQuery_vectorIterator() {
    return (this.query_vector == null) ? null : this.query_vector.iterator();
  }

  public void addToQuery_vector(java.lang.String elem) {
    if (this.query_vector == null) {
      this.query_vector = new java.util.ArrayList<java.lang.String>();
    }
    this.query_vector.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getQuery_vector() {
    return this.query_vector;
  }

  public TVectorSearchOptions setQuery_vector(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> query_vector) {
    this.query_vector = query_vector;
    return this;
  }

  public void unsetQuery_vector() {
    this.query_vector = null;
  }

  /** Returns true if field query_vector is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_vector() {
    return this.query_vector != null;
  }

  public void setQuery_vectorIsSet(boolean value) {
    if (!value) {
      this.query_vector = null;
    }
  }

  public int getQuery_paramsSize() {
    return (this.query_params == null) ? 0 : this.query_params.size();
  }

  public void putToQuery_params(java.lang.String key, java.lang.String val) {
    if (this.query_params == null) {
      this.query_params = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.query_params.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getQuery_params() {
    return this.query_params;
  }

  public TVectorSearchOptions setQuery_params(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> query_params) {
    this.query_params = query_params;
    return this;
  }

  public void unsetQuery_params() {
    this.query_params = null;
  }

  /** Returns true if field query_params is set (has been assigned a value) and false otherwise */
  public boolean isSetQuery_params() {
    return this.query_params != null;
  }

  public void setQuery_paramsIsSet(boolean value) {
    if (!value) {
      this.query_params = null;
    }
  }

  public double getVector_range() {
    return this.vector_range;
  }

  public TVectorSearchOptions setVector_range(double vector_range) {
    this.vector_range = vector_range;
    setVector_rangeIsSet(true);
    return this;
  }

  public void unsetVector_range() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VECTOR_RANGE_ISSET_ID);
  }

  /** Returns true if field vector_range is set (has been assigned a value) and false otherwise */
  public boolean isSetVector_range() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VECTOR_RANGE_ISSET_ID);
  }

  public void setVector_rangeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VECTOR_RANGE_ISSET_ID, value);
  }

  public int getResult_order() {
    return this.result_order;
  }

  public TVectorSearchOptions setResult_order(int result_order) {
    this.result_order = result_order;
    setResult_orderIsSet(true);
    return this;
  }

  public void unsetResult_order() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESULT_ORDER_ISSET_ID);
  }

  /** Returns true if field result_order is set (has been assigned a value) and false otherwise */
  public boolean isSetResult_order() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESULT_ORDER_ISSET_ID);
  }

  public void setResult_orderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESULT_ORDER_ISSET_ID, value);
  }

  public boolean isUse_ivfpq() {
    return this.use_ivfpq;
  }

  public TVectorSearchOptions setUse_ivfpq(boolean use_ivfpq) {
    this.use_ivfpq = use_ivfpq;
    setUse_ivfpqIsSet(true);
    return this;
  }

  public void unsetUse_ivfpq() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USE_IVFPQ_ISSET_ID);
  }

  /** Returns true if field use_ivfpq is set (has been assigned a value) and false otherwise */
  public boolean isSetUse_ivfpq() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USE_IVFPQ_ISSET_ID);
  }

  public void setUse_ivfpqIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USE_IVFPQ_ISSET_ID, value);
  }

  public double getPq_refine_factor() {
    return this.pq_refine_factor;
  }

  public TVectorSearchOptions setPq_refine_factor(double pq_refine_factor) {
    this.pq_refine_factor = pq_refine_factor;
    setPq_refine_factorIsSet(true);
    return this;
  }

  public void unsetPq_refine_factor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PQ_REFINE_FACTOR_ISSET_ID);
  }

  /** Returns true if field pq_refine_factor is set (has been assigned a value) and false otherwise */
  public boolean isSetPq_refine_factor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PQ_REFINE_FACTOR_ISSET_ID);
  }

  public void setPq_refine_factorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PQ_REFINE_FACTOR_ISSET_ID, value);
  }

  public double getK_factor() {
    return this.k_factor;
  }

  public TVectorSearchOptions setK_factor(double k_factor) {
    this.k_factor = k_factor;
    setK_factorIsSet(true);
    return this;
  }

  public void unsetK_factor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __K_FACTOR_ISSET_ID);
  }

  /** Returns true if field k_factor is set (has been assigned a value) and false otherwise */
  public boolean isSetK_factor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __K_FACTOR_ISSET_ID);
  }

  public void setK_factorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __K_FACTOR_ISSET_ID, value);
  }

  public int getVector_slot_id() {
    return this.vector_slot_id;
  }

  public TVectorSearchOptions setVector_slot_id(int vector_slot_id) {
    this.vector_slot_id = vector_slot_id;
    setVector_slot_idIsSet(true);
    return this;
  }

  public void unsetVector_slot_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VECTOR_SLOT_ID_ISSET_ID);
  }

  /** Returns true if field vector_slot_id is set (has been assigned a value) and false otherwise */
  public boolean isSetVector_slot_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VECTOR_SLOT_ID_ISSET_ID);
  }

  public void setVector_slot_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VECTOR_SLOT_ID_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ENABLE_USE_ANN:
      if (value == null) {
        unsetEnable_use_ann();
      } else {
        setEnable_use_ann((java.lang.Boolean)value);
      }
      break;

    case VECTOR_LIMIT_K:
      if (value == null) {
        unsetVector_limit_k();
      } else {
        setVector_limit_k((java.lang.Long)value);
      }
      break;

    case VECTOR_DISTANCE_COLUMN_NAME:
      if (value == null) {
        unsetVector_distance_column_name();
      } else {
        setVector_distance_column_name((java.lang.String)value);
      }
      break;

    case QUERY_VECTOR:
      if (value == null) {
        unsetQuery_vector();
      } else {
        setQuery_vector((java.util.List<java.lang.String>)value);
      }
      break;

    case QUERY_PARAMS:
      if (value == null) {
        unsetQuery_params();
      } else {
        setQuery_params((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case VECTOR_RANGE:
      if (value == null) {
        unsetVector_range();
      } else {
        setVector_range((java.lang.Double)value);
      }
      break;

    case RESULT_ORDER:
      if (value == null) {
        unsetResult_order();
      } else {
        setResult_order((java.lang.Integer)value);
      }
      break;

    case USE_IVFPQ:
      if (value == null) {
        unsetUse_ivfpq();
      } else {
        setUse_ivfpq((java.lang.Boolean)value);
      }
      break;

    case PQ_REFINE_FACTOR:
      if (value == null) {
        unsetPq_refine_factor();
      } else {
        setPq_refine_factor((java.lang.Double)value);
      }
      break;

    case K_FACTOR:
      if (value == null) {
        unsetK_factor();
      } else {
        setK_factor((java.lang.Double)value);
      }
      break;

    case VECTOR_SLOT_ID:
      if (value == null) {
        unsetVector_slot_id();
      } else {
        setVector_slot_id((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ENABLE_USE_ANN:
      return isEnable_use_ann();

    case VECTOR_LIMIT_K:
      return getVector_limit_k();

    case VECTOR_DISTANCE_COLUMN_NAME:
      return getVector_distance_column_name();

    case QUERY_VECTOR:
      return getQuery_vector();

    case QUERY_PARAMS:
      return getQuery_params();

    case VECTOR_RANGE:
      return getVector_range();

    case RESULT_ORDER:
      return getResult_order();

    case USE_IVFPQ:
      return isUse_ivfpq();

    case PQ_REFINE_FACTOR:
      return getPq_refine_factor();

    case K_FACTOR:
      return getK_factor();

    case VECTOR_SLOT_ID:
      return getVector_slot_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ENABLE_USE_ANN:
      return isSetEnable_use_ann();
    case VECTOR_LIMIT_K:
      return isSetVector_limit_k();
    case VECTOR_DISTANCE_COLUMN_NAME:
      return isSetVector_distance_column_name();
    case QUERY_VECTOR:
      return isSetQuery_vector();
    case QUERY_PARAMS:
      return isSetQuery_params();
    case VECTOR_RANGE:
      return isSetVector_range();
    case RESULT_ORDER:
      return isSetResult_order();
    case USE_IVFPQ:
      return isSetUse_ivfpq();
    case PQ_REFINE_FACTOR:
      return isSetPq_refine_factor();
    case K_FACTOR:
      return isSetK_factor();
    case VECTOR_SLOT_ID:
      return isSetVector_slot_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TVectorSearchOptions)
      return this.equals((TVectorSearchOptions)that);
    return false;
  }

  public boolean equals(TVectorSearchOptions that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_enable_use_ann = true && this.isSetEnable_use_ann();
    boolean that_present_enable_use_ann = true && that.isSetEnable_use_ann();
    if (this_present_enable_use_ann || that_present_enable_use_ann) {
      if (!(this_present_enable_use_ann && that_present_enable_use_ann))
        return false;
      if (this.enable_use_ann != that.enable_use_ann)
        return false;
    }

    boolean this_present_vector_limit_k = true && this.isSetVector_limit_k();
    boolean that_present_vector_limit_k = true && that.isSetVector_limit_k();
    if (this_present_vector_limit_k || that_present_vector_limit_k) {
      if (!(this_present_vector_limit_k && that_present_vector_limit_k))
        return false;
      if (this.vector_limit_k != that.vector_limit_k)
        return false;
    }

    boolean this_present_vector_distance_column_name = true && this.isSetVector_distance_column_name();
    boolean that_present_vector_distance_column_name = true && that.isSetVector_distance_column_name();
    if (this_present_vector_distance_column_name || that_present_vector_distance_column_name) {
      if (!(this_present_vector_distance_column_name && that_present_vector_distance_column_name))
        return false;
      if (!this.vector_distance_column_name.equals(that.vector_distance_column_name))
        return false;
    }

    boolean this_present_query_vector = true && this.isSetQuery_vector();
    boolean that_present_query_vector = true && that.isSetQuery_vector();
    if (this_present_query_vector || that_present_query_vector) {
      if (!(this_present_query_vector && that_present_query_vector))
        return false;
      if (!this.query_vector.equals(that.query_vector))
        return false;
    }

    boolean this_present_query_params = true && this.isSetQuery_params();
    boolean that_present_query_params = true && that.isSetQuery_params();
    if (this_present_query_params || that_present_query_params) {
      if (!(this_present_query_params && that_present_query_params))
        return false;
      if (!this.query_params.equals(that.query_params))
        return false;
    }

    boolean this_present_vector_range = true && this.isSetVector_range();
    boolean that_present_vector_range = true && that.isSetVector_range();
    if (this_present_vector_range || that_present_vector_range) {
      if (!(this_present_vector_range && that_present_vector_range))
        return false;
      if (this.vector_range != that.vector_range)
        return false;
    }

    boolean this_present_result_order = true && this.isSetResult_order();
    boolean that_present_result_order = true && that.isSetResult_order();
    if (this_present_result_order || that_present_result_order) {
      if (!(this_present_result_order && that_present_result_order))
        return false;
      if (this.result_order != that.result_order)
        return false;
    }

    boolean this_present_use_ivfpq = true && this.isSetUse_ivfpq();
    boolean that_present_use_ivfpq = true && that.isSetUse_ivfpq();
    if (this_present_use_ivfpq || that_present_use_ivfpq) {
      if (!(this_present_use_ivfpq && that_present_use_ivfpq))
        return false;
      if (this.use_ivfpq != that.use_ivfpq)
        return false;
    }

    boolean this_present_pq_refine_factor = true && this.isSetPq_refine_factor();
    boolean that_present_pq_refine_factor = true && that.isSetPq_refine_factor();
    if (this_present_pq_refine_factor || that_present_pq_refine_factor) {
      if (!(this_present_pq_refine_factor && that_present_pq_refine_factor))
        return false;
      if (this.pq_refine_factor != that.pq_refine_factor)
        return false;
    }

    boolean this_present_k_factor = true && this.isSetK_factor();
    boolean that_present_k_factor = true && that.isSetK_factor();
    if (this_present_k_factor || that_present_k_factor) {
      if (!(this_present_k_factor && that_present_k_factor))
        return false;
      if (this.k_factor != that.k_factor)
        return false;
    }

    boolean this_present_vector_slot_id = true && this.isSetVector_slot_id();
    boolean that_present_vector_slot_id = true && that.isSetVector_slot_id();
    if (this_present_vector_slot_id || that_present_vector_slot_id) {
      if (!(this_present_vector_slot_id && that_present_vector_slot_id))
        return false;
      if (this.vector_slot_id != that.vector_slot_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEnable_use_ann()) ? 131071 : 524287);
    if (isSetEnable_use_ann())
      hashCode = hashCode * 8191 + ((enable_use_ann) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetVector_limit_k()) ? 131071 : 524287);
    if (isSetVector_limit_k())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(vector_limit_k);

    hashCode = hashCode * 8191 + ((isSetVector_distance_column_name()) ? 131071 : 524287);
    if (isSetVector_distance_column_name())
      hashCode = hashCode * 8191 + vector_distance_column_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuery_vector()) ? 131071 : 524287);
    if (isSetQuery_vector())
      hashCode = hashCode * 8191 + query_vector.hashCode();

    hashCode = hashCode * 8191 + ((isSetQuery_params()) ? 131071 : 524287);
    if (isSetQuery_params())
      hashCode = hashCode * 8191 + query_params.hashCode();

    hashCode = hashCode * 8191 + ((isSetVector_range()) ? 131071 : 524287);
    if (isSetVector_range())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(vector_range);

    hashCode = hashCode * 8191 + ((isSetResult_order()) ? 131071 : 524287);
    if (isSetResult_order())
      hashCode = hashCode * 8191 + result_order;

    hashCode = hashCode * 8191 + ((isSetUse_ivfpq()) ? 131071 : 524287);
    if (isSetUse_ivfpq())
      hashCode = hashCode * 8191 + ((use_ivfpq) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetPq_refine_factor()) ? 131071 : 524287);
    if (isSetPq_refine_factor())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pq_refine_factor);

    hashCode = hashCode * 8191 + ((isSetK_factor()) ? 131071 : 524287);
    if (isSetK_factor())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(k_factor);

    hashCode = hashCode * 8191 + ((isSetVector_slot_id()) ? 131071 : 524287);
    if (isSetVector_slot_id())
      hashCode = hashCode * 8191 + vector_slot_id;

    return hashCode;
  }

  @Override
  public int compareTo(TVectorSearchOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetEnable_use_ann(), other.isSetEnable_use_ann());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnable_use_ann()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enable_use_ann, other.enable_use_ann);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVector_limit_k(), other.isSetVector_limit_k());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVector_limit_k()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vector_limit_k, other.vector_limit_k);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVector_distance_column_name(), other.isSetVector_distance_column_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVector_distance_column_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vector_distance_column_name, other.vector_distance_column_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_vector(), other.isSetQuery_vector());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_vector()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_vector, other.query_vector);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQuery_params(), other.isSetQuery_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuery_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query_params, other.query_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVector_range(), other.isSetVector_range());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVector_range()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vector_range, other.vector_range);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetResult_order(), other.isSetResult_order());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult_order()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result_order, other.result_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUse_ivfpq(), other.isSetUse_ivfpq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUse_ivfpq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.use_ivfpq, other.use_ivfpq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPq_refine_factor(), other.isSetPq_refine_factor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPq_refine_factor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pq_refine_factor, other.pq_refine_factor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetK_factor(), other.isSetK_factor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetK_factor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.k_factor, other.k_factor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVector_slot_id(), other.isSetVector_slot_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVector_slot_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vector_slot_id, other.vector_slot_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TVectorSearchOptions(");
    boolean first = true;

    if (isSetEnable_use_ann()) {
      sb.append("enable_use_ann:");
      sb.append(this.enable_use_ann);
      first = false;
    }
    if (isSetVector_limit_k()) {
      if (!first) sb.append(", ");
      sb.append("vector_limit_k:");
      sb.append(this.vector_limit_k);
      first = false;
    }
    if (isSetVector_distance_column_name()) {
      if (!first) sb.append(", ");
      sb.append("vector_distance_column_name:");
      if (this.vector_distance_column_name == null) {
        sb.append("null");
      } else {
        sb.append(this.vector_distance_column_name);
      }
      first = false;
    }
    if (isSetQuery_vector()) {
      if (!first) sb.append(", ");
      sb.append("query_vector:");
      if (this.query_vector == null) {
        sb.append("null");
      } else {
        sb.append(this.query_vector);
      }
      first = false;
    }
    if (isSetQuery_params()) {
      if (!first) sb.append(", ");
      sb.append("query_params:");
      if (this.query_params == null) {
        sb.append("null");
      } else {
        sb.append(this.query_params);
      }
      first = false;
    }
    if (isSetVector_range()) {
      if (!first) sb.append(", ");
      sb.append("vector_range:");
      sb.append(this.vector_range);
      first = false;
    }
    if (isSetResult_order()) {
      if (!first) sb.append(", ");
      sb.append("result_order:");
      sb.append(this.result_order);
      first = false;
    }
    if (isSetUse_ivfpq()) {
      if (!first) sb.append(", ");
      sb.append("use_ivfpq:");
      sb.append(this.use_ivfpq);
      first = false;
    }
    if (isSetPq_refine_factor()) {
      if (!first) sb.append(", ");
      sb.append("pq_refine_factor:");
      sb.append(this.pq_refine_factor);
      first = false;
    }
    if (isSetK_factor()) {
      if (!first) sb.append(", ");
      sb.append("k_factor:");
      sb.append(this.k_factor);
      first = false;
    }
    if (isSetVector_slot_id()) {
      if (!first) sb.append(", ");
      sb.append("vector_slot_id:");
      sb.append(this.vector_slot_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TVectorSearchOptionsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TVectorSearchOptionsStandardScheme getScheme() {
      return new TVectorSearchOptionsStandardScheme();
    }
  }

  private static class TVectorSearchOptionsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TVectorSearchOptions> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TVectorSearchOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENABLE_USE_ANN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.enable_use_ann = iprot.readBool();
              struct.setEnable_use_annIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VECTOR_LIMIT_K
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.vector_limit_k = iprot.readI64();
              struct.setVector_limit_kIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VECTOR_DISTANCE_COLUMN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vector_distance_column_name = iprot.readString();
              struct.setVector_distance_column_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUERY_VECTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list242 = iprot.readListBegin();
                struct.query_vector = new java.util.ArrayList<java.lang.String>(_list242.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem243;
                for (int _i244 = 0; _i244 < _list242.size; ++_i244)
                {
                  _elem243 = iprot.readString();
                  struct.query_vector.add(_elem243);
                }
                iprot.readListEnd();
              }
              struct.setQuery_vectorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUERY_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map245 = iprot.readMapBegin();
                struct.query_params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map245.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key246;
                @org.apache.thrift.annotation.Nullable java.lang.String _val247;
                for (int _i248 = 0; _i248 < _map245.size; ++_i248)
                {
                  _key246 = iprot.readString();
                  _val247 = iprot.readString();
                  struct.query_params.put(_key246, _val247);
                }
                iprot.readMapEnd();
              }
              struct.setQuery_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VECTOR_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.vector_range = iprot.readDouble();
              struct.setVector_rangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RESULT_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.result_order = iprot.readI32();
              struct.setResult_orderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USE_IVFPQ
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.use_ivfpq = iprot.readBool();
              struct.setUse_ivfpqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PQ_REFINE_FACTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pq_refine_factor = iprot.readDouble();
              struct.setPq_refine_factorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // K_FACTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.k_factor = iprot.readDouble();
              struct.setK_factorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VECTOR_SLOT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vector_slot_id = iprot.readI32();
              struct.setVector_slot_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TVectorSearchOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetEnable_use_ann()) {
        oprot.writeFieldBegin(ENABLE_USE_ANN_FIELD_DESC);
        oprot.writeBool(struct.enable_use_ann);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVector_limit_k()) {
        oprot.writeFieldBegin(VECTOR_LIMIT_K_FIELD_DESC);
        oprot.writeI64(struct.vector_limit_k);
        oprot.writeFieldEnd();
      }
      if (struct.vector_distance_column_name != null) {
        if (struct.isSetVector_distance_column_name()) {
          oprot.writeFieldBegin(VECTOR_DISTANCE_COLUMN_NAME_FIELD_DESC);
          oprot.writeString(struct.vector_distance_column_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_vector != null) {
        if (struct.isSetQuery_vector()) {
          oprot.writeFieldBegin(QUERY_VECTOR_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.query_vector.size()));
            for (java.lang.String _iter249 : struct.query_vector)
            {
              oprot.writeString(_iter249);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.query_params != null) {
        if (struct.isSetQuery_params()) {
          oprot.writeFieldBegin(QUERY_PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.query_params.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter250 : struct.query_params.entrySet())
            {
              oprot.writeString(_iter250.getKey());
              oprot.writeString(_iter250.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVector_range()) {
        oprot.writeFieldBegin(VECTOR_RANGE_FIELD_DESC);
        oprot.writeDouble(struct.vector_range);
        oprot.writeFieldEnd();
      }
      if (struct.isSetResult_order()) {
        oprot.writeFieldBegin(RESULT_ORDER_FIELD_DESC);
        oprot.writeI32(struct.result_order);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUse_ivfpq()) {
        oprot.writeFieldBegin(USE_IVFPQ_FIELD_DESC);
        oprot.writeBool(struct.use_ivfpq);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPq_refine_factor()) {
        oprot.writeFieldBegin(PQ_REFINE_FACTOR_FIELD_DESC);
        oprot.writeDouble(struct.pq_refine_factor);
        oprot.writeFieldEnd();
      }
      if (struct.isSetK_factor()) {
        oprot.writeFieldBegin(K_FACTOR_FIELD_DESC);
        oprot.writeDouble(struct.k_factor);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVector_slot_id()) {
        oprot.writeFieldBegin(VECTOR_SLOT_ID_FIELD_DESC);
        oprot.writeI32(struct.vector_slot_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TVectorSearchOptionsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TVectorSearchOptionsTupleScheme getScheme() {
      return new TVectorSearchOptionsTupleScheme();
    }
  }

  private static class TVectorSearchOptionsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TVectorSearchOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TVectorSearchOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEnable_use_ann()) {
        optionals.set(0);
      }
      if (struct.isSetVector_limit_k()) {
        optionals.set(1);
      }
      if (struct.isSetVector_distance_column_name()) {
        optionals.set(2);
      }
      if (struct.isSetQuery_vector()) {
        optionals.set(3);
      }
      if (struct.isSetQuery_params()) {
        optionals.set(4);
      }
      if (struct.isSetVector_range()) {
        optionals.set(5);
      }
      if (struct.isSetResult_order()) {
        optionals.set(6);
      }
      if (struct.isSetUse_ivfpq()) {
        optionals.set(7);
      }
      if (struct.isSetPq_refine_factor()) {
        optionals.set(8);
      }
      if (struct.isSetK_factor()) {
        optionals.set(9);
      }
      if (struct.isSetVector_slot_id()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetEnable_use_ann()) {
        oprot.writeBool(struct.enable_use_ann);
      }
      if (struct.isSetVector_limit_k()) {
        oprot.writeI64(struct.vector_limit_k);
      }
      if (struct.isSetVector_distance_column_name()) {
        oprot.writeString(struct.vector_distance_column_name);
      }
      if (struct.isSetQuery_vector()) {
        {
          oprot.writeI32(struct.query_vector.size());
          for (java.lang.String _iter251 : struct.query_vector)
          {
            oprot.writeString(_iter251);
          }
        }
      }
      if (struct.isSetQuery_params()) {
        {
          oprot.writeI32(struct.query_params.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter252 : struct.query_params.entrySet())
          {
            oprot.writeString(_iter252.getKey());
            oprot.writeString(_iter252.getValue());
          }
        }
      }
      if (struct.isSetVector_range()) {
        oprot.writeDouble(struct.vector_range);
      }
      if (struct.isSetResult_order()) {
        oprot.writeI32(struct.result_order);
      }
      if (struct.isSetUse_ivfpq()) {
        oprot.writeBool(struct.use_ivfpq);
      }
      if (struct.isSetPq_refine_factor()) {
        oprot.writeDouble(struct.pq_refine_factor);
      }
      if (struct.isSetK_factor()) {
        oprot.writeDouble(struct.k_factor);
      }
      if (struct.isSetVector_slot_id()) {
        oprot.writeI32(struct.vector_slot_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TVectorSearchOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.enable_use_ann = iprot.readBool();
        struct.setEnable_use_annIsSet(true);
      }
      if (incoming.get(1)) {
        struct.vector_limit_k = iprot.readI64();
        struct.setVector_limit_kIsSet(true);
      }
      if (incoming.get(2)) {
        struct.vector_distance_column_name = iprot.readString();
        struct.setVector_distance_column_nameIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list253 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.query_vector = new java.util.ArrayList<java.lang.String>(_list253.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem254;
          for (int _i255 = 0; _i255 < _list253.size; ++_i255)
          {
            _elem254 = iprot.readString();
            struct.query_vector.add(_elem254);
          }
        }
        struct.setQuery_vectorIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map256 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.query_params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map256.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key257;
          @org.apache.thrift.annotation.Nullable java.lang.String _val258;
          for (int _i259 = 0; _i259 < _map256.size; ++_i259)
          {
            _key257 = iprot.readString();
            _val258 = iprot.readString();
            struct.query_params.put(_key257, _val258);
          }
        }
        struct.setQuery_paramsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.vector_range = iprot.readDouble();
        struct.setVector_rangeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.result_order = iprot.readI32();
        struct.setResult_orderIsSet(true);
      }
      if (incoming.get(7)) {
        struct.use_ivfpq = iprot.readBool();
        struct.setUse_ivfpqIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pq_refine_factor = iprot.readDouble();
        struct.setPq_refine_factorIsSet(true);
      }
      if (incoming.get(9)) {
        struct.k_factor = iprot.readDouble();
        struct.setK_factorIsSet(true);
      }
      if (incoming.get(10)) {
        struct.vector_slot_id = iprot.readI32();
        struct.setVector_slot_idIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

