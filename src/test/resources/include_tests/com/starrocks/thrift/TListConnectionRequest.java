/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TListConnectionRequest implements org.apache.thrift.TBase<TListConnectionRequest, TListConnectionRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TListConnectionRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TListConnectionRequest");

  private static final org.apache.thrift.protocol.TField AUTH_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("auth_info", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FOR_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("for_user", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SHOW_FULL_FIELD_DESC = new org.apache.thrift.protocol.TField("show_full", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TListConnectionRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TListConnectionRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable TAuthInfo auth_info; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String for_user; // optional
  public boolean show_full; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AUTH_INFO((short)1, "auth_info"),
    FOR_USER((short)2, "for_user"),
    SHOW_FULL((short)3, "show_full");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AUTH_INFO
          return AUTH_INFO;
        case 2: // FOR_USER
          return FOR_USER;
        case 3: // SHOW_FULL
          return SHOW_FULL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHOW_FULL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.AUTH_INFO,_Fields.FOR_USER,_Fields.SHOW_FULL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUTH_INFO, new org.apache.thrift.meta_data.FieldMetaData("auth_info", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAuthInfo.class)));
    tmpMap.put(_Fields.FOR_USER, new org.apache.thrift.meta_data.FieldMetaData("for_user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOW_FULL, new org.apache.thrift.meta_data.FieldMetaData("show_full", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TListConnectionRequest.class, metaDataMap);
  }

  public TListConnectionRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TListConnectionRequest(TListConnectionRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAuth_info()) {
      this.auth_info = new TAuthInfo(other.auth_info);
    }
    if (other.isSetFor_user()) {
      this.for_user = other.for_user;
    }
    this.show_full = other.show_full;
  }

  @Override
  public TListConnectionRequest deepCopy() {
    return new TListConnectionRequest(this);
  }

  @Override
  public void clear() {
    this.auth_info = null;
    this.for_user = null;
    setShow_fullIsSet(false);
    this.show_full = false;
  }

  @org.apache.thrift.annotation.Nullable
  public TAuthInfo getAuth_info() {
    return this.auth_info;
  }

  public TListConnectionRequest setAuth_info(@org.apache.thrift.annotation.Nullable TAuthInfo auth_info) {
    this.auth_info = auth_info;
    return this;
  }

  public void unsetAuth_info() {
    this.auth_info = null;
  }

  /** Returns true if field auth_info is set (has been assigned a value) and false otherwise */
  public boolean isSetAuth_info() {
    return this.auth_info != null;
  }

  public void setAuth_infoIsSet(boolean value) {
    if (!value) {
      this.auth_info = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFor_user() {
    return this.for_user;
  }

  public TListConnectionRequest setFor_user(@org.apache.thrift.annotation.Nullable java.lang.String for_user) {
    this.for_user = for_user;
    return this;
  }

  public void unsetFor_user() {
    this.for_user = null;
  }

  /** Returns true if field for_user is set (has been assigned a value) and false otherwise */
  public boolean isSetFor_user() {
    return this.for_user != null;
  }

  public void setFor_userIsSet(boolean value) {
    if (!value) {
      this.for_user = null;
    }
  }

  public boolean isShow_full() {
    return this.show_full;
  }

  public TListConnectionRequest setShow_full(boolean show_full) {
    this.show_full = show_full;
    setShow_fullIsSet(true);
    return this;
  }

  public void unsetShow_full() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHOW_FULL_ISSET_ID);
  }

  /** Returns true if field show_full is set (has been assigned a value) and false otherwise */
  public boolean isSetShow_full() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHOW_FULL_ISSET_ID);
  }

  public void setShow_fullIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHOW_FULL_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case AUTH_INFO:
      if (value == null) {
        unsetAuth_info();
      } else {
        setAuth_info((TAuthInfo)value);
      }
      break;

    case FOR_USER:
      if (value == null) {
        unsetFor_user();
      } else {
        setFor_user((java.lang.String)value);
      }
      break;

    case SHOW_FULL:
      if (value == null) {
        unsetShow_full();
      } else {
        setShow_full((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case AUTH_INFO:
      return getAuth_info();

    case FOR_USER:
      return getFor_user();

    case SHOW_FULL:
      return isShow_full();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case AUTH_INFO:
      return isSetAuth_info();
    case FOR_USER:
      return isSetFor_user();
    case SHOW_FULL:
      return isSetShow_full();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TListConnectionRequest)
      return this.equals((TListConnectionRequest)that);
    return false;
  }

  public boolean equals(TListConnectionRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_auth_info = true && this.isSetAuth_info();
    boolean that_present_auth_info = true && that.isSetAuth_info();
    if (this_present_auth_info || that_present_auth_info) {
      if (!(this_present_auth_info && that_present_auth_info))
        return false;
      if (!this.auth_info.equals(that.auth_info))
        return false;
    }

    boolean this_present_for_user = true && this.isSetFor_user();
    boolean that_present_for_user = true && that.isSetFor_user();
    if (this_present_for_user || that_present_for_user) {
      if (!(this_present_for_user && that_present_for_user))
        return false;
      if (!this.for_user.equals(that.for_user))
        return false;
    }

    boolean this_present_show_full = true && this.isSetShow_full();
    boolean that_present_show_full = true && that.isSetShow_full();
    if (this_present_show_full || that_present_show_full) {
      if (!(this_present_show_full && that_present_show_full))
        return false;
      if (this.show_full != that.show_full)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAuth_info()) ? 131071 : 524287);
    if (isSetAuth_info())
      hashCode = hashCode * 8191 + auth_info.hashCode();

    hashCode = hashCode * 8191 + ((isSetFor_user()) ? 131071 : 524287);
    if (isSetFor_user())
      hashCode = hashCode * 8191 + for_user.hashCode();

    hashCode = hashCode * 8191 + ((isSetShow_full()) ? 131071 : 524287);
    if (isSetShow_full())
      hashCode = hashCode * 8191 + ((show_full) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TListConnectionRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetAuth_info(), other.isSetAuth_info());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuth_info()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth_info, other.auth_info);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFor_user(), other.isSetFor_user());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFor_user()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.for_user, other.for_user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShow_full(), other.isSetShow_full());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShow_full()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.show_full, other.show_full);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TListConnectionRequest(");
    boolean first = true;

    if (isSetAuth_info()) {
      sb.append("auth_info:");
      if (this.auth_info == null) {
        sb.append("null");
      } else {
        sb.append(this.auth_info);
      }
      first = false;
    }
    if (isSetFor_user()) {
      if (!first) sb.append(", ");
      sb.append("for_user:");
      if (this.for_user == null) {
        sb.append("null");
      } else {
        sb.append(this.for_user);
      }
      first = false;
    }
    if (isSetShow_full()) {
      if (!first) sb.append(", ");
      sb.append("show_full:");
      sb.append(this.show_full);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (auth_info != null) {
      auth_info.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TListConnectionRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TListConnectionRequestStandardScheme getScheme() {
      return new TListConnectionRequestStandardScheme();
    }
  }

  private static class TListConnectionRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<TListConnectionRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TListConnectionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AUTH_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.auth_info = new TAuthInfo();
              struct.auth_info.read(iprot);
              struct.setAuth_infoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FOR_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.for_user = iprot.readString();
              struct.setFor_userIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SHOW_FULL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.show_full = iprot.readBool();
              struct.setShow_fullIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TListConnectionRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.auth_info != null) {
        if (struct.isSetAuth_info()) {
          oprot.writeFieldBegin(AUTH_INFO_FIELD_DESC);
          struct.auth_info.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.for_user != null) {
        if (struct.isSetFor_user()) {
          oprot.writeFieldBegin(FOR_USER_FIELD_DESC);
          oprot.writeString(struct.for_user);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetShow_full()) {
        oprot.writeFieldBegin(SHOW_FULL_FIELD_DESC);
        oprot.writeBool(struct.show_full);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TListConnectionRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TListConnectionRequestTupleScheme getScheme() {
      return new TListConnectionRequestTupleScheme();
    }
  }

  private static class TListConnectionRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<TListConnectionRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TListConnectionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAuth_info()) {
        optionals.set(0);
      }
      if (struct.isSetFor_user()) {
        optionals.set(1);
      }
      if (struct.isSetShow_full()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAuth_info()) {
        struct.auth_info.write(oprot);
      }
      if (struct.isSetFor_user()) {
        oprot.writeString(struct.for_user);
      }
      if (struct.isSetShow_full()) {
        oprot.writeBool(struct.show_full);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TListConnectionRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.auth_info = new TAuthInfo();
        struct.auth_info.read(iprot);
        struct.setAuth_infoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.for_user = iprot.readString();
        struct.setFor_userIsSet(true);
      }
      if (incoming.get(2)) {
        struct.show_full = iprot.readBool();
        struct.setShow_fullIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

