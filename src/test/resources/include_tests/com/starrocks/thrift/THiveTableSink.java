/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class THiveTableSink implements org.apache.thrift.TBase<THiveTableSink, THiveTableSink._Fields>, java.io.Serializable, Cloneable, Comparable<THiveTableSink> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("THiveTableSink");

  private static final org.apache.thrift.protocol.TField STAGING_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("staging_dir", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILE_FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("file_format", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("data_column_names", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITION_COLUMN_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("partition_column_names", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField COMPRESSION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("compression_type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField IS_STATIC_PARTITION_SINK_FIELD_DESC = new org.apache.thrift.protocol.TField("is_static_partition_sink", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField CLOUD_CONFIGURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("cloud_configuration", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField TARGET_MAX_FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("target_max_file_size", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField TEXT_FILE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("text_file_desc", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new THiveTableSinkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new THiveTableSinkTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String staging_dir; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String file_format; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> data_column_names; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> partition_column_names; // optional
  /**
   * 
   * @see com.starrocks.thrift.TCompressionType
   */
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TCompressionType compression_type; // optional
  public boolean is_static_partition_sink; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TCloudConfiguration cloud_configuration; // optional
  public long target_max_file_size; // optional
  public @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTextFileDesc text_file_desc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STAGING_DIR((short)1, "staging_dir"),
    FILE_FORMAT((short)2, "file_format"),
    DATA_COLUMN_NAMES((short)3, "data_column_names"),
    PARTITION_COLUMN_NAMES((short)4, "partition_column_names"),
    /**
     * 
     * @see com.starrocks.thrift.TCompressionType
     */
    COMPRESSION_TYPE((short)5, "compression_type"),
    IS_STATIC_PARTITION_SINK((short)6, "is_static_partition_sink"),
    CLOUD_CONFIGURATION((short)7, "cloud_configuration"),
    TARGET_MAX_FILE_SIZE((short)8, "target_max_file_size"),
    TEXT_FILE_DESC((short)9, "text_file_desc");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STAGING_DIR
          return STAGING_DIR;
        case 2: // FILE_FORMAT
          return FILE_FORMAT;
        case 3: // DATA_COLUMN_NAMES
          return DATA_COLUMN_NAMES;
        case 4: // PARTITION_COLUMN_NAMES
          return PARTITION_COLUMN_NAMES;
        case 5: // COMPRESSION_TYPE
          return COMPRESSION_TYPE;
        case 6: // IS_STATIC_PARTITION_SINK
          return IS_STATIC_PARTITION_SINK;
        case 7: // CLOUD_CONFIGURATION
          return CLOUD_CONFIGURATION;
        case 8: // TARGET_MAX_FILE_SIZE
          return TARGET_MAX_FILE_SIZE;
        case 9: // TEXT_FILE_DESC
          return TEXT_FILE_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_STATIC_PARTITION_SINK_ISSET_ID = 0;
  private static final int __TARGET_MAX_FILE_SIZE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STAGING_DIR,_Fields.FILE_FORMAT,_Fields.DATA_COLUMN_NAMES,_Fields.PARTITION_COLUMN_NAMES,_Fields.COMPRESSION_TYPE,_Fields.IS_STATIC_PARTITION_SINK,_Fields.CLOUD_CONFIGURATION,_Fields.TARGET_MAX_FILE_SIZE,_Fields.TEXT_FILE_DESC};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STAGING_DIR, new org.apache.thrift.meta_data.FieldMetaData("staging_dir", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_FORMAT, new org.apache.thrift.meta_data.FieldMetaData("file_format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("data_column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PARTITION_COLUMN_NAMES, new org.apache.thrift.meta_data.FieldMetaData("partition_column_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMPRESSION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("compression_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.starrocks.thrift.TCompressionType.class)));
    tmpMap.put(_Fields.IS_STATIC_PARTITION_SINK, new org.apache.thrift.meta_data.FieldMetaData("is_static_partition_sink", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CLOUD_CONFIGURATION, new org.apache.thrift.meta_data.FieldMetaData("cloud_configuration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TCloudConfiguration.class)));
    tmpMap.put(_Fields.TARGET_MAX_FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("target_max_file_size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEXT_FILE_DESC, new org.apache.thrift.meta_data.FieldMetaData("text_file_desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TTextFileDesc.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(THiveTableSink.class, metaDataMap);
  }

  public THiveTableSink() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public THiveTableSink(THiveTableSink other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStaging_dir()) {
      this.staging_dir = other.staging_dir;
    }
    if (other.isSetFile_format()) {
      this.file_format = other.file_format;
    }
    if (other.isSetData_column_names()) {
      java.util.List<java.lang.String> __this__data_column_names = new java.util.ArrayList<java.lang.String>(other.data_column_names);
      this.data_column_names = __this__data_column_names;
    }
    if (other.isSetPartition_column_names()) {
      java.util.List<java.lang.String> __this__partition_column_names = new java.util.ArrayList<java.lang.String>(other.partition_column_names);
      this.partition_column_names = __this__partition_column_names;
    }
    if (other.isSetCompression_type()) {
      this.compression_type = other.compression_type;
    }
    this.is_static_partition_sink = other.is_static_partition_sink;
    if (other.isSetCloud_configuration()) {
      this.cloud_configuration = new com.starrocks.thrift.TCloudConfiguration(other.cloud_configuration);
    }
    this.target_max_file_size = other.target_max_file_size;
    if (other.isSetText_file_desc()) {
      this.text_file_desc = new com.starrocks.thrift.TTextFileDesc(other.text_file_desc);
    }
  }

  @Override
  public THiveTableSink deepCopy() {
    return new THiveTableSink(this);
  }

  @Override
  public void clear() {
    this.staging_dir = null;
    this.file_format = null;
    this.data_column_names = null;
    this.partition_column_names = null;
    this.compression_type = null;
    setIs_static_partition_sinkIsSet(false);
    this.is_static_partition_sink = false;
    this.cloud_configuration = null;
    setTarget_max_file_sizeIsSet(false);
    this.target_max_file_size = 0;
    this.text_file_desc = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStaging_dir() {
    return this.staging_dir;
  }

  public THiveTableSink setStaging_dir(@org.apache.thrift.annotation.Nullable java.lang.String staging_dir) {
    this.staging_dir = staging_dir;
    return this;
  }

  public void unsetStaging_dir() {
    this.staging_dir = null;
  }

  /** Returns true if field staging_dir is set (has been assigned a value) and false otherwise */
  public boolean isSetStaging_dir() {
    return this.staging_dir != null;
  }

  public void setStaging_dirIsSet(boolean value) {
    if (!value) {
      this.staging_dir = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFile_format() {
    return this.file_format;
  }

  public THiveTableSink setFile_format(@org.apache.thrift.annotation.Nullable java.lang.String file_format) {
    this.file_format = file_format;
    return this;
  }

  public void unsetFile_format() {
    this.file_format = null;
  }

  /** Returns true if field file_format is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_format() {
    return this.file_format != null;
  }

  public void setFile_formatIsSet(boolean value) {
    if (!value) {
      this.file_format = null;
    }
  }

  public int getData_column_namesSize() {
    return (this.data_column_names == null) ? 0 : this.data_column_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getData_column_namesIterator() {
    return (this.data_column_names == null) ? null : this.data_column_names.iterator();
  }

  public void addToData_column_names(java.lang.String elem) {
    if (this.data_column_names == null) {
      this.data_column_names = new java.util.ArrayList<java.lang.String>();
    }
    this.data_column_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getData_column_names() {
    return this.data_column_names;
  }

  public THiveTableSink setData_column_names(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> data_column_names) {
    this.data_column_names = data_column_names;
    return this;
  }

  public void unsetData_column_names() {
    this.data_column_names = null;
  }

  /** Returns true if field data_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetData_column_names() {
    return this.data_column_names != null;
  }

  public void setData_column_namesIsSet(boolean value) {
    if (!value) {
      this.data_column_names = null;
    }
  }

  public int getPartition_column_namesSize() {
    return (this.partition_column_names == null) ? 0 : this.partition_column_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getPartition_column_namesIterator() {
    return (this.partition_column_names == null) ? null : this.partition_column_names.iterator();
  }

  public void addToPartition_column_names(java.lang.String elem) {
    if (this.partition_column_names == null) {
      this.partition_column_names = new java.util.ArrayList<java.lang.String>();
    }
    this.partition_column_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getPartition_column_names() {
    return this.partition_column_names;
  }

  public THiveTableSink setPartition_column_names(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> partition_column_names) {
    this.partition_column_names = partition_column_names;
    return this;
  }

  public void unsetPartition_column_names() {
    this.partition_column_names = null;
  }

  /** Returns true if field partition_column_names is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_column_names() {
    return this.partition_column_names != null;
  }

  public void setPartition_column_namesIsSet(boolean value) {
    if (!value) {
      this.partition_column_names = null;
    }
  }

  /**
   * 
   * @see com.starrocks.thrift.TCompressionType
   */
  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TCompressionType getCompression_type() {
    return this.compression_type;
  }

  /**
   * 
   * @see com.starrocks.thrift.TCompressionType
   */
  public THiveTableSink setCompression_type(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TCompressionType compression_type) {
    this.compression_type = compression_type;
    return this;
  }

  public void unsetCompression_type() {
    this.compression_type = null;
  }

  /** Returns true if field compression_type is set (has been assigned a value) and false otherwise */
  public boolean isSetCompression_type() {
    return this.compression_type != null;
  }

  public void setCompression_typeIsSet(boolean value) {
    if (!value) {
      this.compression_type = null;
    }
  }

  public boolean isIs_static_partition_sink() {
    return this.is_static_partition_sink;
  }

  public THiveTableSink setIs_static_partition_sink(boolean is_static_partition_sink) {
    this.is_static_partition_sink = is_static_partition_sink;
    setIs_static_partition_sinkIsSet(true);
    return this;
  }

  public void unsetIs_static_partition_sink() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_STATIC_PARTITION_SINK_ISSET_ID);
  }

  /** Returns true if field is_static_partition_sink is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_static_partition_sink() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_STATIC_PARTITION_SINK_ISSET_ID);
  }

  public void setIs_static_partition_sinkIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_STATIC_PARTITION_SINK_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TCloudConfiguration getCloud_configuration() {
    return this.cloud_configuration;
  }

  public THiveTableSink setCloud_configuration(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TCloudConfiguration cloud_configuration) {
    this.cloud_configuration = cloud_configuration;
    return this;
  }

  public void unsetCloud_configuration() {
    this.cloud_configuration = null;
  }

  /** Returns true if field cloud_configuration is set (has been assigned a value) and false otherwise */
  public boolean isSetCloud_configuration() {
    return this.cloud_configuration != null;
  }

  public void setCloud_configurationIsSet(boolean value) {
    if (!value) {
      this.cloud_configuration = null;
    }
  }

  public long getTarget_max_file_size() {
    return this.target_max_file_size;
  }

  public THiveTableSink setTarget_max_file_size(long target_max_file_size) {
    this.target_max_file_size = target_max_file_size;
    setTarget_max_file_sizeIsSet(true);
    return this;
  }

  public void unsetTarget_max_file_size() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TARGET_MAX_FILE_SIZE_ISSET_ID);
  }

  /** Returns true if field target_max_file_size is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget_max_file_size() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TARGET_MAX_FILE_SIZE_ISSET_ID);
  }

  public void setTarget_max_file_sizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TARGET_MAX_FILE_SIZE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public com.starrocks.thrift.TTextFileDesc getText_file_desc() {
    return this.text_file_desc;
  }

  public THiveTableSink setText_file_desc(@org.apache.thrift.annotation.Nullable com.starrocks.thrift.TTextFileDesc text_file_desc) {
    this.text_file_desc = text_file_desc;
    return this;
  }

  public void unsetText_file_desc() {
    this.text_file_desc = null;
  }

  /** Returns true if field text_file_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetText_file_desc() {
    return this.text_file_desc != null;
  }

  public void setText_file_descIsSet(boolean value) {
    if (!value) {
      this.text_file_desc = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STAGING_DIR:
      if (value == null) {
        unsetStaging_dir();
      } else {
        setStaging_dir((java.lang.String)value);
      }
      break;

    case FILE_FORMAT:
      if (value == null) {
        unsetFile_format();
      } else {
        setFile_format((java.lang.String)value);
      }
      break;

    case DATA_COLUMN_NAMES:
      if (value == null) {
        unsetData_column_names();
      } else {
        setData_column_names((java.util.List<java.lang.String>)value);
      }
      break;

    case PARTITION_COLUMN_NAMES:
      if (value == null) {
        unsetPartition_column_names();
      } else {
        setPartition_column_names((java.util.List<java.lang.String>)value);
      }
      break;

    case COMPRESSION_TYPE:
      if (value == null) {
        unsetCompression_type();
      } else {
        setCompression_type((com.starrocks.thrift.TCompressionType)value);
      }
      break;

    case IS_STATIC_PARTITION_SINK:
      if (value == null) {
        unsetIs_static_partition_sink();
      } else {
        setIs_static_partition_sink((java.lang.Boolean)value);
      }
      break;

    case CLOUD_CONFIGURATION:
      if (value == null) {
        unsetCloud_configuration();
      } else {
        setCloud_configuration((com.starrocks.thrift.TCloudConfiguration)value);
      }
      break;

    case TARGET_MAX_FILE_SIZE:
      if (value == null) {
        unsetTarget_max_file_size();
      } else {
        setTarget_max_file_size((java.lang.Long)value);
      }
      break;

    case TEXT_FILE_DESC:
      if (value == null) {
        unsetText_file_desc();
      } else {
        setText_file_desc((com.starrocks.thrift.TTextFileDesc)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STAGING_DIR:
      return getStaging_dir();

    case FILE_FORMAT:
      return getFile_format();

    case DATA_COLUMN_NAMES:
      return getData_column_names();

    case PARTITION_COLUMN_NAMES:
      return getPartition_column_names();

    case COMPRESSION_TYPE:
      return getCompression_type();

    case IS_STATIC_PARTITION_SINK:
      return isIs_static_partition_sink();

    case CLOUD_CONFIGURATION:
      return getCloud_configuration();

    case TARGET_MAX_FILE_SIZE:
      return getTarget_max_file_size();

    case TEXT_FILE_DESC:
      return getText_file_desc();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STAGING_DIR:
      return isSetStaging_dir();
    case FILE_FORMAT:
      return isSetFile_format();
    case DATA_COLUMN_NAMES:
      return isSetData_column_names();
    case PARTITION_COLUMN_NAMES:
      return isSetPartition_column_names();
    case COMPRESSION_TYPE:
      return isSetCompression_type();
    case IS_STATIC_PARTITION_SINK:
      return isSetIs_static_partition_sink();
    case CLOUD_CONFIGURATION:
      return isSetCloud_configuration();
    case TARGET_MAX_FILE_SIZE:
      return isSetTarget_max_file_size();
    case TEXT_FILE_DESC:
      return isSetText_file_desc();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof THiveTableSink)
      return this.equals((THiveTableSink)that);
    return false;
  }

  public boolean equals(THiveTableSink that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_staging_dir = true && this.isSetStaging_dir();
    boolean that_present_staging_dir = true && that.isSetStaging_dir();
    if (this_present_staging_dir || that_present_staging_dir) {
      if (!(this_present_staging_dir && that_present_staging_dir))
        return false;
      if (!this.staging_dir.equals(that.staging_dir))
        return false;
    }

    boolean this_present_file_format = true && this.isSetFile_format();
    boolean that_present_file_format = true && that.isSetFile_format();
    if (this_present_file_format || that_present_file_format) {
      if (!(this_present_file_format && that_present_file_format))
        return false;
      if (!this.file_format.equals(that.file_format))
        return false;
    }

    boolean this_present_data_column_names = true && this.isSetData_column_names();
    boolean that_present_data_column_names = true && that.isSetData_column_names();
    if (this_present_data_column_names || that_present_data_column_names) {
      if (!(this_present_data_column_names && that_present_data_column_names))
        return false;
      if (!this.data_column_names.equals(that.data_column_names))
        return false;
    }

    boolean this_present_partition_column_names = true && this.isSetPartition_column_names();
    boolean that_present_partition_column_names = true && that.isSetPartition_column_names();
    if (this_present_partition_column_names || that_present_partition_column_names) {
      if (!(this_present_partition_column_names && that_present_partition_column_names))
        return false;
      if (!this.partition_column_names.equals(that.partition_column_names))
        return false;
    }

    boolean this_present_compression_type = true && this.isSetCompression_type();
    boolean that_present_compression_type = true && that.isSetCompression_type();
    if (this_present_compression_type || that_present_compression_type) {
      if (!(this_present_compression_type && that_present_compression_type))
        return false;
      if (!this.compression_type.equals(that.compression_type))
        return false;
    }

    boolean this_present_is_static_partition_sink = true && this.isSetIs_static_partition_sink();
    boolean that_present_is_static_partition_sink = true && that.isSetIs_static_partition_sink();
    if (this_present_is_static_partition_sink || that_present_is_static_partition_sink) {
      if (!(this_present_is_static_partition_sink && that_present_is_static_partition_sink))
        return false;
      if (this.is_static_partition_sink != that.is_static_partition_sink)
        return false;
    }

    boolean this_present_cloud_configuration = true && this.isSetCloud_configuration();
    boolean that_present_cloud_configuration = true && that.isSetCloud_configuration();
    if (this_present_cloud_configuration || that_present_cloud_configuration) {
      if (!(this_present_cloud_configuration && that_present_cloud_configuration))
        return false;
      if (!this.cloud_configuration.equals(that.cloud_configuration))
        return false;
    }

    boolean this_present_target_max_file_size = true && this.isSetTarget_max_file_size();
    boolean that_present_target_max_file_size = true && that.isSetTarget_max_file_size();
    if (this_present_target_max_file_size || that_present_target_max_file_size) {
      if (!(this_present_target_max_file_size && that_present_target_max_file_size))
        return false;
      if (this.target_max_file_size != that.target_max_file_size)
        return false;
    }

    boolean this_present_text_file_desc = true && this.isSetText_file_desc();
    boolean that_present_text_file_desc = true && that.isSetText_file_desc();
    if (this_present_text_file_desc || that_present_text_file_desc) {
      if (!(this_present_text_file_desc && that_present_text_file_desc))
        return false;
      if (!this.text_file_desc.equals(that.text_file_desc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStaging_dir()) ? 131071 : 524287);
    if (isSetStaging_dir())
      hashCode = hashCode * 8191 + staging_dir.hashCode();

    hashCode = hashCode * 8191 + ((isSetFile_format()) ? 131071 : 524287);
    if (isSetFile_format())
      hashCode = hashCode * 8191 + file_format.hashCode();

    hashCode = hashCode * 8191 + ((isSetData_column_names()) ? 131071 : 524287);
    if (isSetData_column_names())
      hashCode = hashCode * 8191 + data_column_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetPartition_column_names()) ? 131071 : 524287);
    if (isSetPartition_column_names())
      hashCode = hashCode * 8191 + partition_column_names.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompression_type()) ? 131071 : 524287);
    if (isSetCompression_type())
      hashCode = hashCode * 8191 + compression_type.getValue();

    hashCode = hashCode * 8191 + ((isSetIs_static_partition_sink()) ? 131071 : 524287);
    if (isSetIs_static_partition_sink())
      hashCode = hashCode * 8191 + ((is_static_partition_sink) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCloud_configuration()) ? 131071 : 524287);
    if (isSetCloud_configuration())
      hashCode = hashCode * 8191 + cloud_configuration.hashCode();

    hashCode = hashCode * 8191 + ((isSetTarget_max_file_size()) ? 131071 : 524287);
    if (isSetTarget_max_file_size())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(target_max_file_size);

    hashCode = hashCode * 8191 + ((isSetText_file_desc()) ? 131071 : 524287);
    if (isSetText_file_desc())
      hashCode = hashCode * 8191 + text_file_desc.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(THiveTableSink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStaging_dir(), other.isSetStaging_dir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStaging_dir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.staging_dir, other.staging_dir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFile_format(), other.isSetFile_format());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_format()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_format, other.file_format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetData_column_names(), other.isSetData_column_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData_column_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_column_names, other.data_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPartition_column_names(), other.isSetPartition_column_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_column_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_column_names, other.partition_column_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompression_type(), other.isSetCompression_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompression_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression_type, other.compression_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIs_static_partition_sink(), other.isSetIs_static_partition_sink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_static_partition_sink()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_static_partition_sink, other.is_static_partition_sink);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCloud_configuration(), other.isSetCloud_configuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloud_configuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloud_configuration, other.cloud_configuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTarget_max_file_size(), other.isSetTarget_max_file_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget_max_file_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target_max_file_size, other.target_max_file_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetText_file_desc(), other.isSetText_file_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText_file_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text_file_desc, other.text_file_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("THiveTableSink(");
    boolean first = true;

    if (isSetStaging_dir()) {
      sb.append("staging_dir:");
      if (this.staging_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.staging_dir);
      }
      first = false;
    }
    if (isSetFile_format()) {
      if (!first) sb.append(", ");
      sb.append("file_format:");
      if (this.file_format == null) {
        sb.append("null");
      } else {
        sb.append(this.file_format);
      }
      first = false;
    }
    if (isSetData_column_names()) {
      if (!first) sb.append(", ");
      sb.append("data_column_names:");
      if (this.data_column_names == null) {
        sb.append("null");
      } else {
        sb.append(this.data_column_names);
      }
      first = false;
    }
    if (isSetPartition_column_names()) {
      if (!first) sb.append(", ");
      sb.append("partition_column_names:");
      if (this.partition_column_names == null) {
        sb.append("null");
      } else {
        sb.append(this.partition_column_names);
      }
      first = false;
    }
    if (isSetCompression_type()) {
      if (!first) sb.append(", ");
      sb.append("compression_type:");
      if (this.compression_type == null) {
        sb.append("null");
      } else {
        sb.append(this.compression_type);
      }
      first = false;
    }
    if (isSetIs_static_partition_sink()) {
      if (!first) sb.append(", ");
      sb.append("is_static_partition_sink:");
      sb.append(this.is_static_partition_sink);
      first = false;
    }
    if (isSetCloud_configuration()) {
      if (!first) sb.append(", ");
      sb.append("cloud_configuration:");
      if (this.cloud_configuration == null) {
        sb.append("null");
      } else {
        sb.append(this.cloud_configuration);
      }
      first = false;
    }
    if (isSetTarget_max_file_size()) {
      if (!first) sb.append(", ");
      sb.append("target_max_file_size:");
      sb.append(this.target_max_file_size);
      first = false;
    }
    if (isSetText_file_desc()) {
      if (!first) sb.append(", ");
      sb.append("text_file_desc:");
      if (this.text_file_desc == null) {
        sb.append("null");
      } else {
        sb.append(this.text_file_desc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cloud_configuration != null) {
      cloud_configuration.validate();
    }
    if (text_file_desc != null) {
      text_file_desc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class THiveTableSinkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THiveTableSinkStandardScheme getScheme() {
      return new THiveTableSinkStandardScheme();
    }
  }

  private static class THiveTableSinkStandardScheme extends org.apache.thrift.scheme.StandardScheme<THiveTableSink> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, THiveTableSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STAGING_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.staging_dir = iprot.readString();
              struct.setStaging_dirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILE_FORMAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_format = iprot.readString();
              struct.setFile_formatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list84 = iprot.readListBegin();
                struct.data_column_names = new java.util.ArrayList<java.lang.String>(_list84.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem85;
                for (int _i86 = 0; _i86 < _list84.size; ++_i86)
                {
                  _elem85 = iprot.readString();
                  struct.data_column_names.add(_elem85);
                }
                iprot.readListEnd();
              }
              struct.setData_column_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITION_COLUMN_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list87 = iprot.readListBegin();
                struct.partition_column_names = new java.util.ArrayList<java.lang.String>(_list87.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem88;
                for (int _i89 = 0; _i89 < _list87.size; ++_i89)
                {
                  _elem88 = iprot.readString();
                  struct.partition_column_names.add(_elem88);
                }
                iprot.readListEnd();
              }
              struct.setPartition_column_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPRESSION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compression_type = com.starrocks.thrift.TCompressionType.findByValue(iprot.readI32());
              struct.setCompression_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_STATIC_PARTITION_SINK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_static_partition_sink = iprot.readBool();
              struct.setIs_static_partition_sinkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLOUD_CONFIGURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cloud_configuration = new com.starrocks.thrift.TCloudConfiguration();
              struct.cloud_configuration.read(iprot);
              struct.setCloud_configurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TARGET_MAX_FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.target_max_file_size = iprot.readI64();
              struct.setTarget_max_file_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TEXT_FILE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.text_file_desc = new com.starrocks.thrift.TTextFileDesc();
              struct.text_file_desc.read(iprot);
              struct.setText_file_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, THiveTableSink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.staging_dir != null) {
        if (struct.isSetStaging_dir()) {
          oprot.writeFieldBegin(STAGING_DIR_FIELD_DESC);
          oprot.writeString(struct.staging_dir);
          oprot.writeFieldEnd();
        }
      }
      if (struct.file_format != null) {
        if (struct.isSetFile_format()) {
          oprot.writeFieldBegin(FILE_FORMAT_FIELD_DESC);
          oprot.writeString(struct.file_format);
          oprot.writeFieldEnd();
        }
      }
      if (struct.data_column_names != null) {
        if (struct.isSetData_column_names()) {
          oprot.writeFieldBegin(DATA_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.data_column_names.size()));
            for (java.lang.String _iter90 : struct.data_column_names)
            {
              oprot.writeString(_iter90);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.partition_column_names != null) {
        if (struct.isSetPartition_column_names()) {
          oprot.writeFieldBegin(PARTITION_COLUMN_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.partition_column_names.size()));
            for (java.lang.String _iter91 : struct.partition_column_names)
            {
              oprot.writeString(_iter91);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.compression_type != null) {
        if (struct.isSetCompression_type()) {
          oprot.writeFieldBegin(COMPRESSION_TYPE_FIELD_DESC);
          oprot.writeI32(struct.compression_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_static_partition_sink()) {
        oprot.writeFieldBegin(IS_STATIC_PARTITION_SINK_FIELD_DESC);
        oprot.writeBool(struct.is_static_partition_sink);
        oprot.writeFieldEnd();
      }
      if (struct.cloud_configuration != null) {
        if (struct.isSetCloud_configuration()) {
          oprot.writeFieldBegin(CLOUD_CONFIGURATION_FIELD_DESC);
          struct.cloud_configuration.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTarget_max_file_size()) {
        oprot.writeFieldBegin(TARGET_MAX_FILE_SIZE_FIELD_DESC);
        oprot.writeI64(struct.target_max_file_size);
        oprot.writeFieldEnd();
      }
      if (struct.text_file_desc != null) {
        if (struct.isSetText_file_desc()) {
          oprot.writeFieldBegin(TEXT_FILE_DESC_FIELD_DESC);
          struct.text_file_desc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class THiveTableSinkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public THiveTableSinkTupleScheme getScheme() {
      return new THiveTableSinkTupleScheme();
    }
  }

  private static class THiveTableSinkTupleScheme extends org.apache.thrift.scheme.TupleScheme<THiveTableSink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, THiveTableSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStaging_dir()) {
        optionals.set(0);
      }
      if (struct.isSetFile_format()) {
        optionals.set(1);
      }
      if (struct.isSetData_column_names()) {
        optionals.set(2);
      }
      if (struct.isSetPartition_column_names()) {
        optionals.set(3);
      }
      if (struct.isSetCompression_type()) {
        optionals.set(4);
      }
      if (struct.isSetIs_static_partition_sink()) {
        optionals.set(5);
      }
      if (struct.isSetCloud_configuration()) {
        optionals.set(6);
      }
      if (struct.isSetTarget_max_file_size()) {
        optionals.set(7);
      }
      if (struct.isSetText_file_desc()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetStaging_dir()) {
        oprot.writeString(struct.staging_dir);
      }
      if (struct.isSetFile_format()) {
        oprot.writeString(struct.file_format);
      }
      if (struct.isSetData_column_names()) {
        {
          oprot.writeI32(struct.data_column_names.size());
          for (java.lang.String _iter92 : struct.data_column_names)
          {
            oprot.writeString(_iter92);
          }
        }
      }
      if (struct.isSetPartition_column_names()) {
        {
          oprot.writeI32(struct.partition_column_names.size());
          for (java.lang.String _iter93 : struct.partition_column_names)
          {
            oprot.writeString(_iter93);
          }
        }
      }
      if (struct.isSetCompression_type()) {
        oprot.writeI32(struct.compression_type.getValue());
      }
      if (struct.isSetIs_static_partition_sink()) {
        oprot.writeBool(struct.is_static_partition_sink);
      }
      if (struct.isSetCloud_configuration()) {
        struct.cloud_configuration.write(oprot);
      }
      if (struct.isSetTarget_max_file_size()) {
        oprot.writeI64(struct.target_max_file_size);
      }
      if (struct.isSetText_file_desc()) {
        struct.text_file_desc.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, THiveTableSink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.staging_dir = iprot.readString();
        struct.setStaging_dirIsSet(true);
      }
      if (incoming.get(1)) {
        struct.file_format = iprot.readString();
        struct.setFile_formatIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list94 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.data_column_names = new java.util.ArrayList<java.lang.String>(_list94.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem95;
          for (int _i96 = 0; _i96 < _list94.size; ++_i96)
          {
            _elem95 = iprot.readString();
            struct.data_column_names.add(_elem95);
          }
        }
        struct.setData_column_namesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list97 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.partition_column_names = new java.util.ArrayList<java.lang.String>(_list97.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem98;
          for (int _i99 = 0; _i99 < _list97.size; ++_i99)
          {
            _elem98 = iprot.readString();
            struct.partition_column_names.add(_elem98);
          }
        }
        struct.setPartition_column_namesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.compression_type = com.starrocks.thrift.TCompressionType.findByValue(iprot.readI32());
        struct.setCompression_typeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.is_static_partition_sink = iprot.readBool();
        struct.setIs_static_partition_sinkIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cloud_configuration = new com.starrocks.thrift.TCloudConfiguration();
        struct.cloud_configuration.read(iprot);
        struct.setCloud_configurationIsSet(true);
      }
      if (incoming.get(7)) {
        struct.target_max_file_size = iprot.readI64();
        struct.setTarget_max_file_sizeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.text_file_desc = new com.starrocks.thrift.TTextFileDesc();
        struct.text_file_desc.read(iprot);
        struct.setText_file_descIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

