/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TLoadDataCacheMetrics implements org.apache.thrift.TBase<TLoadDataCacheMetrics, TLoadDataCacheMetrics._Fields>, java.io.Serializable, Cloneable, Comparable<TLoadDataCacheMetrics> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLoadDataCacheMetrics");

  private static final org.apache.thrift.protocol.TField READ_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("read_bytes", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField READ_TIME_NS_FIELD_DESC = new org.apache.thrift.protocol.TField("read_time_ns", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField WRITE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("write_bytes", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField WRITE_TIME_NS_FIELD_DESC = new org.apache.thrift.protocol.TField("write_time_ns", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField METRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("metrics", org.apache.thrift.protocol.TType.STRUCT, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TLoadDataCacheMetricsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TLoadDataCacheMetricsTupleSchemeFactory();

  public long read_bytes; // optional
  public long read_time_ns; // optional
  public long write_bytes; // optional
  public long write_time_ns; // optional
  public long count; // optional
  public @org.apache.thrift.annotation.Nullable TDataCacheMetrics metrics; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    READ_BYTES((short)1, "read_bytes"),
    READ_TIME_NS((short)2, "read_time_ns"),
    WRITE_BYTES((short)3, "write_bytes"),
    WRITE_TIME_NS((short)4, "write_time_ns"),
    COUNT((short)5, "count"),
    METRICS((short)6, "metrics");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // READ_BYTES
          return READ_BYTES;
        case 2: // READ_TIME_NS
          return READ_TIME_NS;
        case 3: // WRITE_BYTES
          return WRITE_BYTES;
        case 4: // WRITE_TIME_NS
          return WRITE_TIME_NS;
        case 5: // COUNT
          return COUNT;
        case 6: // METRICS
          return METRICS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __READ_BYTES_ISSET_ID = 0;
  private static final int __READ_TIME_NS_ISSET_ID = 1;
  private static final int __WRITE_BYTES_ISSET_ID = 2;
  private static final int __WRITE_TIME_NS_ISSET_ID = 3;
  private static final int __COUNT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.READ_BYTES,_Fields.READ_TIME_NS,_Fields.WRITE_BYTES,_Fields.WRITE_TIME_NS,_Fields.COUNT,_Fields.METRICS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.READ_BYTES, new org.apache.thrift.meta_data.FieldMetaData("read_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.READ_TIME_NS, new org.apache.thrift.meta_data.FieldMetaData("read_time_ns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WRITE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("write_bytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WRITE_TIME_NS, new org.apache.thrift.meta_data.FieldMetaData("write_time_ns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.METRICS, new org.apache.thrift.meta_data.FieldMetaData("metrics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDataCacheMetrics.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLoadDataCacheMetrics.class, metaDataMap);
  }

  public TLoadDataCacheMetrics() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLoadDataCacheMetrics(TLoadDataCacheMetrics other) {
    __isset_bitfield = other.__isset_bitfield;
    this.read_bytes = other.read_bytes;
    this.read_time_ns = other.read_time_ns;
    this.write_bytes = other.write_bytes;
    this.write_time_ns = other.write_time_ns;
    this.count = other.count;
    if (other.isSetMetrics()) {
      this.metrics = new TDataCacheMetrics(other.metrics);
    }
  }

  @Override
  public TLoadDataCacheMetrics deepCopy() {
    return new TLoadDataCacheMetrics(this);
  }

  @Override
  public void clear() {
    setRead_bytesIsSet(false);
    this.read_bytes = 0;
    setRead_time_nsIsSet(false);
    this.read_time_ns = 0;
    setWrite_bytesIsSet(false);
    this.write_bytes = 0;
    setWrite_time_nsIsSet(false);
    this.write_time_ns = 0;
    setCountIsSet(false);
    this.count = 0;
    this.metrics = null;
  }

  public long getRead_bytes() {
    return this.read_bytes;
  }

  public TLoadDataCacheMetrics setRead_bytes(long read_bytes) {
    this.read_bytes = read_bytes;
    setRead_bytesIsSet(true);
    return this;
  }

  public void unsetRead_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READ_BYTES_ISSET_ID);
  }

  /** Returns true if field read_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetRead_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READ_BYTES_ISSET_ID);
  }

  public void setRead_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READ_BYTES_ISSET_ID, value);
  }

  public long getRead_time_ns() {
    return this.read_time_ns;
  }

  public TLoadDataCacheMetrics setRead_time_ns(long read_time_ns) {
    this.read_time_ns = read_time_ns;
    setRead_time_nsIsSet(true);
    return this;
  }

  public void unsetRead_time_ns() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READ_TIME_NS_ISSET_ID);
  }

  /** Returns true if field read_time_ns is set (has been assigned a value) and false otherwise */
  public boolean isSetRead_time_ns() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READ_TIME_NS_ISSET_ID);
  }

  public void setRead_time_nsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READ_TIME_NS_ISSET_ID, value);
  }

  public long getWrite_bytes() {
    return this.write_bytes;
  }

  public TLoadDataCacheMetrics setWrite_bytes(long write_bytes) {
    this.write_bytes = write_bytes;
    setWrite_bytesIsSet(true);
    return this;
  }

  public void unsetWrite_bytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRITE_BYTES_ISSET_ID);
  }

  /** Returns true if field write_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetWrite_bytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRITE_BYTES_ISSET_ID);
  }

  public void setWrite_bytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRITE_BYTES_ISSET_ID, value);
  }

  public long getWrite_time_ns() {
    return this.write_time_ns;
  }

  public TLoadDataCacheMetrics setWrite_time_ns(long write_time_ns) {
    this.write_time_ns = write_time_ns;
    setWrite_time_nsIsSet(true);
    return this;
  }

  public void unsetWrite_time_ns() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRITE_TIME_NS_ISSET_ID);
  }

  /** Returns true if field write_time_ns is set (has been assigned a value) and false otherwise */
  public boolean isSetWrite_time_ns() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRITE_TIME_NS_ISSET_ID);
  }

  public void setWrite_time_nsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRITE_TIME_NS_ISSET_ID, value);
  }

  public long getCount() {
    return this.count;
  }

  public TLoadDataCacheMetrics setCount(long count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public TDataCacheMetrics getMetrics() {
    return this.metrics;
  }

  public TLoadDataCacheMetrics setMetrics(@org.apache.thrift.annotation.Nullable TDataCacheMetrics metrics) {
    this.metrics = metrics;
    return this;
  }

  public void unsetMetrics() {
    this.metrics = null;
  }

  /** Returns true if field metrics is set (has been assigned a value) and false otherwise */
  public boolean isSetMetrics() {
    return this.metrics != null;
  }

  public void setMetricsIsSet(boolean value) {
    if (!value) {
      this.metrics = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case READ_BYTES:
      if (value == null) {
        unsetRead_bytes();
      } else {
        setRead_bytes((java.lang.Long)value);
      }
      break;

    case READ_TIME_NS:
      if (value == null) {
        unsetRead_time_ns();
      } else {
        setRead_time_ns((java.lang.Long)value);
      }
      break;

    case WRITE_BYTES:
      if (value == null) {
        unsetWrite_bytes();
      } else {
        setWrite_bytes((java.lang.Long)value);
      }
      break;

    case WRITE_TIME_NS:
      if (value == null) {
        unsetWrite_time_ns();
      } else {
        setWrite_time_ns((java.lang.Long)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((java.lang.Long)value);
      }
      break;

    case METRICS:
      if (value == null) {
        unsetMetrics();
      } else {
        setMetrics((TDataCacheMetrics)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case READ_BYTES:
      return getRead_bytes();

    case READ_TIME_NS:
      return getRead_time_ns();

    case WRITE_BYTES:
      return getWrite_bytes();

    case WRITE_TIME_NS:
      return getWrite_time_ns();

    case COUNT:
      return getCount();

    case METRICS:
      return getMetrics();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case READ_BYTES:
      return isSetRead_bytes();
    case READ_TIME_NS:
      return isSetRead_time_ns();
    case WRITE_BYTES:
      return isSetWrite_bytes();
    case WRITE_TIME_NS:
      return isSetWrite_time_ns();
    case COUNT:
      return isSetCount();
    case METRICS:
      return isSetMetrics();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TLoadDataCacheMetrics)
      return this.equals((TLoadDataCacheMetrics)that);
    return false;
  }

  public boolean equals(TLoadDataCacheMetrics that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_read_bytes = true && this.isSetRead_bytes();
    boolean that_present_read_bytes = true && that.isSetRead_bytes();
    if (this_present_read_bytes || that_present_read_bytes) {
      if (!(this_present_read_bytes && that_present_read_bytes))
        return false;
      if (this.read_bytes != that.read_bytes)
        return false;
    }

    boolean this_present_read_time_ns = true && this.isSetRead_time_ns();
    boolean that_present_read_time_ns = true && that.isSetRead_time_ns();
    if (this_present_read_time_ns || that_present_read_time_ns) {
      if (!(this_present_read_time_ns && that_present_read_time_ns))
        return false;
      if (this.read_time_ns != that.read_time_ns)
        return false;
    }

    boolean this_present_write_bytes = true && this.isSetWrite_bytes();
    boolean that_present_write_bytes = true && that.isSetWrite_bytes();
    if (this_present_write_bytes || that_present_write_bytes) {
      if (!(this_present_write_bytes && that_present_write_bytes))
        return false;
      if (this.write_bytes != that.write_bytes)
        return false;
    }

    boolean this_present_write_time_ns = true && this.isSetWrite_time_ns();
    boolean that_present_write_time_ns = true && that.isSetWrite_time_ns();
    if (this_present_write_time_ns || that_present_write_time_ns) {
      if (!(this_present_write_time_ns && that_present_write_time_ns))
        return false;
      if (this.write_time_ns != that.write_time_ns)
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_metrics = true && this.isSetMetrics();
    boolean that_present_metrics = true && that.isSetMetrics();
    if (this_present_metrics || that_present_metrics) {
      if (!(this_present_metrics && that_present_metrics))
        return false;
      if (!this.metrics.equals(that.metrics))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRead_bytes()) ? 131071 : 524287);
    if (isSetRead_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(read_bytes);

    hashCode = hashCode * 8191 + ((isSetRead_time_ns()) ? 131071 : 524287);
    if (isSetRead_time_ns())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(read_time_ns);

    hashCode = hashCode * 8191 + ((isSetWrite_bytes()) ? 131071 : 524287);
    if (isSetWrite_bytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(write_bytes);

    hashCode = hashCode * 8191 + ((isSetWrite_time_ns()) ? 131071 : 524287);
    if (isSetWrite_time_ns())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(write_time_ns);

    hashCode = hashCode * 8191 + ((isSetCount()) ? 131071 : 524287);
    if (isSetCount())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(count);

    hashCode = hashCode * 8191 + ((isSetMetrics()) ? 131071 : 524287);
    if (isSetMetrics())
      hashCode = hashCode * 8191 + metrics.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TLoadDataCacheMetrics other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetRead_bytes(), other.isSetRead_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read_bytes, other.read_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRead_time_ns(), other.isSetRead_time_ns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRead_time_ns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.read_time_ns, other.read_time_ns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWrite_bytes(), other.isSetWrite_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrite_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.write_bytes, other.write_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWrite_time_ns(), other.isSetWrite_time_ns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWrite_time_ns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.write_time_ns, other.write_time_ns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCount(), other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMetrics(), other.isSetMetrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metrics, other.metrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TLoadDataCacheMetrics(");
    boolean first = true;

    if (isSetRead_bytes()) {
      sb.append("read_bytes:");
      sb.append(this.read_bytes);
      first = false;
    }
    if (isSetRead_time_ns()) {
      if (!first) sb.append(", ");
      sb.append("read_time_ns:");
      sb.append(this.read_time_ns);
      first = false;
    }
    if (isSetWrite_bytes()) {
      if (!first) sb.append(", ");
      sb.append("write_bytes:");
      sb.append(this.write_bytes);
      first = false;
    }
    if (isSetWrite_time_ns()) {
      if (!first) sb.append(", ");
      sb.append("write_time_ns:");
      sb.append(this.write_time_ns);
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetMetrics()) {
      if (!first) sb.append(", ");
      sb.append("metrics:");
      if (this.metrics == null) {
        sb.append("null");
      } else {
        sb.append(this.metrics);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (metrics != null) {
      metrics.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLoadDataCacheMetricsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TLoadDataCacheMetricsStandardScheme getScheme() {
      return new TLoadDataCacheMetricsStandardScheme();
    }
  }

  private static class TLoadDataCacheMetricsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TLoadDataCacheMetrics> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TLoadDataCacheMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // READ_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.read_bytes = iprot.readI64();
              struct.setRead_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // READ_TIME_NS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.read_time_ns = iprot.readI64();
              struct.setRead_time_nsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WRITE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.write_bytes = iprot.readI64();
              struct.setWrite_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WRITE_TIME_NS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.write_time_ns = iprot.readI64();
              struct.setWrite_time_nsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.count = iprot.readI64();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // METRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metrics = new TDataCacheMetrics();
              struct.metrics.read(iprot);
              struct.setMetricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TLoadDataCacheMetrics struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRead_bytes()) {
        oprot.writeFieldBegin(READ_BYTES_FIELD_DESC);
        oprot.writeI64(struct.read_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRead_time_ns()) {
        oprot.writeFieldBegin(READ_TIME_NS_FIELD_DESC);
        oprot.writeI64(struct.read_time_ns);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWrite_bytes()) {
        oprot.writeFieldBegin(WRITE_BYTES_FIELD_DESC);
        oprot.writeI64(struct.write_bytes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWrite_time_ns()) {
        oprot.writeFieldBegin(WRITE_TIME_NS_FIELD_DESC);
        oprot.writeI64(struct.write_time_ns);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI64(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.metrics != null) {
        if (struct.isSetMetrics()) {
          oprot.writeFieldBegin(METRICS_FIELD_DESC);
          struct.metrics.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLoadDataCacheMetricsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TLoadDataCacheMetricsTupleScheme getScheme() {
      return new TLoadDataCacheMetricsTupleScheme();
    }
  }

  private static class TLoadDataCacheMetricsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TLoadDataCacheMetrics> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLoadDataCacheMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRead_bytes()) {
        optionals.set(0);
      }
      if (struct.isSetRead_time_ns()) {
        optionals.set(1);
      }
      if (struct.isSetWrite_bytes()) {
        optionals.set(2);
      }
      if (struct.isSetWrite_time_ns()) {
        optionals.set(3);
      }
      if (struct.isSetCount()) {
        optionals.set(4);
      }
      if (struct.isSetMetrics()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetRead_bytes()) {
        oprot.writeI64(struct.read_bytes);
      }
      if (struct.isSetRead_time_ns()) {
        oprot.writeI64(struct.read_time_ns);
      }
      if (struct.isSetWrite_bytes()) {
        oprot.writeI64(struct.write_bytes);
      }
      if (struct.isSetWrite_time_ns()) {
        oprot.writeI64(struct.write_time_ns);
      }
      if (struct.isSetCount()) {
        oprot.writeI64(struct.count);
      }
      if (struct.isSetMetrics()) {
        struct.metrics.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLoadDataCacheMetrics struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.read_bytes = iprot.readI64();
        struct.setRead_bytesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.read_time_ns = iprot.readI64();
        struct.setRead_time_nsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.write_bytes = iprot.readI64();
        struct.setWrite_bytesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.write_time_ns = iprot.readI64();
        struct.setWrite_time_nsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.count = iprot.readI64();
        struct.setCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.metrics = new TDataCacheMetrics();
        struct.metrics.read(iprot);
        struct.setMetricsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

