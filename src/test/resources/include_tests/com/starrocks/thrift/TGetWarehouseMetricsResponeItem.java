/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TGetWarehouseMetricsResponeItem implements org.apache.thrift.TBase<TGetWarehouseMetricsResponeItem, TGetWarehouseMetricsResponeItem._Fields>, java.io.Serializable, Cloneable, Comparable<TGetWarehouseMetricsResponeItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TGetWarehouseMetricsResponeItem");

  private static final org.apache.thrift.protocol.TField WAREHOUSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("warehouse_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField WAREHOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("warehouse_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField QUEUE_PENDING_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("queue_pending_length", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField QUEUE_RUNNING_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("queue_running_length", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_PENDING_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("max_pending_length", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_PENDING_TIME_SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("max_pending_time_second", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EARLIEST_QUERY_WAIT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("earliest_query_wait_time", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MAX_REQUIRED_SLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_required_slots", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SUM_REQUIRED_SLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("sum_required_slots", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REMAIN_SLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("remain_slots", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MAX_SLOTS_FIELD_DESC = new org.apache.thrift.protocol.TField("max_slots", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField EXTRA_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("extra_message", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TGetWarehouseMetricsResponeItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TGetWarehouseMetricsResponeItemTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String warehouse_id; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String warehouse_name; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String queue_pending_length; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String queue_running_length; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String max_pending_length; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String max_pending_time_second; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String earliest_query_wait_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String max_required_slots; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String sum_required_slots; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String remain_slots; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String max_slots; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String extra_message; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WAREHOUSE_ID((short)1, "warehouse_id"),
    WAREHOUSE_NAME((short)2, "warehouse_name"),
    QUEUE_PENDING_LENGTH((short)3, "queue_pending_length"),
    QUEUE_RUNNING_LENGTH((short)4, "queue_running_length"),
    MAX_PENDING_LENGTH((short)5, "max_pending_length"),
    MAX_PENDING_TIME_SECOND((short)6, "max_pending_time_second"),
    EARLIEST_QUERY_WAIT_TIME((short)7, "earliest_query_wait_time"),
    MAX_REQUIRED_SLOTS((short)8, "max_required_slots"),
    SUM_REQUIRED_SLOTS((short)9, "sum_required_slots"),
    REMAIN_SLOTS((short)10, "remain_slots"),
    MAX_SLOTS((short)11, "max_slots"),
    EXTRA_MESSAGE((short)12, "extra_message");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WAREHOUSE_ID
          return WAREHOUSE_ID;
        case 2: // WAREHOUSE_NAME
          return WAREHOUSE_NAME;
        case 3: // QUEUE_PENDING_LENGTH
          return QUEUE_PENDING_LENGTH;
        case 4: // QUEUE_RUNNING_LENGTH
          return QUEUE_RUNNING_LENGTH;
        case 5: // MAX_PENDING_LENGTH
          return MAX_PENDING_LENGTH;
        case 6: // MAX_PENDING_TIME_SECOND
          return MAX_PENDING_TIME_SECOND;
        case 7: // EARLIEST_QUERY_WAIT_TIME
          return EARLIEST_QUERY_WAIT_TIME;
        case 8: // MAX_REQUIRED_SLOTS
          return MAX_REQUIRED_SLOTS;
        case 9: // SUM_REQUIRED_SLOTS
          return SUM_REQUIRED_SLOTS;
        case 10: // REMAIN_SLOTS
          return REMAIN_SLOTS;
        case 11: // MAX_SLOTS
          return MAX_SLOTS;
        case 12: // EXTRA_MESSAGE
          return EXTRA_MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.WAREHOUSE_ID,_Fields.WAREHOUSE_NAME,_Fields.QUEUE_PENDING_LENGTH,_Fields.QUEUE_RUNNING_LENGTH,_Fields.MAX_PENDING_LENGTH,_Fields.MAX_PENDING_TIME_SECOND,_Fields.EARLIEST_QUERY_WAIT_TIME,_Fields.MAX_REQUIRED_SLOTS,_Fields.SUM_REQUIRED_SLOTS,_Fields.REMAIN_SLOTS,_Fields.MAX_SLOTS,_Fields.EXTRA_MESSAGE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WAREHOUSE_ID, new org.apache.thrift.meta_data.FieldMetaData("warehouse_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WAREHOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("warehouse_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUEUE_PENDING_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("queue_pending_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUEUE_RUNNING_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("queue_running_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_PENDING_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("max_pending_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_PENDING_TIME_SECOND, new org.apache.thrift.meta_data.FieldMetaData("max_pending_time_second", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EARLIEST_QUERY_WAIT_TIME, new org.apache.thrift.meta_data.FieldMetaData("earliest_query_wait_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_REQUIRED_SLOTS, new org.apache.thrift.meta_data.FieldMetaData("max_required_slots", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUM_REQUIRED_SLOTS, new org.apache.thrift.meta_data.FieldMetaData("sum_required_slots", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMAIN_SLOTS, new org.apache.thrift.meta_data.FieldMetaData("remain_slots", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_SLOTS, new org.apache.thrift.meta_data.FieldMetaData("max_slots", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRA_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("extra_message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TGetWarehouseMetricsResponeItem.class, metaDataMap);
  }

  public TGetWarehouseMetricsResponeItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TGetWarehouseMetricsResponeItem(TGetWarehouseMetricsResponeItem other) {
    if (other.isSetWarehouse_id()) {
      this.warehouse_id = other.warehouse_id;
    }
    if (other.isSetWarehouse_name()) {
      this.warehouse_name = other.warehouse_name;
    }
    if (other.isSetQueue_pending_length()) {
      this.queue_pending_length = other.queue_pending_length;
    }
    if (other.isSetQueue_running_length()) {
      this.queue_running_length = other.queue_running_length;
    }
    if (other.isSetMax_pending_length()) {
      this.max_pending_length = other.max_pending_length;
    }
    if (other.isSetMax_pending_time_second()) {
      this.max_pending_time_second = other.max_pending_time_second;
    }
    if (other.isSetEarliest_query_wait_time()) {
      this.earliest_query_wait_time = other.earliest_query_wait_time;
    }
    if (other.isSetMax_required_slots()) {
      this.max_required_slots = other.max_required_slots;
    }
    if (other.isSetSum_required_slots()) {
      this.sum_required_slots = other.sum_required_slots;
    }
    if (other.isSetRemain_slots()) {
      this.remain_slots = other.remain_slots;
    }
    if (other.isSetMax_slots()) {
      this.max_slots = other.max_slots;
    }
    if (other.isSetExtra_message()) {
      this.extra_message = other.extra_message;
    }
  }

  @Override
  public TGetWarehouseMetricsResponeItem deepCopy() {
    return new TGetWarehouseMetricsResponeItem(this);
  }

  @Override
  public void clear() {
    this.warehouse_id = null;
    this.warehouse_name = null;
    this.queue_pending_length = null;
    this.queue_running_length = null;
    this.max_pending_length = null;
    this.max_pending_time_second = null;
    this.earliest_query_wait_time = null;
    this.max_required_slots = null;
    this.sum_required_slots = null;
    this.remain_slots = null;
    this.max_slots = null;
    this.extra_message = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWarehouse_id() {
    return this.warehouse_id;
  }

  public TGetWarehouseMetricsResponeItem setWarehouse_id(@org.apache.thrift.annotation.Nullable java.lang.String warehouse_id) {
    this.warehouse_id = warehouse_id;
    return this;
  }

  public void unsetWarehouse_id() {
    this.warehouse_id = null;
  }

  /** Returns true if field warehouse_id is set (has been assigned a value) and false otherwise */
  public boolean isSetWarehouse_id() {
    return this.warehouse_id != null;
  }

  public void setWarehouse_idIsSet(boolean value) {
    if (!value) {
      this.warehouse_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getWarehouse_name() {
    return this.warehouse_name;
  }

  public TGetWarehouseMetricsResponeItem setWarehouse_name(@org.apache.thrift.annotation.Nullable java.lang.String warehouse_name) {
    this.warehouse_name = warehouse_name;
    return this;
  }

  public void unsetWarehouse_name() {
    this.warehouse_name = null;
  }

  /** Returns true if field warehouse_name is set (has been assigned a value) and false otherwise */
  public boolean isSetWarehouse_name() {
    return this.warehouse_name != null;
  }

  public void setWarehouse_nameIsSet(boolean value) {
    if (!value) {
      this.warehouse_name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQueue_pending_length() {
    return this.queue_pending_length;
  }

  public TGetWarehouseMetricsResponeItem setQueue_pending_length(@org.apache.thrift.annotation.Nullable java.lang.String queue_pending_length) {
    this.queue_pending_length = queue_pending_length;
    return this;
  }

  public void unsetQueue_pending_length() {
    this.queue_pending_length = null;
  }

  /** Returns true if field queue_pending_length is set (has been assigned a value) and false otherwise */
  public boolean isSetQueue_pending_length() {
    return this.queue_pending_length != null;
  }

  public void setQueue_pending_lengthIsSet(boolean value) {
    if (!value) {
      this.queue_pending_length = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQueue_running_length() {
    return this.queue_running_length;
  }

  public TGetWarehouseMetricsResponeItem setQueue_running_length(@org.apache.thrift.annotation.Nullable java.lang.String queue_running_length) {
    this.queue_running_length = queue_running_length;
    return this;
  }

  public void unsetQueue_running_length() {
    this.queue_running_length = null;
  }

  /** Returns true if field queue_running_length is set (has been assigned a value) and false otherwise */
  public boolean isSetQueue_running_length() {
    return this.queue_running_length != null;
  }

  public void setQueue_running_lengthIsSet(boolean value) {
    if (!value) {
      this.queue_running_length = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMax_pending_length() {
    return this.max_pending_length;
  }

  public TGetWarehouseMetricsResponeItem setMax_pending_length(@org.apache.thrift.annotation.Nullable java.lang.String max_pending_length) {
    this.max_pending_length = max_pending_length;
    return this;
  }

  public void unsetMax_pending_length() {
    this.max_pending_length = null;
  }

  /** Returns true if field max_pending_length is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_pending_length() {
    return this.max_pending_length != null;
  }

  public void setMax_pending_lengthIsSet(boolean value) {
    if (!value) {
      this.max_pending_length = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMax_pending_time_second() {
    return this.max_pending_time_second;
  }

  public TGetWarehouseMetricsResponeItem setMax_pending_time_second(@org.apache.thrift.annotation.Nullable java.lang.String max_pending_time_second) {
    this.max_pending_time_second = max_pending_time_second;
    return this;
  }

  public void unsetMax_pending_time_second() {
    this.max_pending_time_second = null;
  }

  /** Returns true if field max_pending_time_second is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_pending_time_second() {
    return this.max_pending_time_second != null;
  }

  public void setMax_pending_time_secondIsSet(boolean value) {
    if (!value) {
      this.max_pending_time_second = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEarliest_query_wait_time() {
    return this.earliest_query_wait_time;
  }

  public TGetWarehouseMetricsResponeItem setEarliest_query_wait_time(@org.apache.thrift.annotation.Nullable java.lang.String earliest_query_wait_time) {
    this.earliest_query_wait_time = earliest_query_wait_time;
    return this;
  }

  public void unsetEarliest_query_wait_time() {
    this.earliest_query_wait_time = null;
  }

  /** Returns true if field earliest_query_wait_time is set (has been assigned a value) and false otherwise */
  public boolean isSetEarliest_query_wait_time() {
    return this.earliest_query_wait_time != null;
  }

  public void setEarliest_query_wait_timeIsSet(boolean value) {
    if (!value) {
      this.earliest_query_wait_time = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMax_required_slots() {
    return this.max_required_slots;
  }

  public TGetWarehouseMetricsResponeItem setMax_required_slots(@org.apache.thrift.annotation.Nullable java.lang.String max_required_slots) {
    this.max_required_slots = max_required_slots;
    return this;
  }

  public void unsetMax_required_slots() {
    this.max_required_slots = null;
  }

  /** Returns true if field max_required_slots is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_required_slots() {
    return this.max_required_slots != null;
  }

  public void setMax_required_slotsIsSet(boolean value) {
    if (!value) {
      this.max_required_slots = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSum_required_slots() {
    return this.sum_required_slots;
  }

  public TGetWarehouseMetricsResponeItem setSum_required_slots(@org.apache.thrift.annotation.Nullable java.lang.String sum_required_slots) {
    this.sum_required_slots = sum_required_slots;
    return this;
  }

  public void unsetSum_required_slots() {
    this.sum_required_slots = null;
  }

  /** Returns true if field sum_required_slots is set (has been assigned a value) and false otherwise */
  public boolean isSetSum_required_slots() {
    return this.sum_required_slots != null;
  }

  public void setSum_required_slotsIsSet(boolean value) {
    if (!value) {
      this.sum_required_slots = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRemain_slots() {
    return this.remain_slots;
  }

  public TGetWarehouseMetricsResponeItem setRemain_slots(@org.apache.thrift.annotation.Nullable java.lang.String remain_slots) {
    this.remain_slots = remain_slots;
    return this;
  }

  public void unsetRemain_slots() {
    this.remain_slots = null;
  }

  /** Returns true if field remain_slots is set (has been assigned a value) and false otherwise */
  public boolean isSetRemain_slots() {
    return this.remain_slots != null;
  }

  public void setRemain_slotsIsSet(boolean value) {
    if (!value) {
      this.remain_slots = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMax_slots() {
    return this.max_slots;
  }

  public TGetWarehouseMetricsResponeItem setMax_slots(@org.apache.thrift.annotation.Nullable java.lang.String max_slots) {
    this.max_slots = max_slots;
    return this;
  }

  public void unsetMax_slots() {
    this.max_slots = null;
  }

  /** Returns true if field max_slots is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_slots() {
    return this.max_slots != null;
  }

  public void setMax_slotsIsSet(boolean value) {
    if (!value) {
      this.max_slots = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExtra_message() {
    return this.extra_message;
  }

  public TGetWarehouseMetricsResponeItem setExtra_message(@org.apache.thrift.annotation.Nullable java.lang.String extra_message) {
    this.extra_message = extra_message;
    return this;
  }

  public void unsetExtra_message() {
    this.extra_message = null;
  }

  /** Returns true if field extra_message is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra_message() {
    return this.extra_message != null;
  }

  public void setExtra_messageIsSet(boolean value) {
    if (!value) {
      this.extra_message = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case WAREHOUSE_ID:
      if (value == null) {
        unsetWarehouse_id();
      } else {
        setWarehouse_id((java.lang.String)value);
      }
      break;

    case WAREHOUSE_NAME:
      if (value == null) {
        unsetWarehouse_name();
      } else {
        setWarehouse_name((java.lang.String)value);
      }
      break;

    case QUEUE_PENDING_LENGTH:
      if (value == null) {
        unsetQueue_pending_length();
      } else {
        setQueue_pending_length((java.lang.String)value);
      }
      break;

    case QUEUE_RUNNING_LENGTH:
      if (value == null) {
        unsetQueue_running_length();
      } else {
        setQueue_running_length((java.lang.String)value);
      }
      break;

    case MAX_PENDING_LENGTH:
      if (value == null) {
        unsetMax_pending_length();
      } else {
        setMax_pending_length((java.lang.String)value);
      }
      break;

    case MAX_PENDING_TIME_SECOND:
      if (value == null) {
        unsetMax_pending_time_second();
      } else {
        setMax_pending_time_second((java.lang.String)value);
      }
      break;

    case EARLIEST_QUERY_WAIT_TIME:
      if (value == null) {
        unsetEarliest_query_wait_time();
      } else {
        setEarliest_query_wait_time((java.lang.String)value);
      }
      break;

    case MAX_REQUIRED_SLOTS:
      if (value == null) {
        unsetMax_required_slots();
      } else {
        setMax_required_slots((java.lang.String)value);
      }
      break;

    case SUM_REQUIRED_SLOTS:
      if (value == null) {
        unsetSum_required_slots();
      } else {
        setSum_required_slots((java.lang.String)value);
      }
      break;

    case REMAIN_SLOTS:
      if (value == null) {
        unsetRemain_slots();
      } else {
        setRemain_slots((java.lang.String)value);
      }
      break;

    case MAX_SLOTS:
      if (value == null) {
        unsetMax_slots();
      } else {
        setMax_slots((java.lang.String)value);
      }
      break;

    case EXTRA_MESSAGE:
      if (value == null) {
        unsetExtra_message();
      } else {
        setExtra_message((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case WAREHOUSE_ID:
      return getWarehouse_id();

    case WAREHOUSE_NAME:
      return getWarehouse_name();

    case QUEUE_PENDING_LENGTH:
      return getQueue_pending_length();

    case QUEUE_RUNNING_LENGTH:
      return getQueue_running_length();

    case MAX_PENDING_LENGTH:
      return getMax_pending_length();

    case MAX_PENDING_TIME_SECOND:
      return getMax_pending_time_second();

    case EARLIEST_QUERY_WAIT_TIME:
      return getEarliest_query_wait_time();

    case MAX_REQUIRED_SLOTS:
      return getMax_required_slots();

    case SUM_REQUIRED_SLOTS:
      return getSum_required_slots();

    case REMAIN_SLOTS:
      return getRemain_slots();

    case MAX_SLOTS:
      return getMax_slots();

    case EXTRA_MESSAGE:
      return getExtra_message();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case WAREHOUSE_ID:
      return isSetWarehouse_id();
    case WAREHOUSE_NAME:
      return isSetWarehouse_name();
    case QUEUE_PENDING_LENGTH:
      return isSetQueue_pending_length();
    case QUEUE_RUNNING_LENGTH:
      return isSetQueue_running_length();
    case MAX_PENDING_LENGTH:
      return isSetMax_pending_length();
    case MAX_PENDING_TIME_SECOND:
      return isSetMax_pending_time_second();
    case EARLIEST_QUERY_WAIT_TIME:
      return isSetEarliest_query_wait_time();
    case MAX_REQUIRED_SLOTS:
      return isSetMax_required_slots();
    case SUM_REQUIRED_SLOTS:
      return isSetSum_required_slots();
    case REMAIN_SLOTS:
      return isSetRemain_slots();
    case MAX_SLOTS:
      return isSetMax_slots();
    case EXTRA_MESSAGE:
      return isSetExtra_message();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TGetWarehouseMetricsResponeItem)
      return this.equals((TGetWarehouseMetricsResponeItem)that);
    return false;
  }

  public boolean equals(TGetWarehouseMetricsResponeItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_warehouse_id = true && this.isSetWarehouse_id();
    boolean that_present_warehouse_id = true && that.isSetWarehouse_id();
    if (this_present_warehouse_id || that_present_warehouse_id) {
      if (!(this_present_warehouse_id && that_present_warehouse_id))
        return false;
      if (!this.warehouse_id.equals(that.warehouse_id))
        return false;
    }

    boolean this_present_warehouse_name = true && this.isSetWarehouse_name();
    boolean that_present_warehouse_name = true && that.isSetWarehouse_name();
    if (this_present_warehouse_name || that_present_warehouse_name) {
      if (!(this_present_warehouse_name && that_present_warehouse_name))
        return false;
      if (!this.warehouse_name.equals(that.warehouse_name))
        return false;
    }

    boolean this_present_queue_pending_length = true && this.isSetQueue_pending_length();
    boolean that_present_queue_pending_length = true && that.isSetQueue_pending_length();
    if (this_present_queue_pending_length || that_present_queue_pending_length) {
      if (!(this_present_queue_pending_length && that_present_queue_pending_length))
        return false;
      if (!this.queue_pending_length.equals(that.queue_pending_length))
        return false;
    }

    boolean this_present_queue_running_length = true && this.isSetQueue_running_length();
    boolean that_present_queue_running_length = true && that.isSetQueue_running_length();
    if (this_present_queue_running_length || that_present_queue_running_length) {
      if (!(this_present_queue_running_length && that_present_queue_running_length))
        return false;
      if (!this.queue_running_length.equals(that.queue_running_length))
        return false;
    }

    boolean this_present_max_pending_length = true && this.isSetMax_pending_length();
    boolean that_present_max_pending_length = true && that.isSetMax_pending_length();
    if (this_present_max_pending_length || that_present_max_pending_length) {
      if (!(this_present_max_pending_length && that_present_max_pending_length))
        return false;
      if (!this.max_pending_length.equals(that.max_pending_length))
        return false;
    }

    boolean this_present_max_pending_time_second = true && this.isSetMax_pending_time_second();
    boolean that_present_max_pending_time_second = true && that.isSetMax_pending_time_second();
    if (this_present_max_pending_time_second || that_present_max_pending_time_second) {
      if (!(this_present_max_pending_time_second && that_present_max_pending_time_second))
        return false;
      if (!this.max_pending_time_second.equals(that.max_pending_time_second))
        return false;
    }

    boolean this_present_earliest_query_wait_time = true && this.isSetEarliest_query_wait_time();
    boolean that_present_earliest_query_wait_time = true && that.isSetEarliest_query_wait_time();
    if (this_present_earliest_query_wait_time || that_present_earliest_query_wait_time) {
      if (!(this_present_earliest_query_wait_time && that_present_earliest_query_wait_time))
        return false;
      if (!this.earliest_query_wait_time.equals(that.earliest_query_wait_time))
        return false;
    }

    boolean this_present_max_required_slots = true && this.isSetMax_required_slots();
    boolean that_present_max_required_slots = true && that.isSetMax_required_slots();
    if (this_present_max_required_slots || that_present_max_required_slots) {
      if (!(this_present_max_required_slots && that_present_max_required_slots))
        return false;
      if (!this.max_required_slots.equals(that.max_required_slots))
        return false;
    }

    boolean this_present_sum_required_slots = true && this.isSetSum_required_slots();
    boolean that_present_sum_required_slots = true && that.isSetSum_required_slots();
    if (this_present_sum_required_slots || that_present_sum_required_slots) {
      if (!(this_present_sum_required_slots && that_present_sum_required_slots))
        return false;
      if (!this.sum_required_slots.equals(that.sum_required_slots))
        return false;
    }

    boolean this_present_remain_slots = true && this.isSetRemain_slots();
    boolean that_present_remain_slots = true && that.isSetRemain_slots();
    if (this_present_remain_slots || that_present_remain_slots) {
      if (!(this_present_remain_slots && that_present_remain_slots))
        return false;
      if (!this.remain_slots.equals(that.remain_slots))
        return false;
    }

    boolean this_present_max_slots = true && this.isSetMax_slots();
    boolean that_present_max_slots = true && that.isSetMax_slots();
    if (this_present_max_slots || that_present_max_slots) {
      if (!(this_present_max_slots && that_present_max_slots))
        return false;
      if (!this.max_slots.equals(that.max_slots))
        return false;
    }

    boolean this_present_extra_message = true && this.isSetExtra_message();
    boolean that_present_extra_message = true && that.isSetExtra_message();
    if (this_present_extra_message || that_present_extra_message) {
      if (!(this_present_extra_message && that_present_extra_message))
        return false;
      if (!this.extra_message.equals(that.extra_message))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetWarehouse_id()) ? 131071 : 524287);
    if (isSetWarehouse_id())
      hashCode = hashCode * 8191 + warehouse_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetWarehouse_name()) ? 131071 : 524287);
    if (isSetWarehouse_name())
      hashCode = hashCode * 8191 + warehouse_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueue_pending_length()) ? 131071 : 524287);
    if (isSetQueue_pending_length())
      hashCode = hashCode * 8191 + queue_pending_length.hashCode();

    hashCode = hashCode * 8191 + ((isSetQueue_running_length()) ? 131071 : 524287);
    if (isSetQueue_running_length())
      hashCode = hashCode * 8191 + queue_running_length.hashCode();

    hashCode = hashCode * 8191 + ((isSetMax_pending_length()) ? 131071 : 524287);
    if (isSetMax_pending_length())
      hashCode = hashCode * 8191 + max_pending_length.hashCode();

    hashCode = hashCode * 8191 + ((isSetMax_pending_time_second()) ? 131071 : 524287);
    if (isSetMax_pending_time_second())
      hashCode = hashCode * 8191 + max_pending_time_second.hashCode();

    hashCode = hashCode * 8191 + ((isSetEarliest_query_wait_time()) ? 131071 : 524287);
    if (isSetEarliest_query_wait_time())
      hashCode = hashCode * 8191 + earliest_query_wait_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetMax_required_slots()) ? 131071 : 524287);
    if (isSetMax_required_slots())
      hashCode = hashCode * 8191 + max_required_slots.hashCode();

    hashCode = hashCode * 8191 + ((isSetSum_required_slots()) ? 131071 : 524287);
    if (isSetSum_required_slots())
      hashCode = hashCode * 8191 + sum_required_slots.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemain_slots()) ? 131071 : 524287);
    if (isSetRemain_slots())
      hashCode = hashCode * 8191 + remain_slots.hashCode();

    hashCode = hashCode * 8191 + ((isSetMax_slots()) ? 131071 : 524287);
    if (isSetMax_slots())
      hashCode = hashCode * 8191 + max_slots.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtra_message()) ? 131071 : 524287);
    if (isSetExtra_message())
      hashCode = hashCode * 8191 + extra_message.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TGetWarehouseMetricsResponeItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetWarehouse_id(), other.isSetWarehouse_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarehouse_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warehouse_id, other.warehouse_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWarehouse_name(), other.isSetWarehouse_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarehouse_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warehouse_name, other.warehouse_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueue_pending_length(), other.isSetQueue_pending_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueue_pending_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queue_pending_length, other.queue_pending_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetQueue_running_length(), other.isSetQueue_running_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueue_running_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queue_running_length, other.queue_running_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_pending_length(), other.isSetMax_pending_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_pending_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_pending_length, other.max_pending_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_pending_time_second(), other.isSetMax_pending_time_second());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_pending_time_second()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_pending_time_second, other.max_pending_time_second);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEarliest_query_wait_time(), other.isSetEarliest_query_wait_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEarliest_query_wait_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.earliest_query_wait_time, other.earliest_query_wait_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_required_slots(), other.isSetMax_required_slots());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_required_slots()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_required_slots, other.max_required_slots);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSum_required_slots(), other.isSetSum_required_slots());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSum_required_slots()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sum_required_slots, other.sum_required_slots);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRemain_slots(), other.isSetRemain_slots());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemain_slots()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remain_slots, other.remain_slots);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMax_slots(), other.isSetMax_slots());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_slots()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_slots, other.max_slots);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtra_message(), other.isSetExtra_message());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra_message()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra_message, other.extra_message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TGetWarehouseMetricsResponeItem(");
    boolean first = true;

    if (isSetWarehouse_id()) {
      sb.append("warehouse_id:");
      if (this.warehouse_id == null) {
        sb.append("null");
      } else {
        sb.append(this.warehouse_id);
      }
      first = false;
    }
    if (isSetWarehouse_name()) {
      if (!first) sb.append(", ");
      sb.append("warehouse_name:");
      if (this.warehouse_name == null) {
        sb.append("null");
      } else {
        sb.append(this.warehouse_name);
      }
      first = false;
    }
    if (isSetQueue_pending_length()) {
      if (!first) sb.append(", ");
      sb.append("queue_pending_length:");
      if (this.queue_pending_length == null) {
        sb.append("null");
      } else {
        sb.append(this.queue_pending_length);
      }
      first = false;
    }
    if (isSetQueue_running_length()) {
      if (!first) sb.append(", ");
      sb.append("queue_running_length:");
      if (this.queue_running_length == null) {
        sb.append("null");
      } else {
        sb.append(this.queue_running_length);
      }
      first = false;
    }
    if (isSetMax_pending_length()) {
      if (!first) sb.append(", ");
      sb.append("max_pending_length:");
      if (this.max_pending_length == null) {
        sb.append("null");
      } else {
        sb.append(this.max_pending_length);
      }
      first = false;
    }
    if (isSetMax_pending_time_second()) {
      if (!first) sb.append(", ");
      sb.append("max_pending_time_second:");
      if (this.max_pending_time_second == null) {
        sb.append("null");
      } else {
        sb.append(this.max_pending_time_second);
      }
      first = false;
    }
    if (isSetEarliest_query_wait_time()) {
      if (!first) sb.append(", ");
      sb.append("earliest_query_wait_time:");
      if (this.earliest_query_wait_time == null) {
        sb.append("null");
      } else {
        sb.append(this.earliest_query_wait_time);
      }
      first = false;
    }
    if (isSetMax_required_slots()) {
      if (!first) sb.append(", ");
      sb.append("max_required_slots:");
      if (this.max_required_slots == null) {
        sb.append("null");
      } else {
        sb.append(this.max_required_slots);
      }
      first = false;
    }
    if (isSetSum_required_slots()) {
      if (!first) sb.append(", ");
      sb.append("sum_required_slots:");
      if (this.sum_required_slots == null) {
        sb.append("null");
      } else {
        sb.append(this.sum_required_slots);
      }
      first = false;
    }
    if (isSetRemain_slots()) {
      if (!first) sb.append(", ");
      sb.append("remain_slots:");
      if (this.remain_slots == null) {
        sb.append("null");
      } else {
        sb.append(this.remain_slots);
      }
      first = false;
    }
    if (isSetMax_slots()) {
      if (!first) sb.append(", ");
      sb.append("max_slots:");
      if (this.max_slots == null) {
        sb.append("null");
      } else {
        sb.append(this.max_slots);
      }
      first = false;
    }
    if (isSetExtra_message()) {
      if (!first) sb.append(", ");
      sb.append("extra_message:");
      if (this.extra_message == null) {
        sb.append("null");
      } else {
        sb.append(this.extra_message);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TGetWarehouseMetricsResponeItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGetWarehouseMetricsResponeItemStandardScheme getScheme() {
      return new TGetWarehouseMetricsResponeItemStandardScheme();
    }
  }

  private static class TGetWarehouseMetricsResponeItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<TGetWarehouseMetricsResponeItem> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TGetWarehouseMetricsResponeItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WAREHOUSE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.warehouse_id = iprot.readString();
              struct.setWarehouse_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WAREHOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.warehouse_name = iprot.readString();
              struct.setWarehouse_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUEUE_PENDING_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queue_pending_length = iprot.readString();
              struct.setQueue_pending_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUEUE_RUNNING_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queue_running_length = iprot.readString();
              struct.setQueue_running_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_PENDING_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.max_pending_length = iprot.readString();
              struct.setMax_pending_lengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_PENDING_TIME_SECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.max_pending_time_second = iprot.readString();
              struct.setMax_pending_time_secondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EARLIEST_QUERY_WAIT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.earliest_query_wait_time = iprot.readString();
              struct.setEarliest_query_wait_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAX_REQUIRED_SLOTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.max_required_slots = iprot.readString();
              struct.setMax_required_slotsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SUM_REQUIRED_SLOTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sum_required_slots = iprot.readString();
              struct.setSum_required_slotsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REMAIN_SLOTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remain_slots = iprot.readString();
              struct.setRemain_slotsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MAX_SLOTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.max_slots = iprot.readString();
              struct.setMax_slotsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXTRA_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extra_message = iprot.readString();
              struct.setExtra_messageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TGetWarehouseMetricsResponeItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.warehouse_id != null) {
        if (struct.isSetWarehouse_id()) {
          oprot.writeFieldBegin(WAREHOUSE_ID_FIELD_DESC);
          oprot.writeString(struct.warehouse_id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.warehouse_name != null) {
        if (struct.isSetWarehouse_name()) {
          oprot.writeFieldBegin(WAREHOUSE_NAME_FIELD_DESC);
          oprot.writeString(struct.warehouse_name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.queue_pending_length != null) {
        if (struct.isSetQueue_pending_length()) {
          oprot.writeFieldBegin(QUEUE_PENDING_LENGTH_FIELD_DESC);
          oprot.writeString(struct.queue_pending_length);
          oprot.writeFieldEnd();
        }
      }
      if (struct.queue_running_length != null) {
        if (struct.isSetQueue_running_length()) {
          oprot.writeFieldBegin(QUEUE_RUNNING_LENGTH_FIELD_DESC);
          oprot.writeString(struct.queue_running_length);
          oprot.writeFieldEnd();
        }
      }
      if (struct.max_pending_length != null) {
        if (struct.isSetMax_pending_length()) {
          oprot.writeFieldBegin(MAX_PENDING_LENGTH_FIELD_DESC);
          oprot.writeString(struct.max_pending_length);
          oprot.writeFieldEnd();
        }
      }
      if (struct.max_pending_time_second != null) {
        if (struct.isSetMax_pending_time_second()) {
          oprot.writeFieldBegin(MAX_PENDING_TIME_SECOND_FIELD_DESC);
          oprot.writeString(struct.max_pending_time_second);
          oprot.writeFieldEnd();
        }
      }
      if (struct.earliest_query_wait_time != null) {
        if (struct.isSetEarliest_query_wait_time()) {
          oprot.writeFieldBegin(EARLIEST_QUERY_WAIT_TIME_FIELD_DESC);
          oprot.writeString(struct.earliest_query_wait_time);
          oprot.writeFieldEnd();
        }
      }
      if (struct.max_required_slots != null) {
        if (struct.isSetMax_required_slots()) {
          oprot.writeFieldBegin(MAX_REQUIRED_SLOTS_FIELD_DESC);
          oprot.writeString(struct.max_required_slots);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sum_required_slots != null) {
        if (struct.isSetSum_required_slots()) {
          oprot.writeFieldBegin(SUM_REQUIRED_SLOTS_FIELD_DESC);
          oprot.writeString(struct.sum_required_slots);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remain_slots != null) {
        if (struct.isSetRemain_slots()) {
          oprot.writeFieldBegin(REMAIN_SLOTS_FIELD_DESC);
          oprot.writeString(struct.remain_slots);
          oprot.writeFieldEnd();
        }
      }
      if (struct.max_slots != null) {
        if (struct.isSetMax_slots()) {
          oprot.writeFieldBegin(MAX_SLOTS_FIELD_DESC);
          oprot.writeString(struct.max_slots);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extra_message != null) {
        if (struct.isSetExtra_message()) {
          oprot.writeFieldBegin(EXTRA_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.extra_message);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TGetWarehouseMetricsResponeItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TGetWarehouseMetricsResponeItemTupleScheme getScheme() {
      return new TGetWarehouseMetricsResponeItemTupleScheme();
    }
  }

  private static class TGetWarehouseMetricsResponeItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<TGetWarehouseMetricsResponeItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TGetWarehouseMetricsResponeItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetWarehouse_id()) {
        optionals.set(0);
      }
      if (struct.isSetWarehouse_name()) {
        optionals.set(1);
      }
      if (struct.isSetQueue_pending_length()) {
        optionals.set(2);
      }
      if (struct.isSetQueue_running_length()) {
        optionals.set(3);
      }
      if (struct.isSetMax_pending_length()) {
        optionals.set(4);
      }
      if (struct.isSetMax_pending_time_second()) {
        optionals.set(5);
      }
      if (struct.isSetEarliest_query_wait_time()) {
        optionals.set(6);
      }
      if (struct.isSetMax_required_slots()) {
        optionals.set(7);
      }
      if (struct.isSetSum_required_slots()) {
        optionals.set(8);
      }
      if (struct.isSetRemain_slots()) {
        optionals.set(9);
      }
      if (struct.isSetMax_slots()) {
        optionals.set(10);
      }
      if (struct.isSetExtra_message()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetWarehouse_id()) {
        oprot.writeString(struct.warehouse_id);
      }
      if (struct.isSetWarehouse_name()) {
        oprot.writeString(struct.warehouse_name);
      }
      if (struct.isSetQueue_pending_length()) {
        oprot.writeString(struct.queue_pending_length);
      }
      if (struct.isSetQueue_running_length()) {
        oprot.writeString(struct.queue_running_length);
      }
      if (struct.isSetMax_pending_length()) {
        oprot.writeString(struct.max_pending_length);
      }
      if (struct.isSetMax_pending_time_second()) {
        oprot.writeString(struct.max_pending_time_second);
      }
      if (struct.isSetEarliest_query_wait_time()) {
        oprot.writeString(struct.earliest_query_wait_time);
      }
      if (struct.isSetMax_required_slots()) {
        oprot.writeString(struct.max_required_slots);
      }
      if (struct.isSetSum_required_slots()) {
        oprot.writeString(struct.sum_required_slots);
      }
      if (struct.isSetRemain_slots()) {
        oprot.writeString(struct.remain_slots);
      }
      if (struct.isSetMax_slots()) {
        oprot.writeString(struct.max_slots);
      }
      if (struct.isSetExtra_message()) {
        oprot.writeString(struct.extra_message);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TGetWarehouseMetricsResponeItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.warehouse_id = iprot.readString();
        struct.setWarehouse_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.warehouse_name = iprot.readString();
        struct.setWarehouse_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.queue_pending_length = iprot.readString();
        struct.setQueue_pending_lengthIsSet(true);
      }
      if (incoming.get(3)) {
        struct.queue_running_length = iprot.readString();
        struct.setQueue_running_lengthIsSet(true);
      }
      if (incoming.get(4)) {
        struct.max_pending_length = iprot.readString();
        struct.setMax_pending_lengthIsSet(true);
      }
      if (incoming.get(5)) {
        struct.max_pending_time_second = iprot.readString();
        struct.setMax_pending_time_secondIsSet(true);
      }
      if (incoming.get(6)) {
        struct.earliest_query_wait_time = iprot.readString();
        struct.setEarliest_query_wait_timeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.max_required_slots = iprot.readString();
        struct.setMax_required_slotsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sum_required_slots = iprot.readString();
        struct.setSum_required_slotsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.remain_slots = iprot.readString();
        struct.setRemain_slotsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.max_slots = iprot.readString();
        struct.setMax_slotsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.extra_message = iprot.readString();
        struct.setExtra_messageIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

