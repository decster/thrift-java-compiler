/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.starrocks.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2025-06-16")
public class TSelectNode implements org.apache.thrift.TBase<TSelectNode, TSelectNode._Fields>, java.io.Serializable, Cloneable, Comparable<TSelectNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSelectNode");

  private static final org.apache.thrift.protocol.TField COMMON_SLOT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("common_slot_map", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSelectNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSelectNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> common_slot_map; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMON_SLOT_MAP((short)1, "common_slot_map");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMON_SLOT_MAP
          return COMMON_SLOT_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.COMMON_SLOT_MAP};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMON_SLOT_MAP, new org.apache.thrift.meta_data.FieldMetaData("common_slot_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32            , "TSlotId"), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.starrocks.thrift.TExpr.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSelectNode.class, metaDataMap);
  }

  public TSelectNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSelectNode(TSelectNode other) {
    if (other.isSetCommon_slot_map()) {
      java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> __this__common_slot_map = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>(other.common_slot_map.size());
      for (java.util.Map.Entry<java.lang.Integer, com.starrocks.thrift.TExpr> other_element : other.common_slot_map.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        com.starrocks.thrift.TExpr other_element_value = other_element.getValue();

        java.lang.Integer __this__common_slot_map_copy_key = other_element_key;

        com.starrocks.thrift.TExpr __this__common_slot_map_copy_value = new com.starrocks.thrift.TExpr(other_element_value);

        __this__common_slot_map.put(__this__common_slot_map_copy_key, __this__common_slot_map_copy_value);
      }
      this.common_slot_map = __this__common_slot_map;
    }
  }

  @Override
  public TSelectNode deepCopy() {
    return new TSelectNode(this);
  }

  @Override
  public void clear() {
    this.common_slot_map = null;
  }

  public int getCommon_slot_mapSize() {
    return (this.common_slot_map == null) ? 0 : this.common_slot_map.size();
  }

  public void putToCommon_slot_map(int key, com.starrocks.thrift.TExpr val) {
    if (this.common_slot_map == null) {
      this.common_slot_map = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>();
    }
    this.common_slot_map.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> getCommon_slot_map() {
    return this.common_slot_map;
  }

  public TSelectNode setCommon_slot_map(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr> common_slot_map) {
    this.common_slot_map = common_slot_map;
    return this;
  }

  public void unsetCommon_slot_map() {
    this.common_slot_map = null;
  }

  /** Returns true if field common_slot_map is set (has been assigned a value) and false otherwise */
  public boolean isSetCommon_slot_map() {
    return this.common_slot_map != null;
  }

  public void setCommon_slot_mapIsSet(boolean value) {
    if (!value) {
      this.common_slot_map = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COMMON_SLOT_MAP:
      if (value == null) {
        unsetCommon_slot_map();
      } else {
        setCommon_slot_map((java.util.Map<java.lang.Integer,com.starrocks.thrift.TExpr>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMON_SLOT_MAP:
      return getCommon_slot_map();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COMMON_SLOT_MAP:
      return isSetCommon_slot_map();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TSelectNode)
      return this.equals((TSelectNode)that);
    return false;
  }

  public boolean equals(TSelectNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_common_slot_map = true && this.isSetCommon_slot_map();
    boolean that_present_common_slot_map = true && that.isSetCommon_slot_map();
    if (this_present_common_slot_map || that_present_common_slot_map) {
      if (!(this_present_common_slot_map && that_present_common_slot_map))
        return false;
      if (!this.common_slot_map.equals(that.common_slot_map))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCommon_slot_map()) ? 131071 : 524287);
    if (isSetCommon_slot_map())
      hashCode = hashCode * 8191 + common_slot_map.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TSelectNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetCommon_slot_map(), other.isSetCommon_slot_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommon_slot_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.common_slot_map, other.common_slot_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSelectNode(");
    boolean first = true;

    if (isSetCommon_slot_map()) {
      sb.append("common_slot_map:");
      if (this.common_slot_map == null) {
        sb.append("null");
      } else {
        sb.append(this.common_slot_map);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSelectNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSelectNodeStandardScheme getScheme() {
      return new TSelectNodeStandardScheme();
    }
  }

  private static class TSelectNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSelectNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TSelectNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMON_SLOT_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map938 = iprot.readMapBegin();
                struct.common_slot_map = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>(2*_map938.size);
                int _key939;
                @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _val940;
                for (int _i941 = 0; _i941 < _map938.size; ++_i941)
                {
                  _key939 = iprot.readI32();
                  _val940 = new com.starrocks.thrift.TExpr();
                  _val940.read(iprot);
                  struct.common_slot_map.put(_key939, _val940);
                }
                iprot.readMapEnd();
              }
              struct.setCommon_slot_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TSelectNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.common_slot_map != null) {
        if (struct.isSetCommon_slot_map()) {
          oprot.writeFieldBegin(COMMON_SLOT_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.common_slot_map.size()));
            for (java.util.Map.Entry<java.lang.Integer, com.starrocks.thrift.TExpr> _iter942 : struct.common_slot_map.entrySet())
            {
              oprot.writeI32(_iter942.getKey());
              _iter942.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSelectNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TSelectNodeTupleScheme getScheme() {
      return new TSelectNodeTupleScheme();
    }
  }

  private static class TSelectNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSelectNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSelectNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCommon_slot_map()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetCommon_slot_map()) {
        {
          oprot.writeI32(struct.common_slot_map.size());
          for (java.util.Map.Entry<java.lang.Integer, com.starrocks.thrift.TExpr> _iter943 : struct.common_slot_map.entrySet())
          {
            oprot.writeI32(_iter943.getKey());
            _iter943.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSelectNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map944 = iprot.readMapBegin(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT); 
          struct.common_slot_map = new java.util.HashMap<java.lang.Integer,com.starrocks.thrift.TExpr>(2*_map944.size);
          int _key945;
          @org.apache.thrift.annotation.Nullable com.starrocks.thrift.TExpr _val946;
          for (int _i947 = 0; _i947 < _map944.size; ++_i947)
          {
            _key945 = iprot.readI32();
            _val946 = new com.starrocks.thrift.TExpr();
            _val946.read(iprot);
            struct.common_slot_map.put(_key945, _val946);
          }
        }
        struct.setCommon_slot_mapIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

