package com.github.decster.gen;

import com.github.decster.ast.TType;

public class Generator {
    protected static final String INDENT = "  ";
    protected int indent_level = 0;
    protected int tmpCounter = 0;

    protected String tmp(String name) {
        String ret = name + tmpCounter;
        tmpCounter++;
        return ret;
    }

    /**
     * Converts a double value to a string representation
     */
    protected String emitDoubleAsString(double value) { return String.format("%.17g", value); }

    /**
     * Escapes a string for use in Java code
     */
    protected String getEscapedString(String str) {
        if (str == null) {
            return null;
        }

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            switch (c) {
                case '"':
                    sb.append("\\\"");
                    break;
                case '\\':
                    sb.append("\\\\");
                    break;
                case '\b':
                    sb.append("\\b");
                    break;
                case '\f':
                    sb.append("\\f");
                    break;
                case '\n':
                    sb.append("\\n");
                    break;
                case '\r':
                    sb.append("\\r");
                    break;
                case '\t':
                    sb.append("\\t");
                    break;
                default:
                    if (c < 32) {
                        sb.append(String.format("\\u%04x", (int)c));
                    } else {
                        sb.append(c);
                    }
            }
        }
        return sb.toString();
    }

    protected String autogenComment() {
        return "/**\n" + " * " + autogen_summary() + "\n" + " *\n"
                + " * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n"
                + " *  @generated\n" + " */\n";
    }

    protected String THRIFT_VERSION = "0.20.0";

    protected String autogen_summary() {
        return "Autogenerated by Thrift Compiler (" + THRIFT_VERSION + ")";
    }


    /**
     * Add indentation to code lines.
     *
     * @param level The indentation level
     * @return The indentation string
     */
    protected String indent(int level) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < level; i++) {
            sb.append(INDENT);
        }
        return sb.toString();
    }

    /**
     * Returns current indentation string.
     *
     * @return The indentation string
     */
    protected String indent() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < indent_level; i++) {
            sb.append(INDENT);
        }
        return sb.toString();
    }

    /**
     * Increases the indentation level.
     */
    protected void indent_up() {
        indent_level++;
    }

    /**
     * Decreases the indentation level.
     */
    protected void indent_down() {
        indent_level--;
    }

    /**
     * Opens a new scope (curly brace) and increases indentation level.
     *
     * @param sb The StringBuilder to append to
     */
    protected void scope_up(StringBuilder sb) {
        sb.append(indent()).append("{\n");
        indent_up();
    }

    /**
     * Closes a scope (curly brace) and decreases indentation level.
     *
     * @param sb The StringBuilder to append to
     */
    protected void scope_down(StringBuilder sb) {
        indent_down();
        sb.append(indent()).append("}\n");
    }

    protected TType getTrueType(TType type) {
        return type.getTrueType();
    }
}
